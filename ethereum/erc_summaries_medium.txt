=== ERC-5791 ===
TITLE: Physical Backed Tokens
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-10-17
REQUIRES: 1, 9, 1, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It proposes a minimal interface for a [ERC-721](./eip-721.md) NFT to be "physically backed" and owned by whoever owns the NFT's physical counterpart.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Requirements This approach requires that the physical item must have a chip attached to it that should be secure

MOTIVATION:
NFT collectors enjoy collecting digital assets and sharing them with others online. However, there is currently no such standard for showcasing physical assets as NFTs with verified authenticity and ownership. Existing solutions are fragmented and tend to be susceptible to at least one of the following: - The ownership

RATIONALE:
This solution's intent is to be the simplest possible path towards linking physical items to digital NFTs without a centralized authority. The interface includes a `transferToken` function that's opinionated with respect to the signature scheme, in order to enable a downstream aggregator-like product that supports transfers of any NFTs


=== ERC-7582 ===
TITLE: Modular Accounts with Delegated Validation
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-25
REQUIRES: 4337

SUMMARY:
This proposal standardizes a method for adding plugins and composable logic to smart contract accounts built on existing interfaces like [ERC-4337](eip-4337.md) (e.g., ERC-4337's `IAccount`). Specifically, by formalizing how applications can use the ERC-4337 Entry Point `NonceManager` and the emission of the `IEntryPoint` `UserOperationEvent` to account for plugin interactions, as

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ![diagram showing proposed flow](../assets/eip-7582/base-flow.svg) We leverage the key in ERC-4337 semi-abstracted nonce as the pointer

MOTIVATION:
Smart contract accounts (contract accounts) are a powerful tool for managing digital assets and executing transactions by allowing users to program their interactions with blockchains. However, they are often limited in their functionality and flexibility without sufficient consensus around secure abstraction designs (albeit, the adoption of ERC-4337 is the


=== ERC-1581 ===
TITLE: Non-wallet usage of keys derived from BIP-32 trees
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-13
REQUIRES: 

SUMMARY:
BIP32 defines a way to generate hierarchical trees of keys which can be derived from a common master key. BIP32 and [BIP44](https://https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) defines the usage of these keys as wallets. In this EIP we describe the usage of such keys outside the scope of the blockchain defining a logical

SPECIFICATION:
### Path levels We define the following levels in BIP32 path: ```m / purpose' / coin_type' / subpurpose' / key_type' / key_index``` Apostrophe in the path indicates that BIP32 hardened derivation is used. This structure follows the [BIP43](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki) recommendations and its [amendments for non-Bitcoin usage](https://github.com/bitcoin/bips/pull/523/files). Each level has a

MOTIVATION:
Applications interacting with the blockchain often make use of additional, non-blockchain technologies to perform the task they are designed for. For privacy and security sensitive mechanisms, sets of keys are needed. Reusing keys used for wallets can prove to be insecure, while keeping completely independent keys make backup and

RATIONALE:
The structure proposed above follows the BIP43 generic structure and is similar to the widely adopted BIP44 specification.


=== ERC-5018 ===
TITLE: Filesystem-like Interface for Contracts
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-04-18
REQUIRES: 

SUMMARY:
The following standardizes an API for directories and files within smart contracts, similar to traditional filesystems. This standard provides basic functionality to read/write binary objects of any size, as well as allow reading/writing chunks of the object if the object is too large to fit in a single transaction.

SPECIFICATION:
### Directory #### Methods ##### write Writes binary `data` to the file `name` in the directory by an account with write permission. ``` function write(bytes memory name, bytes memory data) external payable ``` ##### read Returns the binary `data` from the file `name` in the directory and existence of

MOTIVATION:
A standard interface allows any binary objects on EVM-based blockchain to be re-used by other dApps. With [EIP-4804](./eip-4804.md), we are able to locate a Web3 resource on blockchain using HTTP-style URIs. One application of Web3 resources are web contents that are referenced within a directory using relative paths such

RATIONALE:
One issue of uploading the web contents to the blockchain is that the web contents may be too large to fit into a single transaction. As a result, the standard provides chunk-based operations so that uploading a content can be split into several transactions. Meanwhile, the read operation can


=== ERC-4799 ===
TITLE: Non-Fungible Token Ownership Designation Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-02-13
REQUIRES: 165

SUMMARY:
The following defines a standard interface for designating ownership of an NFT to someone while the NFT is held in escrow by a smart contract. The standard allows for the construction of a directed acyclic graph of NFTs, where the designated owner of every NFT in a given chain

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity import "@openzeppelin/contracts/utils/introspection/IERC165.sol"; interface IERC4799NFT is IERC165 { /// @dev This emits when ownership of any NFT changes by any

MOTIVATION:
Many NFTs aim to provide their holders with some utility - utility that can come in many forms. This can be the right to inhabit an apartment, access to tickets to an event, an airdrop of tokens, or one of the infinitely many other potential applications. However, in their

RATIONALE:
To maximize the future compatibility of the wrapping contract, we first defined a canonical NFT interface. We created `IERC4799NFT`, an interface implicitly implemented by virtually all popular NFT contracts, including all deployed contracts that are [ERC-721](./eip-721.md) compliant. This interface represents the essence of an NFT: a mapping from a


=== ERC-7765 ===
TITLE: Privileged Non-Fungible Tokens Tied To RWA
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-08-20
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This EIP defines an interface to carry a real world asset with some privileges that can be exercised by the holder of the corresponding NFT. The EIP standardizes the interface for non-fungible tokens representing real world assets with privileges to be exercised, such as products sold onchain which can

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. This standard inherits the [ERC-721](./eip-721.md) NFT token standard for all transfer and approval logic. All

MOTIVATION:
NFTs bound to real-world assets sometimes need to carry certain privileges that can be exercised by the holder. Users can initiate transactions onchain to specify the exercise of a certain privilege, thereby achieving real-world privileges that directly map the onchain privilege through subsequent operations. For example, if a certain

RATIONALE:
1. With the `PrivilegeExercised` event emitted onchain, we can determine that the user has confirmed the exercise of this privilege, so as to implement the privilege in the real world. 2. We choose to include an address `_to` for functions `exercisePrivilege`, `isExercisable` and `isExercised` so that a specific privilege


=== ERC-2520 ===
TITLE: Multiple contenthash records for ENS
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-02-18
REQUIRES: 1577

SPECIFICATION:
Setting and getting functions **MUST** have the same public interface as specified in EIP 1577. Additionally, they **MUST** also have new public interfaces introduced by this EIP: * For setting a `contenthash` record, the `setContenthash` **MUST** provide additional `proto` parameter and use it to save the `contenthash`. When `proto`

MOTIVATION:
Many applications are resolving ENS names to content hosted on distributed systems. To do this, they use `contenthash` record from ENS domain to know how to resolve names and which distributed system should be used. However, the domain can store only one `contenthash` record which means that the site

RATIONALE:
The proposed implementation was chosen because it is simple to implement and supports all important requested features. However, it doesn't support multiple records for the same type and priority order, as they don't give much advantage and are harder to implement properly.


=== ERC-3668 ===
TITLE: CCIP Read—Secure offchain data retrieval
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-07-19
REQUIRES: 

SUMMARY:
Contracts wishing to support lookup of data from external sources may, instead of returning the data directly, revert using `OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData)`. Clients supporting this specification then make an RPC call to a URL from `urls`, supplying `callData`, and getting back an

SPECIFICATION:
### Overview Answering a query via CCIP read takes place in three steps: 1. Querying the contract. 2. Querying the gateway using the URL provided in (1). 3. Querying or sending a transaction to the contract using the data from (1) and (2). In step 1, a standard blockchain

MOTIVATION:
Minimising storage and transaction costs on Ethereum has driven contract authors to adopt a variety of techniques for moving data offchain, including hashing, recursive hashing (eg Merkle Trees/Tries) and L2 solutions. While each solution has unique constraints and parameters, they all share in common the fact that enough information

RATIONALE:
### Use of `revert` to convey call information For offchain data lookup to function as desired, clients must either have some way to know that a function depends on this specification for functionality - such as a specifier in the ABI for the function - or else there must


=== ERC-5568 ===
TITLE: Well-Known Format for Required Actions
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-08-31
REQUIRES: 140

SUMMARY:
This ERC introduces a minimalistic machine-readable (binary) format to signal to wallets that an action needs to be taken by the user using a well-known function and revert reason. It provides just enough data to be extendable by future ERCs and to take in arbitrary parameters (up to 64

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Action Detection ```solidity interface IERC5568 { function walletSignal24(bytes32 selector, bytes function_data) view returns (uint24 instruction_id, bytes instruction_data); } ```

MOTIVATION:
Oftentimes, a smart contract needs to signal to a wallet that an action needs to be taken, such as to sign a transaction or send an HTTP request to a URL. Traditionally, this has been done by hard-coding the logic into the frontend, but this ERC allows the smart

RATIONALE:
This ERC was explicitly optimized for deployment gas cost and simplicity. It is expected that libraries will eventually be developed that makes this more developer-friendly. [ERC-165](./eip-165.md) is not used, since the interface is simple enough that it can be detected simply by calling the function.


=== ERC-7053 ===
TITLE: Interoperable Digital Media Indexing
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-05-22
REQUIRES: 

SUMMARY:
This EIP proposes an interoperable indexing strategy designed to enhance the organization and retrieval of digital media information across multiple smart contracts and EVM-compatible blockchains. This system enhances the traceability and verification of cross-contract and cross-chain data, facilitating a more efficient discovery of storage locations and crucial information related

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Content Identifier Content Identifier in this EIP is the content address generated by passing

MOTIVATION:
Given the significant role digital media files play on the Internet, it's crucial to have a robust and efficient method for indexing immutable information. Existing systems encounter challenges due to the absence of a universal, interoperable identifier for digital media content. This leads to fragmentation and complications in retrieving

RATIONALE:
The design decisions in this EIP prioritize the effectiveness and efficiency of the indexing method. To achieve this, Decentralized Content Identifiers (CIDs) are utilized to uniquely identify digital media content across all systems. This approach offers accurate and precise searching of media, along with the following benefits: 1. Strengthened


=== ERC-7406 ===
TITLE: Multi-Namespace Onchain Registry
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-23
REQUIRES: 137

SUMMARY:
This EIP proposes a universally accepted description for onchain registry entries with support for multi-namespaces, where each entry is structured as a mapping type. The multi-namespace registry enables the storage of a collection of key-value mappings within the blockchain, serving as a definitive source of information with a traceable

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### **Registry specification** The multi namespace registry contract exposes the following functions: ```solidity function owner(bytes32 namespace, bytes32 key) external view

MOTIVATION:
Blockchain-based registries are fundamental components for decentralized applications, enabling the storage and retrieval of essential information. Existing solutions, like the ENS registry, serve specific use cases but may lack the necessary flexibility to accommodate more complex scenarios. The need for a more general mapping data structure with multi-namespace support

RATIONALE:
By supporting multiple namespaces, the registry caters to various use cases, including but not limited to identity management, session management, record tracking, and decentralized content publishing. This flexibility enables developers to design and implement more complex decentralized applications with ease.


=== ERC-7618 ===
TITLE: Content encoding in ERC-5219 mode Web3 URL
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-08
REQUIRES: 5, 2, 1, 9, ,,  , 6, 9, 4, 4

SUMMARY:
In the context of the [ERC-6860](./eip-6860.md) `web3://` standard, this ERC extends the [ERC-6944](./eip-6944.md) resolve mode: This standard specifies that if a `Content-Encoding` header is returned by the `request()` call, then the returned data is decoded if necessary according to the specified algorithm before being returned to the client.

SPECIFICATION:
In the [ERC-6944](./eip-6944.md) resolve mode, this standard indicates that if a ``Content-Encoding`` HTTP header (in the returned `headers` `KeyValue` array of the `request()` method) is provided, and if it is not part of the supported algorithms provided by the client in the ``Accept-Encoding`` header, or the client did not

MOTIVATION:
As storage in blockchains is expensive, it is optimal to try to store and serve compressed assets. Standard HTTP uses the `Accept-Encoding`/`Content-Encoding` mechanism, in which the client specifies their supported compression algorithms, and the server returns the data compressed in one of them. It is not optimal to replicate

RATIONALE:
We add this feature to the [ERC-6944](./eip-6944.md) resolve mode because it can be added without changes the interface. To stay as close as possible to standard HTTP, we don't introduce a new HTTP header but reuse the known `Content-Encoding` header.


=== ERC-7565 ===
TITLE: Perpetual Contract NFTs as Collateral
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-11-27
REQUIRES: 7, 2, 1, ,,  , 4, 9, 0, 7

SUMMARY:
This ERC proposes a mechanism where a person (referred to as the "Asset Owner") can collateralize NFTs that represent locked deposits or assets, to borrow funds against them. These NFTs represent the right to claim the underlying assets, along with any accrued benefits, after a predefined maturity period. [^1]

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Contract Interface Solidity interface. ```solidity interface IPerpetualContractNFT { // Emitted when an NFT is

MOTIVATION:
The rapidly evolving landscape of DeFi has introduced various mechanisms for asset locking, offering benefits like interest and voting rights. However, one of the significant challenges in this space is maintaining liquidity while these assets are locked. This ERC addresses this challenge by proposing a method to generate profit

RATIONALE:
### Design Motivation The design of this standard is driven by the need to address specific challenges in the DeFi sector, particularly concerning the liquidity and management of assets locked as collateral. Traditional mechanisms in DeFi often require asset holders to lock up their assets for participation in activities


=== ERC-6381 ===
TITLE: Public Non-Fungible Token Emote Repository
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-01-22
REQUIRES: 165

SUMMARY:
The Public Non-Fungible Token Emote Repository standard provides an enhanced interactive utility for [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) by allowing NFTs to be emoted at. This proposal introduces the ability to react to NFTs using Unicode standardized emoji in a public non-gated repository smart contract that is accessible at the same

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity /// @title ERC-6381 Emotable Extension for Non-Fungible Tokens /// @dev See https://eips.ethereum.org/EIPS/eip-6381 /// @dev Note: the ERC-165 identifier for

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time to standardize additional utility for them. Having the ability for anyone to interact with an NFT introduces an interactive aspect to owning an NFT and

RATIONALE:
Designing the proposal, we considered the following questions: 1. **Does the proposal support custom emotes or only the Unicode specified ones?**\ The proposal only accepts the Unicode identifier which is a `bytes4` value. This means that while we encourage implementers to add the reactions using standardized emojis, the values


=== ERC-7751 ===
TITLE: Wrapping of bubbled up reverts
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2024-08-06
REQUIRES: 

SUMMARY:
This ERC proposes a standard for handling bubbled up reverts in Ethereum smart contracts using a dedicated custom error. This standard aims to improve the clarity and usability of revert reasons by allowing additional context to be passed alongside the raw bytes of the bubbled up revert. The `WrappedError`

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. In order to wrap a revert, a contract MUST revert with the following error that

MOTIVATION:
Currently, when a smart contract calls another and the called contract reverts, the revert reason is usually bubbled up and thrown as is. This can make it more difficult to tell which context the error came from. By standardizing the use of custom errors with additional context, more meaningful

RATIONALE:
By including the called contract and function, raw revert bytes and additional context, developers can provide more detailed information about the failure. Additionally, by standardizing the way reverts are bubbled up, it also enables nested bubbled up reverts where multiple reverts thrown by different contracts can be followed recursively.


=== ERC-4950 ===
TITLE: Entangled Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-03-28
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP defines an interface for delegating control of a smart contract wallet to pairs of users using entangled [ERC-721](./eip-721.md) non-fungible tokens.

SPECIFICATION:
An entangled token contract implements [ERC-721](./eip-721.md) with the additional restriction that it only ever mints exactly two tokens at contract deployment: one with a `tokenId` of `0`, the other with a `tokenId` of `1`. The entangled token contract also implements a smart contract wallet that can be operated by

MOTIVATION:
The motivation is to provide an easy way to share a wallet through NFTs, so that the act of buying an NFT (in a marketplace) gives the buyer the privilege to have access to a given wallet. This wallet could have budget in many tokens, or even be the

RATIONALE:
We decide to extend [ERC-721](./eip-721.md) ([ERC-1155](./eip-1155.md) could be also possible) because the main purpose of this is to be compatible with current marketplaces platforms. This entangled NFTs will be listed in a marketplace, and the user who buys it will have then the possibility to transact with the wallet


=== ERC-7548 ===
TITLE: Open IP Protocol built on NFTs
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-10-31
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal aims to establish a standardized method for creating new intellectual properties (IPs) by remixing multiple existing IPs in a decentralized manner. The protocol is built on the foundation of NFTs (Non-Fungible Tokens). Within this protocol, each intellectual property is represented as an NFT. It extends the [ERC-721](./eip-721.md)

SPECIFICATION:
The keywords “MUST,” “MUST NOT,” “REQUIRED,” “SHALL,” “SHALL NOT,” “SHOULD,” “SHOULD NOT,” “RECOMMENDED,” “MAY,” and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. **Interface** This protocol standardizes how to remix multiple existing NFTs and create a new NFT derivative work (known as a combo),

MOTIVATION:
The internet is flooded with fresh content every day, but with the traditional IP infrastructure, IP registration and licensing is a headache for digital creators. The rapid creation of content has eclipsed the slower pace of IP registration, leaving much of this content unprotected. This means digital creators can't

RATIONALE:
The Open IP Protocol is built on the "1 premise, 2 extensions, 1 constant" principle. The “1 premise” means that for any IP in the Open IP ecosystem, an NFT stands for that IP. So, if you have the NFT, you own the IP. That’s why the Open IP


=== ERC-7831 ===
TITLE: Multi-Chain Addressing
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-08-30
REQUIRES: 5, 5, ,,  , 1, 3, 7, ,,  , 1, 5, 5, ,,  , 1, 6, 5, ,,  , 2, 3, 0, 4

SUMMARY:
This proposal introduces a chain-specific address format that allows specifying both an account and the chain on which that account intends to transact. These chain-specific addresses take the form of `(example.eth:optimism)`, `6A10161835a36302BfD39bDA9B44f5734442234e:ethereum:11155111`, and so on. The target chain is resolved using a registry stored on ENS.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC 2119] and [RFC 8174]. Grammar snippets in this proposal are given in Augmented Backus-Naur form (ABNF) as defined in

MOTIVATION:
The Ethereum ecosystem is becoming steadily more fragmented. This means a 20 byte address by itself is not enough information to fully specify an account. This can be problematic if funds are sent to an unreachable address on the incorrect chain. Instead of using chain identifiers, which are not

RATIONALE:
### Component Order The components are ordered from most specific to most general because... <!-- TODO --> ### Separator Choice The colon (`:`) is a reasonable choice for separator because it is not an allowed character in ENS names, it is familiar (eg. IPv6), and isn't as overloaded as


=== ERC-7518 ===
TITLE: Dynamic Compliant Interop Security Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-14
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This proposal is a security token standard that extends [ERC-1155](./eip-1155.md) to provide a flexible framework for managing compliant real-asset security tokens. It introduces the concept of partitions, where each `tokenId` represents a distinct partition with its own set of rights and privileges. This makes it suitable for various use

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Interface ```solidity pragma solidity ^0.8.0; interface IERC7518 is IERC1155, IERC165{ event TokensLocked(address indexed account,

MOTIVATION:
The growing demand for tokenized real-world assets necessitates a token standard that can accommodate the unique requirements of security tokens. Existing standards, while powerful, do not fully address the need for flexible partitioning and comprehensive compliance management. Build upon of [ERC-1155](./eip-1155.md) to introduce partitions, allowing for the creation of

RATIONALE:
### Enhancing Compliance Management The `canTransfer` function facilitates compliance checks during token transfers, offering adaptability through diverse implementation methods such as on-chain storage, oracle utilization, or any off-chain methodologies. This versatility ensures seamless integration with existing compliance frameworks, particularly in enforcing regulatory standards like KYC/AML. Additionally, functionalities like `freezeAddress`,


=== ERC-6229 ===
TITLE: Tokenized Vaults with Lock-in Period
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-12-21
REQUIRES: 4626

SUMMARY:
This standard extends [EIP-4626](./eip-4626.md) to support lock-in periods.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. All vaults that follow this EIP MUST implement [EIP-4626](./eip-4626.md) to provide basic vault functions and

MOTIVATION:
The [EIP-4626](./eip-4626.md) standard defines a tokenized vault allowing users (contracts or EOAs) to deposit and withdraw underlying tokens at any time. However, there exist cases where the vault needs to lock the underlying tokens (perhaps to execute certain strategies). During the lock-in period, neither withdrawals nor deposits should be

RATIONALE:
The standard is designed to be a minimal interface. Details such as the start and end of a lock-in period, and how the underlying tokens are being used during the lock-in period are not specified. There is no function for scheduling a withdrawal, since during the lock-in period, the


=== ERC-5850 ===
TITLE: Complex Numbers stored in `bytes32` types
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-10-29
REQUIRES: 

SUMMARY:
This EIP proposes a natural way for complex numbers to be stored in and retrieved from the `bytes32` data-type. It splits the storage space exactly in half and, most importantly, assigns the real number part to the least significant 16 bytes and the imaginary number part to the most

SPECIFICATION:
A complex number would be defined as `bytes32` and a cartesian representation would be initalized with the `cnNew` function and converted back with `RealIm`, both given below. To create the complex number one would use ```solidity function cnNew(int128 _Real, int128 _Imag) public pure returns (bytes32){ bytes32 Imag32 = bytes16(uint128(_Imag));

MOTIVATION:
Complex numbers are an essential tool for many mathematical and scientific calculations. For example, Fourier Transforms, Characteristic functions, AC Circuits and Navier-Stokes equations all require the concept. Complex numbers can be represented in many different forms (polynomial, cartesian, polar, exponential). The EIP creates a standard that can accomodate cartesian,

RATIONALE:
An EIP is required as this proposal defines a complex numbers storage/type standard for multiple apps to use. This EIP proposes to package both the real and imaginary within one existing data type, `bytes32`. This allows compact storage without the need for structures and facilitates easy library implementations. The


=== ERC-3561 ===
TITLE: Trust Minimized Upgradeability Proxy
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-05-09
REQUIRES: 

SUMMARY:
Removing trust from upgradeability proxy is necessary for anonymous developers. In order to accomplish this, instant and potentially malicious upgrades must be prevented. This EIP introduces additional storage slots for upgradeability proxy which are assumed to decrease trust in interaction with upgradeable smart contracts. Defined by the admin implementation

SPECIFICATION:
The specification is an addition to the standard [EIP-1967](./eip-1967.md) transparent proxy design. The specification focuses on the slots it adds. All admin interactions with trust minimized proxy must emit an event to make admin actions trackable, and all admin actions must be guarded with `onlyAdmin()` modifier. ### Next Logic

MOTIVATION:
Anonymous developers who utilize upgradeability proxies typically struggle to earn the trust of the community. Fairer, better future for humanity absolutely requires some developers to stay anonymous while still attract vital attention to solutions they propose and at the same time leverage the benefits of possible upgradeability.

RATIONALE:
An argument "just don't make such contracts upgadeable at all" fails when it comes to complex systems which do or do not heavily rely on human factor, which might manifest itself in unprecedented ways. It might be impossible to model some systems right on first try. Using decentralized governance


=== ERC-6821 ===
TITLE: Support ENS Name for Web3 URL
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-02
REQUIRES: 1, 3, 7, ,,  , 6, 3, 4, ,,  , 3, 7, 7, 0, ,,  , 4, 8, 0, 4

SUMMARY:
This standard defines the mapping from an Ethereum name service (ENS) name to an Ethereum address for [ERC-4804](./eip-4804.md).

SPECIFICATION:
Given **contractName** and **chainid** from a `web3://` URI defined in ERC-4804, the protocol will find the address of the contract using the following steps: 1. Find the `contentcontract` text record on ENS resolver on chain **chainid**. Return an error if the chain does not have ENS or the record

MOTIVATION:
ERC-4804 defines a `web3://`-scheme RFC 2396 URI to call a smart contract either by its address or a **name** from name service. If a **name** is specified, the standard specifies a way to resolve the contract address from the name.

RATIONALE:
The standard uses `contentcontract` text record with ERC-3770 chain-specific address instead of `contenthash` so that the record is human-readable - a design principle of ERC-4804. Further, we can use the text record to add additional fields such as time to live (TTL).


=== ERC-1577 ===
TITLE: contenthash field for ENS
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-13
REQUIRES: 

SUMMARY:
This EIP introduces the new `contenthash` field for ENS resolvers, allowing for a better defined system of mapping names to network and content addresses. Additionally the `content` and `multihash` fields are deprecated.

SPECIFICATION:
The field `contenthash` is introduced, which permits a wide range of protocols to be supported by ENS names. Resolvers supporting this field MUST return `true` when the `supportsInterface` function is called with argument `0xbc1c58d1`. The fields `content` and `multihash` are deprecated. The value returned by `contenthash` MUST be represented

MOTIVATION:
Multiple applications including [Metamask](https://metamask.io/) and mobile clients such as [Status](https://status.im) have begun resolving ENS names to content hosted on distributed systems such as [IPFS](https://ipfs.io/) and [Swarm](https://swarm-guide.readthedocs.io). Due to the various ways content can be stored and addressed, a standard is required so these applications know how to resolve names


=== ERC-6860 ===
TITLE: Web3 URL to EVM Call Message Translation
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-29
REQUIRES: 137

SUMMARY:
This standard translates an [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) URI like `web3://uniswap.eth/` to an EVM message such as: ``` EVMMessage { To: 0xaabbccddee.... // where uniswap.eth's address registered at ENS Calldata: 0x ... } ``` ⚠️ This proposal updates [ERC-4804](./eip-4804.md) with minor corrections, clarifications and modifications.

SPECIFICATION:
This specification only defines read-only (i.e. Solidity's `view` functions) semantics. State modifying functions may be defined as a future extension. This specification uses the Augmented Backus-Naur Form (ABNF) notation of [RFC 2234](https://www.rfc-editor.org/rfc/rfc2234). The complete URI syntax is listed in Appendix A. A Web3 URL is an ASCII string in

MOTIVATION:
Currently, reading data from Web3 generally relies on a translation done by a Web2 proxy to Web3 blockchain. The translation is mostly done by the proxies such as dApp websites/node service provider/etherscan, which are out of the control of users. The standard here aims to provide a simple way

RATIONALE:
The purpose of the proposal is to add a decentralized presentation layer for Ethereum. With the layer, we are able to render any web content (including HTML/CSS/JPG/PNG/SVG, etc) on-chain using human-readable URLs, and thus EVM can be served as a decentralized backend. The design of the standard is based


=== ERC-7066 ===
TITLE: Lockable Extension for ERC-721
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-05-25
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
An extension of [ERC-721](./eip-721.md), this standard incorporates `locking` features into NFTs, allowing for various uses while preventing sale or transfer. The token's `owner` can `lock` it, setting up locker address (either an EOA or a contract) that exclusively holds the power to unlock the token. Owner can also provide

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Overview [ERC-721](./eip-721.md) compliant contracts MAY implement this EIP to provide standard methods of locking

MOTIVATION:
[ERC-721](./eip-721.md) has sparked an unprecedented surge in demand for NFTs. However, despite this tremendous success, the NFT economy suffers from secondary liquidity where it remains illiquid in owner’s wallet. There are projects which aim to address the liquidity challenge, but they entail the below mentioned inconveniences and risks for

RATIONALE:
This proposal set `locker[tokenId]` to `address(0)` when token is `unlocked` because we delete mapping on `locker[tokenId]` freeing up space. Also, this assertion helps our contract to validate if token is `locked` or `unlocked` for internal function calls. This proposal exposes `transferAndLock(uint256 tokenId, address from, address to, bool setApprove)` which


=== ERC-6823 ===
TITLE: Token Mapping Slot Retrieval Extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-29
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
The aim of this proposal is to enhance the precision of off-chain simulations for transactions that involve contracts complying with the [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), or [ERC-1155](./eip-1155.md) standards. To achieve this, a method is proposed for obtaining the reserved storage slot of the mapping responsible to track ownership of compliant tokens.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The proposal suggests an extension to the ERC-20/ERC-721/ERC-1155 standards that allows retrieving the reserved storage slot

MOTIVATION:
To understand the rationale behind this proposal, it's important to remember how values and mapping are stored in the storage layout. This procedure is language-agnostic; it can be applied to multiple programming languages beyond Solidity, including Vyper. The storage layout is a way to persistently store data in Ethereum

RATIONALE:
The idea behind the implementation was to find an elegant and concise way that avoided any breaking changes with the current standard. Moreover, since gas consumption is crucial, it was inconceivable to find an implementation that would cost gas to the final user. In this case, the addition of


=== ERC-3005 ===
TITLE: Batched meta transactions
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-09-25
REQUIRES: 

SUMMARY:
This EIP defines a new function called `processMetaBatch()` that extends any fungible token standard, and enables batched meta transactions coming from many senders in one on-chain transaction. The function must be able to receive multiple meta transactions data and process it. This means validating the data and the signature,

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. The key words "MUST (BUT WE KNOW YOU WON'T)", "SHOULD CONSIDER", "REALLY SHOULD NOT", "OUGHT TO", "WOULD PROBABLY", "MAY WISH

MOTIVATION:
Meta transactions have proven useful as a solution for Ethereum accounts that don't have any ether, but hold ERC-20 tokens and would like to transfer them (gasless transactions). The current meta transaction relayer implementations only allow relaying one meta transaction at a time. Some also allow batched meta transactions

RATIONALE:
### All-in-one Alternative implementations (like GSN) use multiple smart contracts to enable meta transactions, although this increases gas usage. This implementation (EIP-3005) intentionally keeps everything within one function which reduces complexity and gas cost. The `processMetaBatch()` function thus does the job of receiving a batch of meta transactions, validating


=== ERC-7399 ===
TITLE: ⚡ Flash Loans ⚡
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-25
REQUIRES: 20

SUMMARY:
A flash loan is a loan between lender and borrower smart contracts that must be repaid, plus an optional fee, before the end of the transaction. This ERC specifies interfaces for lenders to accept flash loan requests, and for borrowers to take temporary control of the transaction within the

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Under this standard a flash loan is a loan of an `amount` of an [ERC-20](./eip-20.md)

MOTIVATION:
The current state of the flash loan ecosystem is fragmented and lacks standardization, leading to several challenges for both lenders and borrowers. The absence of a common interface results in increased integration efforts, as each flash loan provider implements its own unique approach. This lack of standardization is expected

RATIONALE:
The interfaces described in this ERC have been chosen as to cover the known flash lending use cases, while allowing for safe and gas efficient implementations. `maxFlashLoan` and `flashFee` return numerical values on impossible loans to allow sorting lenders without having to deal with reverts. `maxFlashLoan` returns a value


=== ERC-1973 ===
TITLE: Scalable Rewards
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-04-01
REQUIRES: 

SUMMARY:
The mintable token rewards interface allows DApps to build a token economy where token rewards are distributed equally among the active participants. The tokens are minted based on per block basis that are configurable (E.g. 10.2356 tokens per block, 0.1 token per block, 1350 tokens per block) and the

SPECIFICATION:
### Definitions `token amount per participant in the ecosytem or TPP (token per participant)`: TPP = (token amount to mint / total active participants) `roundMask`: the cumulative snapshot of TPP over time for the token contract. E.g. transactionOne = 10 tokens are minted with 100 available participants (TPP =

MOTIVATION:
Distributing tokens through a push system to a large amount of participants fails due to block gas limit. As the number of participants in the network grow to tens of thousands, keeping track of the iterable registry of participants and their corresponding rewards in a push system becomes unmanagable.

RATIONALE:
Currently, there is no standard for a scalable reward distribution mechanism. In order to create a sustainable cryptoeconomic environment within DAPPs, incentives play a large role. However, without a scalable way to distribute rewards to tens of thousands of participants, most DAPPs lack a good incentive structure. The ones


=== ERC-7760 ===
TITLE: Minimal Upgradeable Proxies
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-08-19
REQUIRES: 1967

SUMMARY:
This standard defines minimal [ERC-1967](./eip-1967.md) proxies for three patterns: (1) transparent, (2) UUPS, (3) beacon. The proxies support optional immutable arguments which are appended to the end of their runtime bytecode. Additional variants which support onchain implementation querying are provided.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### General specifications All of the following proxies MAY have optional data bytecode appended to

MOTIVATION:
Having standardized minimal bytecode for upgradeable proxies enables the following: 1. Automatic verification on block explorers. 2. Ability for immutable arguments to be queried onchain, as these arguments are stored at the same bytecode offset, 3. Ability for the implementation to be queried and verified onchain. The minimal nature

RATIONALE:
### No usage of `PUSH0` opcode For more widespread EVM compatibility, the proxies deliberately do not use the `PUSH0` opcode proposed in [EIP-3855](./eip-3855.md). Converting the proxies to `PUSH0` variants may be done in a separate future ERC. ### Optimization priorities The proxies are first optimized for minimal runtime gas


=== ERC-1504 ===
TITLE: Upgradable Smart Contract
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-10-17
REQUIRES: 

SUMMARY:
Ethereum smart contracts have suffered a number of security issues in the past few years. The cost of fixing such a bug in smart contract is significant; for example, the consequences of The DAO attack in June 2016 caused tremendous financial loss and the hard fork of Ethereum blockchain.

SPECIFICATION:
The upgradable contract consists of three parts: - **Handler contract** (implements **Handler interface**) defines operations and provides services. This contract can be upgraded; - **Data contract** keeps the resources (data) and is controlled by the Handler contract; - **Upgrader contract (optional)** deals with the voting mechanism and upgrades the

MOTIVATION:
Smart contract is immutable after deployment. If any security risk is identified or program bug is detected, developers always have to destruct the old contract, deploy a new one and potentially migrate the data (hard fork) to the new contract. In some cases, deploying a smart contract with bugs

RATIONALE:
### Data Contract and Handler Contract A smart contract is actually a kind of software, which provides some kind of services. From the perspective of software engineering, a service consists of **resources** that abstract the data and **operations** that abstract the process logic on the data. The requirement of


=== ERC-7627 ===
TITLE: Secure Messaging Protocol
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-02-19
REQUIRES: 

SUMMARY:
This proposal implements the capability to securely exchange encrypted messages on-chain. Users can register their public keys and encryption algorithms by registration and subsequently send encrypted messages to other users using their addresses. The interface also includes enumerations for public key algorithms and a structure for user information to

SPECIFICATION:
### Objectives - Provide a standardized interface for implementing messaging systems in smart contracts, including user registration and message sending functionalities. - Enhance flexibility and scalability for messaging systems by defining enumerations for public key algorithms and a structure for user information. - Define events for tracking message sending

MOTIVATION:
With the emergence of Layer 2 chains featuring sub-second block times and the introduction of account abstraction, the use of end-to-end encrypted communication has facilitated the proliferation of real-time communication and online chat dApps. Providing a unified interface enables easy integration of encrypted communication into smart contracts, thereby fostering

RATIONALE:
### Event Emission for Off-Chain Integration By emitting events when messages are sent or public keys are updated, the implementation facilitates seamless integration with off-chain dApps. This enables these dApps to easily track and display the latest messages and updates, ensuring real-time responsiveness and enhancing user interaction. ### End-to-End


=== ERC-1967 ===
TITLE: Proxy Storage Slots
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2019-04-24
REQUIRES: 

SUMMARY:
Delegating **proxy contracts** are widely used for both upgradeability and gas savings. These proxies rely on a **logic contract** (also known as implementation contract or master copy) that is called using `delegatecall`. This allows proxies to keep a persistent state (storage and balance) while the code is delegated to

SPECIFICATION:
Monitoring of proxies is essential to the security of many applications. It is thus essential to have the ability to track changes to the implementation and admin slots. Unfortunately, tracking changes to storage slots is not easy. Consequently, it is recommended that any function that changes any of these

MOTIVATION:
Delegating proxies are widely in use, as a means to both support upgrades and reduce gas costs of deployments. Examples of these proxies are found in OpenZeppelin Contracts, Gnosis, AragonOS, Melonport, Limechain, WindingTree, Decentraland, and many others. However, the lack of a common interface for obtaining the logic address

RATIONALE:
This EIP standardises the **storage slot** for the logic contract address, instead of a public method on the proxy contract. The rationale for this is that proxies should never expose functions to end users that could potentially clash with those of the logic contract. Note that a clash may


=== ERC-2309 ===
TITLE: ERC-721 Consecutive Transfer Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2019-10-08
REQUIRES: 721

SUMMARY:
The optional ERC-721 Consecutive Transfer Extension provides a standardized event which could be emitted during the creation/transfer of one, or many non-fungible tokens. This standard does not set the expectation of how you might create/transfer many tokens it is only concerned with the event emitted after the creation, or

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. **ERC-721 compliant contracts MAY implement this Consecutive Transfer Extension to provide a standard event to be emitted at the time

MOTIVATION:
This extension provides even more scalibility of the [ERC-721 specification](./eip-721.md). It is possible to create, transfer, and burn 2^256 non-fungible tokens in one transaction. However, it is not possible to emit that many `Transfer` events in one transaction. The `Transfer` event is part of the original specification which states:

RATIONALE:
Standardizing the `ConsecutiveTransfer` event gives decentralized platforms a standard way of determining ownership of large quantities of non-fungible tokens without the need to support a new token standard. There are many ways in which the batch creation and transfer of NFTs can be implemented. The Consecutive Transfer Extension allows


=== ERC-7722 ===
TITLE: Opaque Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-06-09
REQUIRES: 

SUMMARY:
This ERC proposes a specification for an opaque token that enhances privacy by concealing balance information. Privacy is achieved by representing balances as off-chain data encapsulated in hashes, referred to as "baskets". These baskets can be reorganized, transferred, and managed through token functions on-chain.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The concept revolves around representing token balances on-chain as hashed values, called baskets, which obscure

MOTIVATION:
Smart contract accounts serve as well-defined identities that can have reusable claims and attestations attached to them, making them highly useful for various applications. However, this strength also introduces a significant privacy challenge when these identities are used to hold tokens. Specifically, in the case of [ERC-20](./eip-20.html) compatible tokens,

RATIONALE:
### Breaking the ERC-20 Compatibility The transparency inherent in ERC-20 tokens presents a significant issue for reusable blockchain identities. To address this, we prioritize privacy over ERC-20 compatibility, ensuring the confidentiality of token balances. ### Reorg Oracles The trusted oracles and the minimum number of required signatures can be


=== ERC-5298 ===
TITLE: ENS Trust to hold NFTs under ENS name
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-12
REQUIRES: 1, 3, 7, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP standardizes an interface for smart contracts to hold of [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md) tokens on behalf of ENS domains.

SPECIFICATION:
1. Compliant contracts MUST implement `ERC721TokenReceiver`, as defined in [EIP-721](./eip-721.md). 2. Compliant contracts implement the following interface: ```solidity interface IERC_ENS_TRUST is ERC721Receiver, ERC1155Receiver { function claimTo(address to, bytes32 ensNode, address operator, uint256 tokenId) payable external; } ``` 3. `claimTo` MUST check if `msg.sender` is the owner of the ENS

MOTIVATION:
Currently, if someone wants to receive a token, they have to set up a wallet address. This EIP decouples NFT ownership from wallet addresses.

RATIONALE:
1. ENS was chosen because it is a well-established scoped ownership namespace. This is nonetheless compatible with other scoped ownership namespaces. 2. We didn't expose getters or setters for ensRoot because it is outside of the scope of this EIP.


=== ERC-7498 ===
TITLE: NFT Redeemables
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-28
REQUIRES: 1, 6, 5, ,,  , 7, 1, 2, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 1, 2, 7, 1

SUMMARY:
This specification introduces a new interface that extends [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) to enable the discovery and use of onchain and offchain redeemables for NFTs. Onchain getters and events facilitate discovery of redeemable campaigns and their requirements. New onchain mints use an interface that gives context to the minting contract

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The token MUST have the following interface and MUST return `true` for [ERC-165](./eip-165.md) supportsInterface for

MOTIVATION:
Creators frequently use NFTs to create redeemable entitlements for digital and physical goods. However, without a standard interface, it is challenging for users and apps to discover and interact with these NFTs in a predictable and standard way. This standard aims to encompass enabling broad functionality for: - discovery:

RATIONALE:
The "offer" and "consideration" structs from Seaport were used to create a similar language for redeemable campaigns. The "offer" is what is being offered, e.g. a new onchain token, and the "consideration" is what must be satisfied to complete the redemption. The "consideration" field has a "recipient", who the


=== ERC-7754 ===
TITLE: Tamperproof Web Immutable Transaction (TWIT)
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-07-29
REQUIRES: 1193

SUMMARY:
Introduces a new RPC method to be implemented by wallets, `wallet_signedRequest`, that enables dapps to interact with wallets in a tamperproof manner via "signed requests". The dapp associates a public key with its DNS record and uses the corresponding private key to sign payloads sent to the wallet via

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Overview We propose to use the dapp's domain certificate of a root of trust

MOTIVATION:
This standard aims to enhance the end user's experience by granting them confidence that requests from their dapps have not been tampered with. In essence, this is similar to how HTTPS is used in the web. Currently, the communication channel between dapps and wallets is vulnerable to man in

RATIONALE:
The proposed implementation does not modify any of the existing functionalities offered by [EIP-712](./eip-712.md) and [EIP-1193](./eip-1193.md). Its additive nature makes it inherently backward compatible. Its core design is modeled after existing solutions to existing problems (such as DKIM). As a result the proposed specification will be non disruptive, easy


=== ERC-4341 ===
TITLE: Ordered NFT Batch Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-10-01
REQUIRES: 

SUMMARY:
This standard introduces a smart contract interface that can represent a batch of non-fungible tokens of which the ordering information shall be retained and managed. Such information is particularly useful if `tokenId`s are encoded with the sets of `unicodes` for logographic characters and emojis. As a result, NFTs can

SPECIFICATION:
``` pragma solidity ^0.8.0; /** @title EIP-4341 Multi Ordered NFT Standard @dev See https://eips.ethereum.org/EIPS/eip-4341 */ interface ERC4341 /* is ERC165 */ { event Transfer(address indexed from, address indexed to, uint256 id, uint256 amount); event TransferBatch(address indexed from, address indexed to, uint256[] ids, uint256[] amounts); event ApprovalForAll(address indexed owner, address

MOTIVATION:
Non-fungible tokens are widely accepted as carriers of crypto-assets, hence in both [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md), the ordering information of multiple NFTs is discarded. However, as proposed in [EIP-3754](./eip-3754.md), non-fungible tokens are thought of as basic units on a blockchain and can carry abstract meanings with unicoded `tokenId`s. Transferring such

RATIONALE:
In [ERC-1155](./eip-1155.md) and [ERC-721](./eip-721.md), NFTs are used to represent crypto-assets, and in this standard together with [EIP-3754](./eip-3754.md), NFTs are equipped with utilities. In this standard, the ordering information of a batch of NFTs is retained and managed through a construct `phrase`. ### Phrase A `phrase` is usually made of


=== ERC-7738 ===
TITLE: Permissionless Script Registry
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-07-01
REQUIRES: 173

SUMMARY:
This EIP provides a means to create a standard registry for locating executable scripts associated with the token.

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY” and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. The contract MUST implement the `IERC7738` interface. The contract MUST emit the `ScriptUpdate` event when the script is updated. The contract

MOTIVATION:
[ERC-5169](./eip-5169.md) provides a client script lookup method for contracts. This requires the contract to have implemented the [ERC-5169](./eip-5169.md) interface at the time of construction (or allow an upgrade path). This proposal outlines a contract that can supply prototype and certified scripts. The contract would be a multichain singleton instance

RATIONALE:
This method allows contracts written without the [ERC-5169](./eip-5169.md) interface to associate scripts with themselves, and avoids the need for a centralised online server, with subsequent need for security and the requires an organisation to become a gatekeeper for the database.


=== ERC-5725 ===
TITLE: Transferable Vesting NFT
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-08
REQUIRES: 721

SUMMARY:
A **Non-Fungible Token** (NFT) standard used to vest tokens ([ERC-20](./eip-20.md) or otherwise) over a vesting release curve. The following standard allows for the implementation of a standard API for NFT based contracts that hold and represent the vested and locked properties of any underlying token ([ERC-20](./eip-20.md) or otherwise) that

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity ^0.8.0; import "@openzeppelin/contracts/token/ERC721/IERC721.sol"; /** * @title Non-Fungible Vesting Token Standard. * @notice A non-fungible

MOTIVATION:
Vesting contracts, including timelock contracts, lack a standard and unified interface, which results in diverse implementations of such contracts. Standardizing such contracts into a single interface would allow for the creation of an ecosystem of on- and off-chain tooling around these contracts. In addition, liquid vesting in the form

RATIONALE:
### Terms These are base terms used around the specification which function names and definitions are based on. - _vesting_: Tokens which a vesting NFT is vesting until a future date. - _vested_: Total amount of tokens a vesting NFT has vested. - _claimable_: Amount of vested tokens which


=== ERC-7603 ===
TITLE: ERC-1155 Multi-Asset extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-01-25
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
The Multi-Asset Token standard, compatible with [ERC-1155](./eip-1155.md), facilitates the development of a new fundamental component: the context-dependent data output for each collection. The context-dependent data output means that the asset is displayed in an appropriate format based on how the token is accessed. I.e., if the token is being

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ```solidity /// @title ERC-7603 Context-Dependent Multi-Asset Tokens, ERC-1155 Execution /// @dev See https://eips.ethereum.org/EIPS/erc-7603 pragma solidity

MOTIVATION:
With ERC-1155 compatible tokens being a widespread form of tokens in the Ethereum ecosystem and being used for various use cases, it is time to standardize additional utility for them. Having multiple assets associated with a single Token Collection allows for greater utility, usability, and forward compatibility. This EIP

RATIONALE:
TBD <!-- TODO -->


=== ERC-181 ===
TITLE: ENS support for reverse resolution of Ethereum addresses
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2016-12-01
REQUIRES: 


=== ERC-7695 ===
TITLE: Ownership Delegation and Context for ERC-721
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-02
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension for [ERC-721](./eip-721.md), designed to specify users for various contexts with a locking feature and allow temporary ownership delegation without changing the original owner. This EIP preserves the benefits and rights of the owner while expanding the utility of NFTs across various dApps by adding

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Definitions This specification encompasses the following components: **Token Context** provides a specified use case of a token. It serves as

MOTIVATION:
For standard [ERC-721](./eip-721.md) NFTs, there are several use cases in financial applications, including: - Staking NFTs to earn rewards. - Mortgaging an NFT to generate income. - Granting users for different purposes like rental and token delegation—where someone pays to use tokens and pays another party to use the

RATIONALE:
When designing the proposal, we considered the following concerns. ### Multiple contexts for multiple use cases This proposal is centered around Token Context to allow for the creation of distinct contexts tailored to various decentralized applications (dApps). The context controller assumes the role of facilitating (rental or delegation) dApps,


=== ERC-5058 ===
TITLE: Lockable Non-Fungible Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-04-30
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
We propose to extend the [EIP-721](./eip-721.md) standard with a secure locking mechanism. The NFT owners approve the operator to lock the NFT through `setLockApprovalForAll()` or `lockApprove()`. The approved operator locks the NFT through `lock()`. The locked NFTs cannot be transferred until the end of the locking period. An immediate

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Lockable EIP-721 **MUST** implement the `IERC5058` interfaces: ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity ^0.8.8; /** * @dev EIP-721 Non-Fungible Token

MOTIVATION:
NFTs, enabled by [EIP-721](./eip-721.md), have exploded in demand. The total market value and the ecosystem continue to grow with more and more blue chip NFTs, which are approximately equivalent to popular intellectual properties in a conventional sense. Despite the vast success, something is left to be desired. Liquidity has

RATIONALE:
### NFT lock approvals An NFT owner can give another trusted operator the right to lock his NFT through the approve functions. The `lockApprove()` function only approves for the specified NFT, whereas `setLockApprovalForAll()` approves for all NFTs of the collection under the wallet. When a user participates in an


=== ERC-7803 ===
TITLE: EIP-712 Extensions for Account Abstraction
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-08
REQUIRES: 712

SUMMARY:
This ERC improves on [EIP-712] signatures to better support smart contract accounts by 1) introducing signing domains as a way to prevent replay attacks when private keys are shared across accounts, and 2) allowing dapps and wallets to coordinate on the method that will be used to authenticate the

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Requests for typed data signatures via JSON-RPC (`eth_signTypedData`) or client libraries are extended with the

MOTIVATION:
### Signing Domains Standards like [ERC-1271] and [ERC-6492] give smart contract accounts (SCAs) the ability to produce signatures that an application can authenticate without knowledge of the abstract rules of the account. This is an important primitive for applications, as the account owner is able to authorize a third-party

RATIONALE:
<!-- TODO -->


=== ERC-4987 ===
TITLE: Held token interface
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-09-21
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
The proposed standard defines a lightweight interface to expose functional ownership and balances of held tokens. A held token is a token owned by a contract. This standard may be implemented by smart contracts which hold [EIP-20](./eip-20.md), [EIP-721](./eip-721.md), or [EIP-1155](./eip-1155.md) tokens and is intended to be consumed by both

SPECIFICATION:
Smart contracts implementing the `ERC20` held token standard MUST implement all of the functions in the `IERC20Holder` interface. Smart contracts implementing the `ERC20` held token standard MUST also implement `ERC165` and return true when the interface ID `0x74c89d54` is passed. ```solidity /** * @notice the ERC20 holder standard provides

MOTIVATION:
As different areas of crypto (DeFi, NFTs, etc.) converge and composability improves, there will more commonly be a distinction between the actual owner (likely a contract) and the functional owner (likely a user) of a token. Currently, this results in a conflict between mechanisms that require token deposits and

RATIONALE:
This interface is designed to be extremely lightweight and compatible with any existing token contract. Any token holder contract likely already stores all relevant information, so this standard is purely adding a common interface to expose that data. The token address parameter is included to support contracts that can


=== ERC-7818 ===
TITLE: Expirable ERC-20
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2024-11-13
REQUIRES: 20

SUMMARY:
Introduces an extension for [ERC-20](./eip-20.md) tokens, which facilitates the implementation of an expiration mechanism. Through this extension, tokens have a predetermined validity period, after which they become invalid and can no longer be transferred or used. This functionality proves beneficial in scenarios such as time-limited bonds, loyalty rewards, or

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Epoch Mechanism **Epochs** represent a specific period or block range during which certain tokens

MOTIVATION:
This extension facilitates the development of [ERC-20](./eip-20.md) standard compatible tokens featuring expiration dates. This capability broadens the scope of potential applications, particularly those involving time-sensitive assets. Expirable tokens are well-suited for scenarios necessitating temporary validity, including: - Bonds or financial instruments with defined maturity dates - Time-constrained assets within

RATIONALE:
Although the term `epoch` is an abstract concept, it leaves room for various implementations. For example, epochs can support more granular tracking of tokens within each epoch, allowing for greater control over when tokens are valid or expired on-chain. Alternatively, epochs can support bulk expiration, where all tokens within


=== ERC-6682 ===
TITLE: NFT Flashloans
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-12
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 3, 1, 5, 6

SUMMARY:
This standard is an extension of the existing flashloan standard ([ERC-3156](./eip-3156.md)) to support [ERC-721](./eip-721.md) NFT flashloans. It proposes a way for flashloan providers to lend NFTs to contracts, with the condition that the loan is repaid in the same transaction along with some fee.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Contract Interface ```solidity pragma solidity ^0.8.19; interface IERC6682 { /// @dev The address of

MOTIVATION:
The current flashloan standard, [ERC-3156](./eip-3156.md), only supports [ERC-20](./eip-20.md) tokens. ERC-721 tokens are sufficiently different from ERC-20 tokens that they require an extension of this existing standard to support them. An NFT flash loan could be useful in any action where NFT ownership is checked. For example, claiming airdrops, claiming

RATIONALE:
The above modifications are the simplest possible additions to the existing flashloan standard to support NFTs. We choose to extend as much of the existing flashloan standard ([ERC-3156](./eip-3156.md)) as possible instead of creating a wholly new standard because the flashloan standard is already widely adopted and few changes are


=== ERC-7638 ===
TITLE: Batch Calls Encoding in SCA
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-26
REQUIRES: 

SUMMARY:
Batch Calls Encoding (BCE) outlines a solution for Smart Contract Account (SCA) wallets to consolidate multiple calls into a single call, encoding multiple parameters into bytes, compressing on-chain data, and saving gas. It can be used to implement atomic operations as well as non-atomic operations.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. This ERC **REQUIRED** SCA to be implemented in the contract, where the Dapp communicates with

MOTIVATION:
Typically, interactions between users and contracts involve a series of coherent operations, such as `approve`-`transferFrom`. While EOA wallets require users to confirm each operation sequentially, SCA wallets can confirm all operations with a single confirmation, completing all operations within a single call, thus achieving atomicity. If `approve` succeeds but

RATIONALE:
Each call encapsulates 3 parameters: `to`\`value`\`data`. The conventional approach involves packaging these 3 parameters into a struct and then placing multiple structs into an array. However, using a struct adds overhead as it also packages the types of `to`\`value`\`data`, increasing the size of the encoding. Since `to`\`value`\`data` have fixed


=== ERC-838 ===
TITLE: ABI specification for REVERT reason string
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2020-08-20
REQUIRES: 

SUMMARY:
This proposal specifies how to encode potential error conditions in the JSON ABI of a smart contract. A high-level language could then provide a syntax for declaring and throwing these errors. The compiler will encode these errors in the reason parameter of the REVERT opcode in a way that

SPECIFICATION:
To conform to this specification, compilers producing JSON ABIs SHOULD include error declarations alongside functions and events. Each error object MUST contain the keys name (string) and arguments (same types as the function’s inputs list). The value of type MUST be "error". Example: ``` { "type": "error", "name": "InsufficientBalance",

MOTIVATION:
It's important to provide clear feedback to users (and developers) about what went wrong with their Ethereum transactions. The REVERT opcode is a step in the right direction, as it allows smart contract developers to encode a message describing the failure in the reason parameter. There is an implementation

RATIONALE:
Needs discussion. <!-- TODO -->


=== ERC-5143 ===
TITLE: Slippage Protection for Tokenized Vault
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-06-09
REQUIRES: 2, 0, ,,  , 4, 6, 2, 6

SUMMARY:
The following standard extends the [EIP-4626](./eip-4626.md) Tokenized Vault standard with functions dedicated to the safe interaction between EOAs and the vault when price is subject to slippage.

SPECIFICATION:
This ERC is an extension of EIP-4626. Any contract implementing it MUST also implement EIP-4626. ### Methods #### deposit Overloaded version of ERC-4626's `deposit`. Mints `shares` Vault shares to `receiver` by depositing exactly `assets` of underlying tokens. MUST emit the `Deposit` event. MUST support [EIP-20](./eip-20.md) `approve` / `transferFrom` on

MOTIVATION:
[EIP-4626](./eip-4626.md) security considerations section states that: > "If implementors intend to support EOA account access directly, they should consider adding an additional function call for deposit/mint/withdraw/redeem with the means to accommodate slippage loss or unexpected deposit/withdrawal limits, since they have no other means to revert the transaction if the

RATIONALE:
This ERC's functions do not replace ERC-4626 equivalent mechanisms. They are additional (overloaded) methods designed to protect EOAs interacting with the vault. When smart contracts interact with an ERC-4626 vault, they can preview any operation using the dedicated functions before executing the operation. This can be done atomically, with


=== ERC-1175 ===
TITLE: Wallet & shop standard for all tokens (erc20)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-06-21
REQUIRES: 20

SUMMARY:
The mutual trust between the wallet and the shop created by the authenticated contract allows you to pay for and purchase items at a simple process.

SPECIFICATION:
![workflow](../assets/eip-1175/workflow.png)

MOTIVATION:
New standards with improvements have been released, but the majority of tokens currently being developed are erc20 tokens. So I felt I needed a proposal to use old tokens in commerce. To use various erc20 tokens for trading, you need a custom contract. However, a single wallet with a


=== ERC-7746 ===
TITLE: Composable Security Middleware Hooks
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-07-17
REQUIRES: 

SUMMARY:
This EIP proposes a standard interface, `ILayer`, for implementing composable security layers in smart contracts. These layers act as middleware, enabling runtime validation of function calls before and after execution, independent of the protected contract's logic. This approach facilitates modular security, allowing independent providers to manage and upgrade security

SPECIFICATION:
A contract implementing the `ILayer` interface MUST provide two functions: ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity 0.8.20; interface ILayer { /// @notice Validates a function call before execution. /// @param configuration Layer-specific configuration data. /// @param selector The function selector being called. /// @param sender The address initiating the

MOTIVATION:
Current smart contract security practices often rely on monolithic validation logic within the contract itself. This can lead to tightly coupled code, making it difficult to isolate and address security concerns. Better structured architecture is needed, middleware like approach is widely used in the industry, allowing to wrap calls

RATIONALE:
**Flexibility**: The `layerConfig` parameter allows for layer-specific customization, enabling a single layer implementation to serve multiple contracts with varying requirements. **non-static calls**: Layers can maintain their own state, allowing for more complex validation logic (e.g., rate limiting, usage tracking). **Strict Validation**: Reverts on validation failure ensure a fail-safe mechanism,


=== ERC-7634 ===
TITLE: Limited Transfer Count NFT
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-22
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard extends [ERC-721](./eip-721.md) to introduce a mechanism that allows minters to customize the transferability of NFTs through a parameter called `TransferCount`. `TransferCount` sets a limit on how many times an NFT can be transferred. The standard specifies an interface that includes functions for setting and retrieving transfer limits,

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. - `setTransferLimit`: a function establishes the transfer limit for a tokenId. - `transferLimitOf`: a function retrieves the transfer limit for

MOTIVATION:
Once NFTs are sold, they detach from their minters (creators) and can be perpetually transferred thereafter. Yet, many circumstances demand precise control over NFT issuance. We outline their advantages across three dimensions. Firstly, by imposing limitations on the frequency of NFT sales or trades, the worth of rare NFTs

RATIONALE:
### Does tracking the internal transfer count matter? Yes and no. It is optional and quite depends on the actual requirements. The reference implementation given below is a recommended one if you opt for tracking. The `_incrementTransferCount` function and related retrieval functions (`transferLimitOf` and `transferCountOf`) are designed to keep


=== ERC-3589 ===
TITLE: Assemble assets into NFTs
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-05-24
REQUIRES: 721

SUMMARY:
The ERC-1155 multi-token contract defines a way to batch transfer tokens, but those tokens must be minted by the ERC-1155 contract itself. This EIP is an ERC-721 extension with ability to assemble assets such as ether, ERC-20 tokens, ERC-721 tokens and ERC-1155 tokens into one ERC-721 token whose token

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ERC-721 compliant contracts MAY implement this ERC to provide a standard method to assemble assets. `mint` and `safeMint` assemble assets

MOTIVATION:
As NFT arts and collectors rapidly increases, some collectors are not satisfied with traditional trading methods. When two collectors want to swap some of their collections, currently they can list their NFTs on the market and notify the other party to buy, but this is inefficient and gas-intensive. Instead,

RATIONALE:
There are many reasons why people want to pack their NFTs together. For example, a collector want to pack a set of football players into a football team; a collector has hundreds of of NFTs with no categories to manage them; a collector wants to buy a full collection


=== ERC-7673 ===
TITLE: Distinguishable base256emoji Addresses
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-01
REQUIRES: 

SUMMARY:
Introduce base256emoji for use as the primary input and display for account addresses in all user interfaces.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. User interfaces: - SHALL depict account addresses as a base256emoji string instead of hexadecimal. -

MOTIVATION:
Human users often fail to distinguish between long strings of hexadecimal characters, especially when they match at the beginning and at the end. This makes hexadecimal strings a poor format for human-readable account addresses. The problem is being exploited by several spoofing strategies that mine similar addresses and spoof

RATIONALE:
Previous attempts to reduce spoofing and other copy errors such as [ERC-55](./eip-55.md) have not reduced the number of characters in an address. Any base-256 standard would achieve this goal but emoji were chosen to maximize human-distinguishability. Multiple base-256 emoji encodings have been proposed. The base256emoji encoding was chosen due


=== ERC-5218 ===
TITLE: NFT Rights Management
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-11
REQUIRES: 721

SUMMARY:
The following standard defines an API for managing NFT licenses. This standard provides basic functionality to create, transfer, and revoke licenses, and to determine the current licensing state of an NFT. The standard does not define the legal details of the license. Instead, it provides a structured framework for

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. **Every ERC-5218 compliant contract *must* implement the `IERC5218` interface**: ```solidity pragma solidity ^0.8.0; /// @title ERC-5218: NFT Rights Management interface IERC5218

MOTIVATION:
The [ERC-721](./eip-721.md) standard defines an API to track and transfer ownership of an NFT. When an NFT is to represent some off-chain asset, however, we would need some legally effective mechanism to *tether* the on-chain asset (NFT) to the off-chain property. One important case of off-chain property is creative

RATIONALE:
This EIP aims to allow tracing all licenses to an NFT to facilitate right management. The ERC-721 standard only logs the property but not the legal rights tethered to NFTs. Even when logging the license via the optional ERC-721 Metadata extension, sublicenses are not traceable, which doesn't comply with


=== ERC-6662 ===
TITLE: AA Account Metadata For Authentication
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-09
REQUIRES: 4, 3, 3, 7, ,,  , 4, 8, 0, 4

SUMMARY:
This ERC proposes a new **IAccountMetadata** interface as an extension for [ERC-4337](./eip-4337.md) to store authentication data on-chain to support a more user-friendly authentication model.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Authentication Flow ![Authentication Flow](../assets/eip-6662/auth-flow.png) In the new authentication workflow, users use AA compatible smart contract accounts as their wallet

MOTIVATION:
In this proposal, we propose a new **IAccountMetadata** interface as an extension for ERC-4337 **IAccount** interface. With this new interface, users can store authentication data on-chain through one-time publishing, allowing dApps to proactively fetch it from the chain to support a more flexible and user-friendly authentication model. This will

RATIONALE:
To enable the new authentication workflow we described above, dApp needs to know two things: 1. **Where is the authenticator?** This is solved by the **relayURI** field in struct **AuthenticationInfo**. Users can publish the uri as the account metadata which will be pulled by dApp to do service discovery.


=== ERC-6864 ===
TITLE: Upgradable Fungible Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-05
REQUIRES: 20

SUMMARY:
This proposal outlines a smart contract interface for upgrading/downgrading existing [ERC-20](./eip-20.md) smart contracts while maintaining user balances. The interface itself is an extension to the ERC-20 standard so that other smart contracts can continue to interact with the upgraded smart contract without changing anything other than the address.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ```solidity pragma solidity ^0.8.0; /** @title Upgradable Fungible Token @dev See https://eips.ethereum.org/EIPS/eip-6864 */ interface IERC6864

MOTIVATION:
By design, smart contracts are immutable and token standards like ERC-20 are minimalistic. While these design principles are fundamental in decentalized applications, there are sensible and practical situations where the ability to upgrade an ERC-20 token is desirable, such as: - to address bugs and remove limitations - to

RATIONALE:
### Extending ERC-20 standard The goal of this proposal is to upgrade without affecting user balances, therefore leveraging existing data structure and methods is the path of the least engineering efforts as well as the most interoperability. ### Supporting downgrade The ability to downgrade makes moving between multiple IERC-6864


=== ERC-5169 ===
TITLE: Client Script URI for Token Contracts
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-05-03
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 7, 7, 7, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP provides a contract interface adding a `scriptURI()` function for locating executable scripts associated with the token.

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY” and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. We define a scriptURI element using the `string[]`. Based on this, we define the smart contract interface below: ```solidity interface IERC5169

MOTIVATION:
Often, smart contract authors want to provide some user functionality to their tokens through client scripts. The idea is made popular with function-rich NFTs. It's important that a token's contract is linked to its client script, since the client script may carry out trusted tasks such as creating transactions

RATIONALE:
This method avoids the need for building secure and certified centralized hosting and allows scripts to be hosted anywhere: IPFS, GitHub or cloud storage.


=== ERC-5635 ===
TITLE: NFT Licensing Agreements
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-10
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 2, 9, 8, 1

SUMMARY:
This EIP standardizes an NFT licensing oracle to store (register) and retrieve (discover) granted licensing agreements for non-fungible token (NFT) derivative works, which are also NFTs but are created using properties of some other underlying NFTs. In this standard, an NFT derivative work is referred to as a **dNFT**,

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. In general, there are three important roles in this standard: - oNFT: An original underlying NFT. The holder of an

RATIONALE:
Licensing credentials from a dNFT's contract can be retrieved with `authorizedBy`, which specifies the details of a licensing agreement, which may include the oNFT. Those credentials may be verified with a `registry` service. Anyone can retrieve licensing royalty information with `licensingRoyalty` via the registry. While it is not possible


=== ERC-7641 ===
TITLE: Intrinsic RevShare Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-28
REQUIRES: 20

SUMMARY:
This proposal outlines an extension of the prevailing [ERC-20](./eip-20.md) token standard, introducing a seamlessly integrated revenue-sharing mechanism. It incorporates a suite of interfaces designed to foster fair distribution of revenue among token holders while preserving the essential attributes of [ERC-20](./eip-20.md). Central to this design is the establishment of a

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. **Every compliant contract must implement the `IERC7641`, and [ERC-20](./eip-20.md) interfaces.** The Intrinsic RevShare Token standard

MOTIVATION:
### Revenue Sharing for Token Holders This proposal standardized an Intrinsic RevShare (revenue-sharing) model, allowing users to claim rewards periodically to ensure the efficiency of liquidity. This standard can inherently offer a clear path to long-term benefits for holders with revenue sharing, achieving a more sustainable token model by

RATIONALE:
### Revenue Sharing Mechanism We implement a revenue sharing mechanism wherein any token holder can claim a proportional share from the revenue pool. To ensure regular and transparent revenue distribution, we have incorporated the snapshot method, capturing both the token balance and the associated claimable revenue token balance. Periodic


=== ERC-1129 ===
TITLE: Standardised DAPP announcements
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-31
REQUIRES: 

SUMMARY:
The proposed ERC defines format on how to post announcements about the service as well as how to remove them. It also defines mechanics on posting permissions and human friendly interface.

SPECIFICATION:
### Structures #### Announcer Stores information about the announcement maker. The `allowedToPost` stores posting permissions and is used for modifiers limiting announcement posting only to authorised entities. The `name` is used for human friendly identifier of the author to be stored. ``` js struct Announcer{ bool allowedToPost; string name;

MOTIVATION:
Currently there are no guidelines on how to notify the users of the service status in the DAPPs. This is especially obvious in ERC20 and it's derivates. If the service is impeded by any reason it is good practice to have some sort of guidelines on how to announce

RATIONALE:
The proposed solution was designed with UX in mind . It provides mechanics that serve to present the announcements in the user friendly way. It is meant to be deployed as a Solidity smart contract on Ethereum network.


=== ERC-7513 ===
TITLE: Smart NFT - A Component for Intent-Centric
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-06
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
Smart NFT is the fusion of Smart Contract and NFT. An NFT with the logic of a Smart Contract can be executed, enabling on-chain interactions. Transitioning from an NFT to a Smart NFT is akin to going from a regular landline telephone to a smartphone, opening up broader and

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Overview The following section will define the interface specifications for three main objects: Smart-NFT,

MOTIVATION:
Ethereum introduces smart contracts revolutionized the blockchain and paved the way for the flourishing ecosystem of decentralized applications (dApps). Also, the concept of non-fungible tokens (NFTs) was introduced through [ERC-721](./eip-721.md), offering a paradigm for ownership verification. However, smart contracts still present significant barriers for most users, and NFTs have

RATIONALE:
### Why using ERC-1155 In the technical implementation aspect, we chose to use [ERC-1155](./eip-1155.md) as the main contract for NFTs due to the consideration of increasing the reusability of Smart-NFTs. The reason for this choice is that both [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) are based on the concept of "token IDs"


=== ERC-6150 ===
TITLE: Hierarchical NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-12-15
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension to [EIP-721](./eip-721.md). It proposes a multi-layer filesystem-like hierarchical NFTs. This standard provides interfaces to get parent NFT or children NFTs and whether NFT is a leaf node or root node, maintaining the hierarchical relationship among them.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Every compliant contract must implement this proposal, [EIP-721](./eip-721.md) and [EIP-165](./eip-165.md) interfaces. ```solidity pragma solidity ^0.8.0;

MOTIVATION:
This EIP standardizes the interface of filesystem-like hierarchical NFTs and provides a reference implementation. Hierarchy structure is commonly implemented for file systems by operating systems such as Linux Filesystem Hierarchy (FHS). ![Linux Hierarchical File Structure](../assets/eip-6150/linux-hierarchy.png) Websites often use a directory and category hierarchy structure, such as eBay (Home ->

RATIONALE:
As mentioned in the abstract, this EIP's goal is to have a simple interface for supporting Hierarchical NFTs. Here are a few design decisions and why they were made: ### Relationship between NFTs All NFTs will make up a hierarchical relationship tree. Each NFT is a node of the


=== ERC-6944 ===
TITLE: ERC-5219 Resolve Mode
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-27
REQUIRES: 4, 8, 0, 4, ,,  , 5, 2, 1, 9

SUMMARY:
This EIP adds a new [ERC-4804](./eip-4804.md) `resolveMode` to resolve [ERC-5219](./eip-5219.md) contract resource requests.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Contracts wishing to use ERC-5219 as their ERC-4804 resolve mode must implement the following interface:

RATIONALE:
[ERC-165](./eip-165.md) was not used because interoperability can be checked by calling `resolveMode`.


=== ERC-5505 ===
TITLE: EIP-1155 asset backed NFT extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-18
REQUIRES: 1155

SUMMARY:
To propose an extension of smart contract interfaces for asset-backed, fractionalized projects using the [EIP-1155](./eip-1155.md) standard such that total acquisition will become possible. This proposal focuses on physical asset, where total acquisition should be able to happen.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. [EIP-1155](./eip-1155.md) compliant contracts MAY implement this EIP for adding functionalities to support total acquisition. ```solidity //set the percentage required for

MOTIVATION:
Fractionalized, asset backed NFTs face difficulty when someone wants to acquire the whole asset. For example, if someone wants to bring home a fractionalized asset, he needs to buy all NFT pieces so he will become the 100% owner. However he could not do so as it is publicly

RATIONALE:
Native ETH is supported by via Wrapped Ether [EIP-20](./eip-20.md). After forcedSale is set, the remaining NFTs metadata should be updated to reflect the NFTs are at most valued at the previously set TWAP price.


=== ERC-5095 ===
TITLE: Principal Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-05-01
REQUIRES: 2, 0, ,,  , 2, 6, 1, 2

SUMMARY:
Principal tokens represent ownership of an underlying [EIP-20](./eip-20.md) token at a future timestamp. This specification is an extension on the [EIP-20](./eip-20.md) token that provides basic functionality for depositing and withdrawing tokens and reading balances and the [EIP-2612](./eip-2612.md) specification that provides [EIP-712](./eip-712.md) signature based approvals.

SPECIFICATION:
All Principal Tokens (PTs) MUST implement [EIP-20](./eip-20.md) to represent ownership of future underlying redemption. If a PT is to be non-transferrable, it MAY revert on calls to `transfer` or `transferFrom`. The [EIP-20](./eip-20.md) operations `balanceOf`, `transfer`, `totalSupply`, etc. operate on the Principal Token balance. All Principal Tokens MUST implement [EIP-20](./eip-20.md)'s

MOTIVATION:
Principal tokens lack standardization which has led to a difficult to navigate development space and diverse implementation schemes. The primary examples include yield tokenization platforms which strip future yield leaving a principal token behind, as well as fixed-rate money-markets which utilize principal tokens as a medium to lend/borrow. This

RATIONALE:
The Principal Token interface is designed to be optimized for integrators with a core minimal interface alongside optional interfaces to enable backwards compatibility. Details such as accounting and management of underlying are intentionally not specified, as Principal Tokens are expected to be treated as black boxes on-chain and inspected


=== ERC-5630 ===
TITLE: New approach for encryption / decryption
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-09-07
REQUIRES: 

SUMMARY:
This EIP proposes a new way to encrypt and decrypt using Ethereum keys. This EIP uses _only_ the `secp256k1` curve, and proposes two new RPC methods: `eth_getEncryptionPublicKey` and `eth_performECDH`. These two methods, in conjunction, allow users to receive encryptions and perform decryptions (respectively). We require that the wallet _only_

SPECIFICATION:
We describe our approach here; we compare our approach to prior EIPs in the **Rationale** section below. Throughout, we make reference to SEC 1: Elliptic Curve Cryptography, by Daniel R. L. Brown. We use the `secp256k1` curve for both signing and encryption. For encryption, we use ECIES. We specify

MOTIVATION:
We discuss a few motivating examples. One key motivation is direct-to-address encryption on Ethereum. Using our EIP, one can directly send encrypted messages to some desired recipient on-chain, without having a prior direct channel to that recipient. (Note that in this EIP, we standardize _only_ the encryption procedure—that is,

RATIONALE:
There is _no security proof_ for a scheme which simultaneously invokes signing on the `secp256k1` curve and encryption on the `ec25519` curve, and where _the same secret key is moreover used in both cases_. Though no attacks are known, it is not desirable to use a scheme which lacks


=== ERC-1207 ===
TITLE: DAuth Access Delegation Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-07-10
REQUIRES: 

SUMMARY:
The DAuth protocol defines a set of standard API allowing identity delegations between smart contracts without the user's private key. Identity delegations include accessing and operating a user's data and assets contained in the delegated contracts.

SPECIFICATION:
![Rationale](../assets/eip-1207/rationale.png) **Resource owner**: the authorizer **Resource contract**: the contract providing data and operators **API**: the resource contract APIs that the grantee contract can invoke **Client contract**: the grantee contract using authorization to access and operate the data **Grantee request**: the client contract calls the resource contract with the authorizer

MOTIVATION:
The inspiration for designing DAuth comes from OAuth protocol that is extensively used in web applications. But unlike the centralized authorization of OAuth, DAuth works in a distributed manner, thus providing much more reliability and generality.

RATIONALE:
**Current Limitations** The current design of many smart contracts only considers the user invokes the smart contract functions by themselves using the private key. However, in some case, the user wants to delegate other client smart contracts to access and operate their data or assets in the resource smart


=== ERC-7575 ===
TITLE: Multi-Asset ERC-4626 Vaults
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-12-11
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 2, 7, 7, 1, ,,  , 4, 6, 2, 6

SUMMARY:
The following standard adapts [ERC-4626](./eip-4626.md) to support multiple assets or entry points for the same share token. This also enables Vaults which don't have a true share token but rather convert between two arbitrary external tokens. It adds a new `share` method to the Vault, to allow the [ERC-20](./eip-20.md)

SPECIFICATION:
### Definitions: The existing definitions from [ERC-4626](./eip-4626.md) apply. In addition, this spec defines: - Multi-Asset Vaults: A Vault which has multiple assets/entry points. The Multi-Asset Vault refers to the group of [ERC-7575](./eip-7575.md) contracts with the entry points for a specific asset, linked to one common `share` token. - Pipe:

MOTIVATION:
One missing use case that is not supported by [ERC-4626](./eip-4626.md) is Vaults which have multiple assets or entry points such as liquidity provider (LP) Tokens. These are generally unwieldy or non-compliant due to the requirement of ERC-4626 to itself be an [ERC-20](./eip-20.md).

RATIONALE:
This standard is intentionally flexible to support both existing [ERC-4626](./eip-4626.md) Vaults easily by the introduction of a single new method, but also flexible to support new use cases by allowing separate share tokens. ### Ability to externalize [ERC-20](./eip-20.md) Dependency By allowing `share != address(this)`, the Vault can have an


=== ERC-5453 ===
TITLE: Endorsement - Permit for Any Functions
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-08-12
REQUIRES: 1, 6, 5, ,,  , 7, 1, 2, ,,  , 1, 2, 7, 1, ,,  , 5, 7, 5, 0

SUMMARY:
This EIP establish a general protocol for permitting approving function calls in the same transaction rely on [ERC-5750](./eip-5750.md). Unlike a few prior art ([ERC-2612](./eip-2612.md) for [ERC-20](./eip-20.md), `ERC-4494` for [ERC-721](./eip-721.md) that usually only permit for a single behavior (`transfer` for ERC-20 and `safeTransferFrom` for ERC-721) and a single approver in

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Interfaces The interfaces and structure referenced here are as followed ```solidity pragma solidity ^0.8.9;

MOTIVATION:
1. Support permit(approval) alongside a function call. 2. Support a second approval from another user. 3. Support pay-for-by another user 4. Support multi-sig 5. Support persons acting in concert by endorsements 6. Support accumulated voting 7. Support off-line signatures

RATIONALE:
1. We chose to have both `ERC5453_TYPE_A`(single-endorsement) and `ERC5453_TYPE_B`(multiple-endorsements, same nonce for entire contract) so we could balance a wider range of use cases. E.g. the same use cases of ERC-2612 and `ERC-4494` can be supported by `ERC5453_TYPE_A`. And threshold approvals can be done via `ERC5453_TYPE_B`. More complicated approval


=== ERC-4546 ===
TITLE: Wrapped Deposits
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-12-11
REQUIRES: 

SUMMARY:
The wrapped deposit contract handles deposits of assets (Ether, [ERC-20](./eip-20.md), [ERC-721](./eip-721.md)) on behalf of a user. A user must only approve a spend limit once and then an asset may be deposited to any number of different applications that support deposits from the contract.

SPECIFICATION:
The wrapped deposit contract SHOULD be deployed at an identifiable address (e.g. `0x1111119a9e30bceadf9f939390293ffacef93fe9`). The contract MUST be non-upgradable with no ability for state variables to be changed. The wrapped deposit contract MUST have the following public functions: ```js depositERC20(address to, address token, uint amount) external; depositERC721(address to, address token,

MOTIVATION:
The current user flow for depositing assets in dapps is unnecessarily expensive and insecure. To deposit an ERC-20 asset a user must either: - send an approve transaction for the exact amount being sent, before making a deposit, and then repeat this process for every subsequent deposit. - send

RATIONALE:
Having a single contract that processes all token transfers allows users to submit a single approval per token to deposit to any number of contracts. The user does not have to trust receiving contracts with token spend approvals and receiving contracts have their complexity reduced by not having to


=== ERC-1202 ===
TITLE: Voting Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2018-07-08
REQUIRES: 5269

SUMMARY:
This EIP is an API for implementing voting with smart contract. This standard provides functionalities to voting as well as to view the vote result and set voting status.

SPECIFICATION:
1. Compliant contracts MUST implement the `IERC1202Core` below ```solidity interface IERC1202Core { event VoteCast( address indexed voter, uint256 indexed proposalId, uint8 support, uint256 weight, string reason, bytes extraParams ); function castVote( uint256 proposalId, uint8 support, uint256 weight, string calldata reasonUri, bytes calldata extraParams ) external payable returns; function castVoteFrom(

MOTIVATION:
Voting is one of the earliest example of EVM programming, and also a key to DAO/organizational governance process. We foresee many DAOs will ultimately need to leverage voting as one of the important part of their governance. By creating a voting standard for smart contract / token, we can

RATIONALE:
We made the following design decisions and here are the rationales. ### Granularity and Anonymity We created a `view` function `ballotOf` primarily making it easier for people to check the vote from certain address. This has the following assumptions: - It's possible to check someone's vote directly given an


=== ERC-6604 ===
TITLE: Abstract Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-03
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
Abstract tokens provide a standard interface to: * Mint tokens off-chain as messages * Reify tokens on-chain via smart contract * Dereify tokens back into messages Abstract tokens can comply with existing standards like [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), and [ERC-1155](./eip-1155.md). The standard allows wallets and other applications to better handle *potential*

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Data Types #### Token Messages A token message defines one or more tokens along

MOTIVATION:
Abstract tokens enable zero-cost token minting, facilitating high-volume applications by allowing token holders to reify tokens (place the tokens on-chain) as desired. Example use cases: * airdrops * POAPs / receipts * identity / access credentials Merkle trees are often used for large token distributions to spread mint/claim costs

RATIONALE:
### Meta format The abstract token message `meta` field is simply a byte array to preserve the widest possible accesibility. * Applications handling abstract tokens can interact with the implementation contract for token metadata rather than parsing this field, so legibility is of secondary importance * A byte array


=== ERC-2098 ===
TITLE: Compact Signature Representation
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2019-03-14
REQUIRES: 2

SUMMARY:
The secp256k1 curve permits the computation of the public key of signed digest when coupled with a signature, which is used implicitly to establish the origin of a transaction from an Externally Owned Account as well as on-chain in EVM contracts for example, in meta-transactions and multi-sig contracts. Currently

SPECIFICATION:
A secp256k1 signature is made up of 3 parameters, `r`, `s` and `yParity`. The `r` represents the `x` component on the curve (from which the `y` can be computed), and the `s` represents the challenge solution for signing by a private key. Due to the symmetric nature of an

MOTIVATION:
The motivations for a compact representation are to simplify handling transactions in client code, reduce gas costs and reduce transaction sizes.

RATIONALE:
The compact representation proposed is simple to both compose and decompose in clients and in Solidity, so that it can be easily (and intuitively) supported, while reducing transaction sizes and gas costs.


=== ERC-4955 ===
TITLE: Vendor Metadata Extension for NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-03-29
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP standardizes a schema for NFTs metadata to add new field namespaces to the JSON schema for [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md) NFTs.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### Schema (subject to "caveats" below) A new property called `namespaces` is introduced. This property expects one object per project

MOTIVATION:
A standardized NFT metadata schema allows wallets, marketplaces, metaverses, and similar applications to interoperate with any NFT. Applications such as NFT marketplaces and metaverses could usefully leverage NFTs by rendering them using custom 3D representations or any other new attributes. Some projects like Decentraland, TheSandbox, Cryptoavatars, etc. need their

RATIONALE:
There are many projects which need custom properties in order to display a current NFT. Each project may have its own way to render the NFTs and therefore they need different values. An example of this is the metaverses like Decentraland or TheSandbox where they need different 3d models


=== ERC-2917 ===
TITLE: Staking Reward Calculation
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-08-28
REQUIRES: 

SUMMARY:
Based on the product of effective collateral and time, ERC2917 calculates the reward a user can get at any time, and realize the real decentralized DeFi. Here below is the formula for the calculation of reward for a user U: ![concept image](../assets/eip-2917/erc-reward-formula.png "erc-reward-formula") where ∆p<sub>i</sub> denotes individual productivity of

SPECIFICATION:
Every ERC-2917 compliant contract must implement the ERC2917 and ERC20 interfaces (if necessary): ```solidity interface IERC2917 is IERC20 { /// @dev This emit when interests amount per block is changed by the owner of the contract. /// It emits with the old interests amount and the new interests amount.

MOTIVATION:
One of the main drawbacks of many DeFi projects is the reward distribution mechanism within the smart contract. In fact, there are two main mechanisms are adopted so far. 1. Distribution of rewards is only given when all users exit the contract 2. The project collects on-chain data, conducts

RATIONALE:
TBD


=== ERC-1616 ===
TITLE: Attribute Registry Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-23
REQUIRES: 165

SUMMARY:
This EIP contains the following core ideas: 1. Instead of relying directly on the reputation of a claims issuer to assess the veracity of a given claim, trust can be brought up to the level of a registry curator. This registry which we call an "**Attribute Registry**" allows for

SPECIFICATION:
The Attribute Registry interface contains four functions, outlined as follows: ```solidity /** * @title EIP-1616 Attribute Registry Standard interface. EIP-165 ID: 0x5f46473f */ interface AttributeRegistryInterface { function hasAttribute(address account, uint256 attributeTypeID) external view returns (bool); function getAttributeValue(address account, uint256 attributeTypeID) external view returns (uint256); function countAttributeTypes() external view returns

MOTIVATION:
This EIP is motivated by the need for contracts and external accounts to be able to verify information about a given address from a single trusted source **without concerning themselves with the particular details of how the information was obtained**, and to do so in as simple a manner

RATIONALE:
This standard extends the applicability of metadata assignment to those use cases that are not adequately represented by EIP-735, EIP-780, or similar proposals. Namely, it enforces the constraint of one attribute value per attribute ID per address, as opposed to one value per ID per address *per issuer*. Aside


=== ERC-7093 ===
TITLE: Social Recovery Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-05-29
REQUIRES: 1271

SUMMARY:
This ERC proposes a standard interface for social recovery of smart contract accounts. It separates identity and policy verification from the recovery process, allowing more ways to authenticate (known as Guardians) than just on-chain accounts. It also lets users customize recovery policies without changing the account’s smart contract.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. This EIP consists of four key concepts: - **Identity**: This denotes the representation of a

MOTIVATION:
Vitalik Buterin has long advocated for social recovery as an essential tool for user protection within the crypto space. He posits that the value of this system rests in its ability to offer users, especially those less acquainted with the technicalities of cryptography, a robust safety net when access

RATIONALE:
A primary design rationale for this proposal is to extend a greater diversity of Guardian types and more flexible, customizable recovery policies for a RecoveryAccount. This is achieved by separating the verification logic from the social recovery process, ensuring that the basic logic of the account contract remains unaltered.


=== ERC-7726 ===
TITLE: Common Quote Oracle
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-06-20
REQUIRES: 7528

SUMMARY:
The following allows for the implementation of a standard API for data feeds providing the relative value of assets, forcing compliant contracts to use explicit token amounts instead of price factors. This approach has been shown to lead to better security and time-to-market outcomes.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Definitions - base asset: The asset that the user needs to know the value

MOTIVATION:
The information required to value assets is scattered over a number of major and minor sources, each one with their own integration API and security considerations. Many protocols over the years have implemented oracle adapter layers for their own use to abstract this complexity away from their core implementations,

RATIONALE:
The use of `getQuote` doesn't require the consumer to be aware of any decimal partitions that might have been defined for the `base` or `quote` and should be preferred in most data processing cases. The spec doesn't include a `getPrice` function because it is rarely needed on-chain, and it


=== ERC-5437 ===
TITLE: Security Contact Interface
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-09
REQUIRES: 165

SUMMARY:
An interface for security notice using asymmetric encryption. The interface exposes a asymmetric encryption key and a destination of delivery.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity interface IEIP5437 { /// REQUIRED function getSecurityContact(uint8 type, bytes memory data) public view returns ( uint8 type, bytes memory

MOTIVATION:
Currently there is no consistent way to specify an official channel for security researchers to report security issues to smart contract maintainers.

RATIONALE:
1. For simplicity, this EIP specifies a simple GPG scheme with a given encryption scheme and uses email addresses as a contact method. It's possible that future EIPs will specify new encryption schemes or delivery methods. 2. This EIP adds an optional method, `setSecurityContact`, to set the security contact,


=== ERC-7432 ===
TITLE: Non-Fungible Token Roles
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-07-14
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard introduces role management for NFTs. Each role assignment is associated with a single NFT and expires automatically at a given timestamp. Roles are defined as `bytes32` and feature a custom `data` field of arbitrary size to allow customization.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC-2119 and RFC-8174. Compliant contracts MUST implement the following interface: ```solidity /// @title ERC-7432 Non-Fungible Token Roles /// @dev See https://eips.ethereum.org/EIPS/eip-7432

MOTIVATION:
The NFT Roles interface aims to establish a standard for role management in NFTs. Tracking on-chain roles enables decentralized applications (dApps) to implement access control for privileged actions, e.g., minting tokens with a role (airdrop claim rights). NFT roles can be deeply integrated with dApps to create a utility-sharing

RATIONALE:
[ERC-7432](./eip-7432.md) IS NOT an extension of [ERC-721](./eip-721.md). The main reason behind this decision is to enable it to be implemented externally or on the same contract as the NFT, allowing dApps to implement roles with immutable assets. This standard covers many crucial features, such as automatic expiration and custom


=== ERC-2400 ===
TITLE: Transaction Receipt URI
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-11-05
REQUIRES: 1, 5, 5, ,,  , 6, 8, 1

SUMMARY:
A transaction hash is not very meaningful on its own, because it looks just like any other hash, and it might lack important information for reading a transaction. This standard includes all needed information for displaying a transaction and its details, such as `chainId`, `method` signature called, and `events`

SPECIFICATION:
### Syntax Transaction receipt URLs contain "ethereum" in their schema (protocol) part and are constructed as follows: receipt = schema_part transaction_hash [ "@" chain_id ] [ "?" parameters ] schema_part = "ethereum:tx-" transaction_hash = "0x" 64*HEXDIG chain_id = 1*DIGIT parameters = parameter *( "&" parameter ) parameter = key

MOTIVATION:
Interoperability between ethereum clients, allowing different systems to agree on a standard way of representing submitted transactions hashes, optionally with necessary information for decoding transaction details. ### Use-cases Transaction Receipt URIs embedded in QR-codes, hyperlinks in web-pages, emails or chat messages provide for robust cross-application signaling between very loosely

RATIONALE:
The goal of this standard envolves only the transport of submitted transactions, and therefore transaction data must be loaded from blockchain or pending transaction queue, which also serves as a validation of the transaction existence. Transaction hash not found is normal in fresh transactions, but can also mean that


=== ERC-7631 ===
TITLE: Dual Nature Token Pair
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-02-21
REQUIRES: 2, 0, ,,  , 7, 2, 1

SUMMARY:
A fungible [ERC-20](./eip-20.md) token contract and non-fungible [ERC-721](./eip-721.md) token contract can be interlinked, allowing actions performed on one contract to be reflected on the other. This proposal defines how the relationship between the two token contracts can be queried. It also enables accounts to configure whether ERC-721 mints and

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Overview A dual nature token pair comprises of an ERC-20 contract and an ERC-721

MOTIVATION:
The ERC-20 fungible and ERC-721 non-fungible token standards offer sufficient flexibility for a co-joined, dual nature token pair. Transfers on the ERC-20 token can automatically trigger transfers on the ERC-721 token, and vice-versa. This enables applications such as native ERC-721 fractionalization, wherein acquiring ERC-20 tokens leads to the automatic

RATIONALE:
### Implementation Detection The `mirrorERC721` and `baseERC20` methods returning non-zero addresses signal that the ERC-20 and ERC-721 contracts implement the required interfaces respectively. As such, [ERC-165](./eip-165.md) is not required. The `getSkipNFT` and `setSkipNFT` methods MAY revert. As contracts compiled with Solidity or Vyper inherently revert on calls to undefined


=== ERC-5560 ===
TITLE: Redeemable NFTs
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-30
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The EIP is a Redeemable NFT extension which adds a `redeem` function to [EIP-721](./eip-721.md). It can be implemented when an NFT issuer wants his/her NFT to be redeemed for a physical object.

SPECIFICATION:
_The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119._ `EIP-721` compliant contracts MAY implement this EIP to provide a standard method of receiving information on redeemability. The NFT issuer

MOTIVATION:
An increasing amount of NFT issuers such as artists, fine art galeries, auction houses, brands and others want to offer a physical object to the holder of a given NFT. This standard allows EIP-721 NFTs to signal reedemability.

RATIONALE:
When the NFT contract is deployed, the `isRedeemable()` function returns `true` by default. By default, the `redeem()` function visibility is public, so anyone can trigger it. It is **RECOMMENDED** to add a `require` to restrict the access: ```solidity require(ownerOf(tokenId) == msg.sender, "ERC721Redeemable: You are not the owner of this


=== ERC-5005 ===
TITLE: Zodiac Modular Accounts
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-04-14
REQUIRES: 165

SUMMARY:
This EIP standardizes interfaces for composable and interoperable tooling for programmable Ethereum accounts. These interfaces separate contract accounts ("avatars") from their authentication and execution logic ("guards" and "modules"). Avatars implement the `IAvatar` interface, and guards implement the `IGuard` interface. Modules may take any form.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. This EIP consists of four key concepts: - **Avatars** are programmable Ethereum accounts. Avatars are the address that holds balances,

MOTIVATION:
Currently, most programmable accounts (like DAO tools and frameworks) are built as monolithic systems where the authorization and execution logic are coupled, either within the same contract or in a tightly integrated system of contracts. This needlessly inhibits the flexibility of these tools and encourages platform lock-in via high

RATIONALE:
The interface defined in this standard is designed to be mostly compatible with most popular programmable accounts in use right now, to minimize the need for changes to existing tooling.


=== ERC-1066 ===
TITLE: Status Codes
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-05
REQUIRES: 

SUMMARY:
This standard outlines a common set of status codes in a similar vein to HTTP statuses. This provides a shared set of signals to allow smart contracts to react to situations autonomously, expose localized error messages to users, and so on. The current state of the art is to

SPECIFICATION:
### Format Codes are returned either on their own, or as the first value of a multiple return. ```solidity // Status only function isInt(uint num) public pure returns (byte status) { return hex"01"; } // Status and value uint8 private counter; function safeIncrement(uint8 interval) public returns (byte status, uint8

MOTIVATION:
### Semantic Density HTTP status codes are widely used for this purpose. BEAM languages use atoms and tagged tuples to signify much the same information. Both provide a lot of information both to the programmer (debugging for instance), and to the program that needs to decide what to do

RATIONALE:
### Encoding Status codes are encoded as a `byte`. Hex values break nicely into high and low nibbles: `category` and `reason`. For instance, `0x01` stands for general success (ie: `true`) and `0x00` for general failure (ie: `false`). As a general approach, all even numbers are blocking conditions (where the


=== ERC-7566 ===
TITLE: Multiplayer Game Communication
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-11-28
REQUIRES: 

SUMMARY:
This proposal introduces a multiplayer game communication (MGC) interface, using `room` to match and group players, and using `message` to process actions between players. This allows one smart contract to handle multiple players playing games on the chain, preventing centralized servers from affecting the fairness of the game.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The principle of Multiplayer Game Communication is to use the same game logic to change

RATIONALE:
### Why are multiplayer onchain games room-based? Because the rooms are independent, each player will be assigned a new ID when entering a room. A new game round can be a room, a game task can be a room, and a game activity can be a room. ### The


=== ERC-6224 ===
TITLE: Contracts Dependencies Registry
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-12-27
REQUIRES: 1, 9, 6, 7, ,,  , 5, 7, 5, 0

SUMMARY:
This EIP introduces an on-chain registry system that a decentralized protocol may use to manage its smart contracts. The proposed system consists of two components: `ContractsRegistry` and `Dependant`. The `ContractsRegistry` contract stores references to every smart contract used within a protocol, optionally making them upgradeable by deploying self-managed proxies

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Overview The system consists of two smart contracts: - `ContractsRegistry` that is a singleton

MOTIVATION:
In the ever-growing Ethereum ecosystem, projects tend to become more and more complex. Modern protocols require portability and agility to satisfy customer needs by continuously delivering new features and staying on pace with the industry. However, the requirement is hard to achieve due to the immutable nature of blockchains

RATIONALE:
There are a few design decisions that have to be explicitly specified: ### ContractsRegistry Rationale #### Contracts Identifier The `string` contracts identifier is chosen over the `uint256` and `bytes32` to maintain code readability and reduce the human error chances when interacting with the `ContractsRegistry`. Being the topmost smart contract


=== ERC-7595 ===
TITLE: Collateralized NFT
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-13
REQUIRES: 2, 0, ,,  , 7, 2, 1

SUMMARY:
This proposal recommends an extension of [ERC-721](./eip-721.md) to allow for collateralization using a list of [ERC-20](./eip-20.md) based tokens. The proprietor of this ERC collection could hold both the native coin and [ERC-20](./eip-20.md) based tokens, with the `ownerOf` tokenId being able to unlock the associated portion of the underlying [ERC-20](./eip-20.md)

SPECIFICATION:
### ERC standard for new NFT collections ```solidity interface IERC721Envious is IERC721 { event Collateralized(uint256 indexed tokenId, uint256 amount, address tokenAddress); event Uncollateralized(uint256 indexed tokenId, uint256 amount, address tokenAddress); event Dispersed(address indexed tokenAddress, uint256 amount); event Harvested(address indexed tokenAddress, uint256 amount, uint256 scaledAmount); /** * @dev An array with

MOTIVATION:
The emerging trend of NFT finance focuses on the NFT floor price to enable the market value of the NFT serve as a collateral in lending protocols. The NFT floor price is susceptible to the supply-demand dynamics of the NFT market, characterized by higher volatility compared to the broader

RATIONALE:
### “Envious” Term Choice We propose adopting the term "Envious" to describe any NFT collection minted using this ERC standard or any [ERC-721](./eip-721.md) based NFT collection that utilized the EnviousHouse abstraction layer. ### NFT Collateralization with Multiple Tokens Some Web3 projects primarily collateralize a specific NFT asset with one


=== ERC-6358 ===
TITLE: Cross-Chain Token States Synchronization
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-01-17
REQUIRES: 

SUMMARY:
This ERC standardizes an interface for contract-layer consensus-agnostic verifiable cross-chain bridging, through which we can define a new global token inherited from [ERC-20](./eip-20.md)/[ERC-721](./eip-721.md) over multi-chains. ### Figure.1 Architecture ![img](../assets/eip-6358/img/o-dlt.png) With this ERC, we can create a global token protocol, that leverages smart contracts or similar mechanisms on existing blockchains

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Omniverse Account There SHOULD be a global user identifier of this ERC, which is

MOTIVATION:
- The current paradigm of token bridges makes assets fragment. - If ETH was transferred to another chain through the current token bridge, if the chain broke down, ETH will be lost for users. The core of this ERC is synchronization instead of transferring, even if all the other

RATIONALE:
### Architecture As shown in [Figure.1](#figure1-architecture), smart contracts deployed on multi-chains execute `o-transactions` of ERC-6358 tokens synchronously through the trustless off-chain synchronizers. - The ERC-6358 smart contracts are referred to as **Abstract Nodes**. The states recorded by the Abstract Nodes that are deployed on different blockchains respectively could be


=== ERC-5485 ===
TITLE: Legitimacy, Jurisdiction and Sovereignty
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-08-17
REQUIRES: 1, 6, 5, ,,  , 5, 2, 4, 7

SUMMARY:
Provide a way for compliant smart contracts to declare their legitimacy lineage, jurisdiction they observe, and sovereignty if they choose to not fall onto any jurisdiction.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. 1. Compliant contract MUSTS implement the following interface. ```solidity interface IERC5485 { /// A function that returns the source of

MOTIVATION:
Today, smart contracts have no standard way to specify their legitimacy lineage, jurisdiction, or sovereignty relationship. The introduction of such a standard, supports better integration with today's legal and regulative scenarios: 1. it supports a regulative body to allow or deny interoperability with smart contracts. 2. it also allows

RATIONALE:
Needs discussion.


=== ERC-2569 ===
TITLE: Saving and Displaying Image Onchain for Universal Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-03-28
REQUIRES: 

SUMMARY:
This set of interfaces allow a smart contract to save an SVG image in Ethereum and to retrieve an SVG image from Ethereum for fungible tokens, non-fungible tokens and tokens based on standards that will be developed in the future. The interface set has two interfaces: one to save

SPECIFICATION:
An EIP-2569 compatible contract MUST have a method with the signature getTokenImageSvg(uint256) view returns (string memory) and a method with the signature setTokenImageSvg(uint256 tokenId, string memory imagesvg) internal. These methods define how a smart contract saves an image for a universal token in Ethereum which keeps the image permanent

MOTIVATION:
The ERC-721 token standard is a popular standard to define a non-fungible token in Ethereum. This standard is widely used to specify a crypto gift, crypto medal, crypto collectible etc. The most famous use case is the [cryptokitty](https://www.cryptokitties.co/). In most of these applications an image is attached to an

RATIONALE:
After Bitcoin was created people have found ways to keep information permanent and tamper-resistant by encoding text messages they want to preserve permanently and tamper-resistantly in blockchain transactions. However existing applications only do this for text information and there are no solutions to keep an image permanent and tamper-resistant.


=== ERC-7085 ===
TITLE: NFT Relationship Enhancement
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-05-02
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This proposal builds on [ERC-1155](./eip-1155.md) and creates a standard for referring relationships and quantifiable attributes between non-isolated [ERC-721](./eip-721.md) or [ERC-1155](./eip-1155.md) non-fungible tokens (NFTs). It enables users to build a graph of NFTs and set quantifiable attributes for each NFT, facilitating more complex NFT ecosystems. While a similar proposal exists

SPECIFICATION:
This EIP proposes the addition of five new functions to the [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) standards: `setRelationship`, `setAttribute`, `getRelationship`, `getAttribute`, and `getAttributeNames`. These functions allow users to establish referring relationships and set quantifiable attributes between NFTs. ### `setRelationship` The `setRelationship` function establishes a referring relationship between two NFTs. It takes

MOTIVATION:
The current standard for NFTs lacks the ability to establish relationships and attributes between tokens. This limitation makes it difficult for users to build more complex NFT ecosystems that require referring relationships and quantifiable attributes between tokens. For example, a user may create a derivative NFT that refers to

RATIONALE:
In developing this EIP, some key design decisions were made. For example, we limited the complexity of the relationship graph that can be created by only allowing for one referring relationship between two NFTs. This helps to ensure that the graph remains manageable and does not become too complex


=== ERC-600 ===
TITLE: Ethereum purpose allocation for Deterministic Wallets
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2017-04-13
REQUIRES: 

SUMMARY:
This EIP defines a logical hierarchy for deterministic wallets based on [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki), the purpose scheme defined in [BIP43](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki) and [this proposed change to BIP43](https://github.com/bitcoin/bips/pull/523). This EIP is a particular application of BIP43.

SPECIFICATION:
We define the following 2 levels in BIP32 path: <pre> m / purpose' / subpurpose' / EIP' </pre> Apostrophe in the path indicates that BIP32 hardened derivation is used. Each level has a special meaning, described in the chapters below. ### Purpose Purpose is set to 43, as documented

MOTIVATION:
Because Ethereum is based on account balances rather than UTXO, the hierarchy defined by BIP44 is poorly suited. As a result, several competing derivation path strategies have sprung up for deterministic wallets, resulting in inter-client incompatibility. This BIP seeks to provide a path to standardise this in a fashion

RATIONALE:
The existing convention is to use the 'Ethereum' coin type, leading to paths starting with `m/44'/60'/*`. Because this still assumes a UTXO-based coin, we contend that this is a poor fit, resulting in standardisation, usability, and security compromises. As a result, we are making the above proposal to define


=== ERC-3643 ===
TITLE: T-REX - Token for Regulated EXchanges
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2021-07-09
REQUIRES: 2, 0, ,,  , 1, 7, 3

SUMMARY:
The T-REX token is an institutional grade security token standard. This standard provides a library of interfaces for the management and compliant transfer of security tokens, using an automated onchain validator system leveraging onchain identities for eligibility checks. The standard defines several interfaces that are described hereunder: - Token

SPECIFICATION:
The proposed standard has the following requirements: - **MUST** be [ERC-20](./eip-20.md) compatible. - **MUST** be used in combination with an onchain Identity system - **MUST** be able to apply any rule of compliance that is required by the regulator or by the token issuer (about the factors of eligibility

MOTIVATION:
The advent of blockchain technology has brought about a new era of efficiency, accessibility, and liquidity in the world of asset transfer. This is particularly evident in the realm of cryptocurrencies, where users can transfer token ownership peer-to-peer without intermediaries. However, when it comes to tokenized securities or security

RATIONALE:
### Transfer Restrictions Transfers of securities can fail for a variety of reasons. This is in direct contrast to utility tokens, which generally only require the sender to have a sufficient balance. These conditions can be related to the status of an investor’s wallet, the identity of the sender


=== ERC-5289 ===
TITLE: Ethereum Notary Interface
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-07-16
REQUIRES: 1, 6, 5, ,,  , 5, 5, 6, 8

SUMMARY:
Currently, the real-world applications of smart contracts are limited by the fact that they aren't legally binding. This EIP proposes a standard that allows smart contracts to be legally binding by providing IPFS links to legal documents and ensuring that the users of the smart contract have privity with

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Legal Contract Library Interface ```solidity /// SPDX-License-Identifier: CC0-1.0 pragma solidity ^0.8.0; import "./IERC165.sol"; interface IERC5289Library is IERC165 { ///

MOTIVATION:
NFTs have oftentimes been branded as a way to hold and prove copyright of a specific work. However, this, in practice, has almost never been the case. Most of the time, NFTs have no legally-binding meaning, and in the rare cases that do, the NFT simply provides a limited

RATIONALE:
- `uint64` was chosen for the timestamp return type as 64-bit time registers are standard. - `uint16` was chosen for the document ID as 65536 documents are likely sufficient for any use case, and the contract can always be re-deployed. - `signDocument` doesn't take an ECDSA signature for future


=== ERC-6981 ===
TITLE: Reserved Ownership Accounts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-25
REQUIRES: 1, 1, 6, 7, ,,  , 1, 2, 7, 1, ,,  , 6, 4, 9, 2

SUMMARY:
The following specifies a system for services to link their users to a claimable Ethereum address. Services can provide a signed message and unique salt to their users which can be used to deploy a smart contract wallet to the deterministic address through a registry contract using the `create2`

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Overview The system for creating reserved ownership accounts consists of: 1. An Account Registry

MOTIVATION:
It is common for web services to allow their users to hold on-chain assets via custodial wallets. These wallets are typically EOAs, deployed smart contract wallets or omnibus contracts, with private keys or asset ownership information stored on a traditional database. This proposal outlines a solution that avoids the

RATIONALE:
### Service-Owned Registry Instances While it might seem more user-friendly to implement and deploy a universal registry for reserved ownership accounts, we believe that it is important for external service providers to have the option to own and control their own Account Registry. This provides the flexibility of implementing


=== ERC-7401 ===
TITLE: Parent-Governed Non-Fungible Tokens Nesting
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-07-26
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
❗️ **[ERC-7401](./eip-7401.md) supersedes [ERC-6059](./eip-6059.md).** ❗️ The Parent-Governed NFT Nesting standard extends [ERC-721](./eip-721.md) by allowing for a new inter-NFT relationship and interaction. At its core, the idea behind the proposal is simple: the owner of an NFT does not have to be an Externally Owned Account (EOA) or a smart

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity /// @title EIP-7401 Parent-Governed Nestable Non-Fungible Tokens /// @dev See https://eips.ethereum.org/EIPS/eip-7401 /// @dev Note: the ERC-165 identifier for this

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time to standardize additional utility for them. Having the ability for tokens to own other tokens allows for greater utility, usability and forward compatibility. In the

RATIONALE:
Designing the proposal, we considered the following questions: 1. **How to name the proposal?**\ In an effort to provide as much information about the proposal we identified the most important aspect of the proposal; the parent centered control over nesting. The child token's role is only to be able


=== ERC-5219 ===
TITLE: Contract Resource Requests
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-07-10
REQUIRES: 

SUMMARY:
This EIP standardizes an interface to make resource requests to smart contracts and to receive HTTP-like responses.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### Name Resolution EIPs that propose a name resolution mechanism MAY reference this EIP and MAY recommend that clients support

MOTIVATION:
Ethereum is the most-established blockchain for building decentralized applications (referred to as `DApp`s). Due to this, the Ethereum DApp ecosystem is very diverse. However, one issue that plagues DApps is the fact that they are not fully decentralized. Specifically, to interface a "decentralized" application, one first needs to access

RATIONALE:
The `request` method was chosen to be readonly because all data should be sent to the contract from the parsed DApp. Here are some reasons why: - Submitting a transaction to send a request would be costly and would require waiting for the transaction to be mined, resulting in


=== ERC-7651 ===
TITLE: Fractionally Represented Non-Fungible Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-03-05
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal introduces a standard for fractionally represented non-fungible tokens, allowing NFTs to be managed and owned fractionally within a single contract. This approach enables NFTs to coexist with an underlying fungible representation seamlessly, enhancing liquidity and access without dividing the NFT itself, or requiring an explicit conversion step.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Fractionally Represented Non-Fungible Token Interface All [ERC-7651](./eip-7651.md) compliant contracts MUST implement the ERC-7651 and

MOTIVATION:
Fractional ownership of NFTs has historically relied on external protocols that manage division and reconstitution of individual NFTs into fractional representations. The approach of dividing specific NFTs results in fragmented liquidity of the total token supply, as the fractional representations of two NFTs are not equivalent and therefore must

RATIONALE:
This standard unifies the representation of fractional ownership with the non-fungible token model, aligning closely with [ERC-721](./eip-721.md) principles while enabling the functionality of [ERC-20](./eip-20.md) transfers. This dual compatibility aims to mitigate the integration complexity for existing protocols. Our goal is to implicitly support as high a degree of backwards


=== ERC-1820 ===
TITLE: Pseudo-introspection Registry Contract
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2019-03-04
REQUIRES: 1, 6, 5, ,,  , 2, 1, 4

SUMMARY:
This standard defines a registry where smart contracts and regular accounts can publish which functionality they implement---either directly or through a proxy contract. Anyone can query this registry to ask if a specific address implements a given interface and which smart contract handles its implementation. This registry MAY be

SPECIFICATION:
### [ERC-1820] Registry Smart Contract > This is an exact copy of the code of the [ERC1820 registry smart contract]. ``` solidity /* ERC1820 Pseudo-introspection Registry Contract * This standard defines a universal registry smart contract where any address (contract or regular account) can * register which interface it

MOTIVATION:
There have been different approaches to define pseudo-introspection in Ethereum. The first is [ERC-165] which has the limitation that it cannot be used by regular accounts. The second attempt is [ERC-672] which uses reverse [ENS]. Using reverse [ENS] has two issues. First, it is unnecessarily complicated, and second, [ENS]

RATIONALE:
This standards offers a way for any type of address (externally owned and contracts) to implement an interface and potentially delegate the implementation of the interface to a proxy contract. This delegation to a proxy contract is necessary for externally owned accounts and useful to avoid redeploying existing contracts


=== ERC-3156 ===
TITLE: Flash Loans
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-11-15
REQUIRES: 

SUMMARY:
A flash loan is a smart contract transaction in which a lender smart contract lends assets to a borrower smart contract with the condition that the assets are returned, plus an optional fee, before the end of the transaction. This ERC specifies interfaces for lenders to accept flash loan

SPECIFICATION:
A flash lending feature integrates two smart contracts using a callback pattern. These are called the LENDER and the RECEIVER in this EIP. ### Lender Specification A `lender` MUST implement the IERC3156FlashLender interface. ``` pragma solidity ^0.7.0 || ^0.8.0; import "./IERC3156FlashBorrower.sol"; interface IERC3156FlashLender { /** * @dev The amount

MOTIVATION:
Flash loans allow smart contracts to lend an amount of tokens without a requirement for collateral, with the condition that they must be returned within the same transaction. Early adopters of the flash loan pattern have produced different interfaces and different use patterns. The diversification is expected to intensify,

RATIONALE:
The interfaces described in this ERC have been chosen as to cover the known flash lending use cases, while allowing for safe and gas efficient implementations. `flashFee` reverts on unsupported tokens, because returning a numerical value would be incorrect. `flashLoan` has been chosen as a function name as descriptive


=== ERC-3754 ===
TITLE: A Vanilla Non-Fungible Token Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-08-21
REQUIRES: 

SUMMARY:
In this standard, a non-fungible token stands as atomic existence and encourages layers of abstraction built on top of it. Ideal for representing concepts like rights, a form of abstract ownership. Such right can take the form of NFT options, oracle membership, virtual coupons, etc., and can then be

SPECIFICATION:
``` interface IERC3754 { event Transfer(address indexed from, address indexed to, uint256 indexed tokenId); event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId); event ApprovalForAll(address indexed owner, address indexed operator, bool approved); function balanceOf(address owner) external view returns (uint256); function ownerOf(uint256 tokenId) external view returns (address); function approve(address

MOTIVATION:
Non-fungible tokens are popularized by the [ERC-721](./eip-721.md) NFT standard for representing "ownership over digital or physical assets". Over the course of development, reputable NFT projects are about crypto-assets, digital collectibles, etc. The proposed standard aims to single out a special type of NFTs that are ideal for representing abstract

RATIONALE:
The NFTs defined in the [ERC-721](./eip-721.md) standard are already largely accepted and known as representing ownership of digital assets, and the NFTs by this standard aim to be accepted and known as representing abstract ownership. This is achieved by allowing and encouraging layers of abstract utilities built on top


=== ERC-3448 ===
TITLE: MetaProxy Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2021-03-29
REQUIRES: 

SUMMARY:
By standardizing on a known minimal bytecode proxy implementation with support for immutable metadata, this standard allows users and third party tools (e.g. Etherscan) to: (a) simply discover that a contract will always redirect in a known manner and (b) depend on the behavior of the code at the

SPECIFICATION:
The exact bytecode of the MetaProxy contract is: ``` 20 bytes target contract address ---------------------------------------- 363d3d373d3d3d3d60368038038091363936013d7300000000000000000000000000000000000000005af43d3d93803e603457fd5bf3 ``` wherein the bytes at indices 21 - 41 (inclusive) are replaced with the 20 byte address of the master functionality contract. Additionally, everything after the MetaProxy bytecode can be arbitrary metadata and

MOTIVATION:
This standard supports use-cases wherein it is desirable to clone exact contract functionality with different parameters at another address.

RATIONALE:
The goals of this effort have been the following: - a cheap way of storing immutable metadata for each child instead of using storage slots - inexpensive deployment of clones - handles error return bubbling for revert messages


=== ERC-5679 ===
TITLE: Token Minting and Burning
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-17
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP introduces a consistent way to extend token standards for minting and burning.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. 1. Any contract complying with [EIP-20](./eip-20.md) when extended with this EIP, **MUST** implement the following interface: ```solidity // The EIP-165

MOTIVATION:
Minting and Burning are typical actions for creating and destroying tokens. By establishing a consistent way to mint and burn a token, we complete the basic lifecycle. Some implementations of [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md) have been able to use `transfer` methods or the-like to mint and burn tokens. However, minting

RATIONALE:
1. It's possible that the interface be consolidated to the same as EIP-1155 which is always bearing `_amount` field, regardless of whether it's a EIP-20, EIP-721 or EIP-1155. But we choose that each ERC token should have their own standard way of representing the amount of token to follow


=== ERC-5639 ===
TITLE: Delegation Registry
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-09-09
REQUIRES: 

SUMMARY:
This EIP describes the details of the Delegation Registry, a proposed protocol and ABI definition that provides the ability to link one or more delegate wallets to a vault wallet in a manner which allows the linked delegate wallets to prove control and asset ownership of the vault wallet.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Let: - `vault` represent the vault address we are trying to authenticate or prove asset ownership for. - `delegate` represent

MOTIVATION:
Proving ownership of an asset to a third party application in the Ethereum ecosystem is common. Users frequently sign payloads of data to authenticate themselves before gaining access to perform some operation. However, this method--akin to giving the third party root access to one's main wallet--is both insecure and

RATIONALE:
### Allowing for vault, contract or token level delegation In order to support a wide range of delegation use cases, the proposed specification allows a vault to delegate all assets it controls, assets of a specific contract, or a specific token. This ensures that a vault has fine grained


=== ERC-4393 ===
TITLE: Micropayments for NFTs and Multi Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-10-24
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This standard outlines a smart contract interface for tipping to non-fungible and multi tokens. Holders of the tokens are able to withdraw the tips as [EIP-20](./eip-20.md) rewards. For the purpose of this EIP, a micropayment is termed as a financial transaction that involves usually a small sum of money

SPECIFICATION:
This standard proposal outlines a generalised way to allow tipping via implementation of an `ITipToken` interface. The interface is intentionally kept to a minimum in order to allow for maximum use cases. Smart contracts implementing this EIP standard MUST implement all of the functions in this EIP interface. MUST

MOTIVATION:
A cheap way to send tips to any type of NFT or multi token. This can be achieved by gas optimising the tip token contract and sending the tips in batches using the `tipBatch` function from the interface. To make it easy to implement into dapps a tipping service

RATIONALE:
### Simplicity ITipToken interface uses a minimal number of functions, in order to keep its use as general purpose as possible, whilst there being enough to guide implementation that fulfils its purpose for micropayments to NFT holders. ### Use of NFTs Each NFT is a unique non-fungible token digital


=== ERC-5521 ===
TITLE: Referable NFT
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-10
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It proposes two referable indicators, referring and referred, and a time-based indicator `createdTimestamp`. The relationship between each NFT forms a directed acyclic graph (DAG). The standard allows users to query, track and analyze their relationships. ![System Architecture](../assets/eip-5521/system-arch.png)

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. - `UpdateNode`: event emitted when `setNode` is invoked; - `safeMint`: mint a new rNFT; - `setNode`: set the referring list

MOTIVATION:
Many scenarios require the inheritance, reference, and extension of NFTs. For instance, an artist may develop his NFT work based on a previous NFT, or a DJ may remix his record by referring to two pop songs, etc. A gap in existing NFT standards is the absence of established

RATIONALE:
### Is this event informative enough? `UpdateNode`: This event disseminates crucial information, including the rNFT ID, its owner, and lists of contract addresses/IDs with rNFTs referring to or referred by the subject rNFT. This data set enables stakeholders to efficiently manage and navigate the complex web of relationships inherent


=== ERC-2335 ===
TITLE: BLS12-381 Keystore
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-09-30
REQUIRES: 2, 3, 3, 3, ,,  , 2, 3, 3, 4

SUMMARY:
A keystore is a mechanism for storing private keys. It is a JSON file that encrypts a private key and is the standard for interchanging keys between devices as until a user provides their password, their key is safe.

SPECIFICATION:
The process of decrypting the secret held within a keystore can be broken down into 3 sub-processes: obtaining the decryption key, verifying the password and decrypting the secret. Each process has its own functions which can be selected from as well as parameters required for the function all of

MOTIVATION:
The secure storage and exchange of keys is a vital component of the user experience as people are expected to hold their own keys. It allows users to control access to individual keys and their use by applications. In Ethereum 1, [the Web3 Secret Storage Definition](https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition) fulfills these requirements,

RATIONALE:
The rationale behind the design of this specification is largely the same as that behind the [Ethereum 1 keystore definition](https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition) except for the lack of support for Keccak (explained in [motivation above](#motivation)) and the notion of modules. Modules provide a very useful level of abstraction which allow the Key-Derivation-Function,


=== ERC-5115 ===
TITLE: SY Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-05-30
REQUIRES: 20

SUMMARY:
This standard proposes an API for wrapped yield-bearing tokens within smart contracts. It is an extension on the [ERC-20](./eip-20.md) token that provides basic functionality for transferring, depositing, withdrawing tokens, as well as reading balances.

SPECIFICATION:
### Generic Yield Generating Pool We will first introduce Generic Yield Generating Pool (GYGP), a model to describe most yield generating mechanisms in DeFi. In every yield generating mechanism, there is a pool of funds, whose value is measured in **assets**. There are a number of users who contribute

MOTIVATION:
Yield generating mechanisms are built in all shapes and sizes, necessitating a manual integration every time a protocol builds on top of another protocol’s yield generating mechanism. [ERC-4626](./eip-4626.md) tackled a significant part of this fragmentation by standardizing the interfaces for vaults, a major category among various yield generating mechanisms.

RATIONALE:
[ERC-20](./eip-20.md) is enforced because implementation details such as transfer, token approvals, and balance calculation directly carry over to the SY tokens. This standardization makes the SY tokens immediately compatible with all ERC-20 use cases. [ERC-165](./eip-165.md) can optionally be implemented should you want integrations to detect the IStandardizedYield interface implementation.


=== ERC-927 ===
TITLE: Generalised authorisations
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-03-12
REQUIRES: 926

SUMMARY:
This EIP specifies a generic authorisation mechanism, which can be used to implement a variety of authorisation patterns, replacing approvals in ERC20, operators in ERC777, and bespoke authorisation patterns in a variety of other types of contract.

SPECIFICATION:
The generalised authorisation interface is implemented as a metadata provider, as specified in EIP 926. The following mandatory function is implemented: ```solidity function canCall(address owner, address caller, address callee, bytes4 func) view returns(bool); ``` Where: - `owner` is the owner of the resource. If approved the function call is

MOTIVATION:
Smart contracts commonly need to provide an interface that allows a third-party caller to perform actions on behalf of a user. The most common example of this is token authorisations/operators, but other similar situations exist throughout the ecosystem, including for instance authorising operations on ENS domains. Typically each standard


=== ERC-3135 ===
TITLE: Exclusive Claimable Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-08-10
REQUIRES: 20

SUMMARY:
This EIP defines a set of additions to the default token standard such as ERC-20, that allows online/offline service providers establish micropayment channels with any number of users by signing and verifying messages about the consumption of token off chain. Using this mechanism will reduce interactions with blockchain to

SPECIFICATION:
```solidity /// @return Image url of this token or descriptive resources function iconUrl() external view returns (string memory); /// @return Issuer of this token. Only issuer can execute claim function function issuer() external view returns (address); /** * @notice Remove consumption from payer's deposite * @dev Check if msg.sender

MOTIVATION:
There are two main purposes of this EIP, one is to reduce interactions with blockchain, the second is to link Ethereum to real-world payment problems. Many small businesses want to build payment system based on blockchain but find it difficult. There are basically two ways: 1. Directly pay with

RATIONALE:
This EIP targets on ERC-20 tokens due to its widespread adoption. However, this extension is designed to be compatible with other token standard. The reason we chose to implement those functions in token contract rather than a separate record contract is as follows: - Token can transfer is more


=== ERC-7617 ===
TITLE: Chunk support for ERC-5219 mode in Web3 URL
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-08
REQUIRES: 5, 2, 1, 9, ,,  , 6, 9, 4, 4

SUMMARY:
In the context of the [ERC-6860](./eip-6860.md) `web3://` standard, this ERC extends the [ERC-6944](./eip-6944.md) resolve mode: This standard defines a new optional ``web3-next-chunk`` HTTP header returned by the `request()` call, that contains a `web3://` URL pointing to the next data chunk of the resource data. Chunks are streamed to the

SPECIFICATION:
In the [ERC-6944](./eip-6944.md) resolve mode, this standard introduces the new optional ``web3-next-chunk`` HTTP header, to be returned in the `headers` `KeyValue` array of the `request()` method defined in [ERC-6944](./eip-6944.md). The value of the header is either a complete `web3://` URL, or a relative one. The target smart contract must

MOTIVATION:
Ethereum RPC endpoints have a gas limit, which can be reached when serving large content. By adding a chunking feature, we add the possibility to serve arbitrary sized content.

RATIONALE:
The use of a header pointing to the next chunk was chosen because it does not require changes to the [ERC-6944](./eip-6944.md) `request()` interface, and the use of a `web3://` URL in the header add flexibility to the means to provide the next chunk.


=== ERC-6065 ===
TITLE: Real Estate Token
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-11-29
REQUIRES: 721

SUMMARY:
This proposal introduces an open structure for physical real estate and property to exist on the blockchain. This standard builds off of [ERC-721](./eip-721.md), adding important functionality necessary for representing real world assets such as real estate. The three objectives this standard aims to meet are: universal transferability of the

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119 and RFC 8174. In order to meet the above objectives and create an open standard for on-chain property

MOTIVATION:
Real estate is the largest asset class in the world. By tokenizing real estate, barriers to entry are lowered, transaction costs are minimized, information asymmetry is reduced, ownership structures become more malleable, and a new building block for innovation is formed. However, in order to tokenize this asset class,

RATIONALE:
### Introduction Real world assets operate in messy, non-deterministic environments. Because of this, validating the true state of an asset can be murky, expensive, or time-consuming. For example, in the U.S., change of property ownership is usually recorded at the County Recorder’s office, sometimes using pen and paper. It


=== ERC-5827 ===
TITLE: Auto-renewable allowance extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-10-22
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
This extension adds a renewable allowance mechanism to [ERC-20](./eip-20.md) allowances, in which a `recoveryRate` defines the amount of token per second that the allowance regains towards the initial maximum approval `amount`.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ```solidity pragma solidity ^0.8.0; interface IERC5827 /* is ERC20, ERC165 */ { /* * Note: the ERC-165 identifier for this

MOTIVATION:
Currently, ERC-20 tokens support allowances, with which token owners can allow a spender to spend a certain amount of tokens on their behalf. However, this is not ideal in circumstances involving recurring payments (e.g. subscriptions, salaries, recurring direct-cost-averaging purchases). Many existing DApps circumvent this limitation by requesting that users

RATIONALE:
Renewable allowances can be implemented with discrete resets per time cycle. However, a continuous `recoveryRate` allows for more flexible use cases not bound by reset cycles and can be implemented with simpler logic.


=== ERC-4675 ===
TITLE: Multi-Fractional Non-Fungible Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-01-13
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard outlines a smart contract interface eligible to represent any number of fractionalized non-fungible tokens. Existing projects utilizing standards like [EIP-1633](./eip-1633.md) conventionally deploy separate [EIP-20](./eip-20.md) compatible token contracts to fractionalize the non-fungible token into EIP-20 tokens. In contrast, this ERC allows each token ID to represent a token

SPECIFICATION:
```solidity /** @title Multi-Fractional Non-Fungible Token Standard @dev Note : The ERC-165 identifier for this interface is 0x83f5d35f. */ interface IMFNFT { /** @dev This emits when ownership of any token changes by any mechanism. The `_from` argument MUST be the address of an account/contract sending the token. The

MOTIVATION:
The conventional fractionalization process of fractionalizing a NFT to FT requires deployment of a FT token contract representing the ownership of NFT. This leads to inefficient bytecode usage on Ethereum Blockchain and limits functionalities since each token contract is separated into its own permissioned address. With the rise of

RATIONALE:
**Metadata** The `symbol()` & `name()` functions were not included since the majority of users can just fetch it from the originating NFT contract. Also, copying the name & symbol every time when token gets added might place a lot of redundant bytecode on the Ethereum blockchain. However, according to


=== ERC-6956 ===
TITLE: Asset-bound Non-Fungible Tokens
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-04-29
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard allows integrating physical and digital ASSETS without signing capabilities into dApps/web3 by extending [ERC-721](eip-721.md). An ASSET, for example a physical object, is marked with a uniquely identifiable ANCHOR. The ANCHOR is bound in a secure and inseparable manner 1:1 to an NFT on-chain - over the complete

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Definitions (alphabetical) - **ANCHOR** uniquely identifies the off-chain ASSET, whether it is physical or

MOTIVATION:
The well-known [ERC-721](eip-721.md) establishes that NFTs may represent "ownership over physical properties [...] as well as digital collectables and even more abstract things such as responsibilities" - in a broader sense, we will refer to all those things as ASSETS, which typically have value to people. ### The Problem

RATIONALE:
**Why do you use an anchor<>tokenId mapping and not simply use tokenIds directly?** Especially for collectable use-cases, special or sequential tokenIds (for example low numbers), have value. Holders may be proud to have claimed tokenId=1 respectively the off-chain ASSET with tokenId=1 may increase in value, because it was the


=== ERC-5489 ===
TITLE: NFT Hyperlink Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-16
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This EIP proposes a new extension for NFTs (non-fungible token, aka [EIP-721](./eip-721.md)): nft-hyperlink-extention (hNFT), embedding NFTs with hyperlinks, referred to as “hNFTs”. As owners of hNFTs, users may authorize a URL slot to a specific address which can be either an externally-owned account (EOA) or a contract address and

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### Interface #### `IERC5489` ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity ^0.8.0; interface IERC5489 { /** * @dev this event emits

MOTIVATION:
As NFTs attract more attention, they have the potential to become the primary medium of Web3. Currently, end users can’t attach rich texts, videos, or images to NFTs, and there’s no way to render these rich-content attachments. Many industries eagerly look forward to this kind of rich-content attachment ability.

RATIONALE:
### Extends NFT with hyperlinks URIs are used to represent the value of slots to ensure enough flexibility to deal with different use cases. ### Authorize slot to address We use addresses to represent the key of slots to ensure enough flexibility to deal with all use cases.


=== ERC-1077 ===
TITLE: Gas relay for contract calls
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-04
REQUIRES: 2, 0, ,,  , 1, 9, 1, ,,  , 1, 2, 7, 1, ,,  , 1, 3, 4, 4

SUMMARY:
A main barrier for the adoption of DApps is the requirement of multiple tokens for executing in chain actions. Allowing users to sign messages to show intent of execution, but allowing a third party relayer to execute them can circumvent this problem, while ETH will always be required for

MOTIVATION:
Standardizing a common format for them, as well as a way in which the user allows the transaction to be paid in tokens, gives app developers a lot of flexibility and can become the main way in which app users interact with the Blockchain.

RATIONALE:
User pain points: * users don't want to think about ether * users don't want to think about backing up private keys or seed phrases * users want to be able to pay for transactions using what they already have on the system, be apple pay, xbox points or


=== ERC-1185 ===
TITLE: Storage of DNS Records in ENS
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2018-06-26
REQUIRES: 137

SUMMARY:
This EIP defines a resolver profile for ENS that provides features for storage and lookup of DNS records. This allows ENS to be used as a store of authoritative DNS information.

SPECIFICATION:
The resolver profile to support DNS on ENS follows the resolver specification as defined in [ERC-137](./eip-137.md). Traditionally, DNS is a zone-based system in that all of the records for a zone are kept together in the same file. This has the benefit of simplicity and atomicity of zone updates,

MOTIVATION:
ENS is a highly desirable store for DNS information. It provides the distributed authority of DNS without conflating ownership and authoritative serving of information. With ENS, the owner of a domain has full control over their own DNS records. Also, ENS has the ability (through smart contracts) for a

RATIONALE:
DNS is a federated system of naming, and the higher-level entities control availability of everything beneath them (_e.g._ `.org` controls the availability of `ethereum.org`). A decentralized version of DNS would not have this constraint, and allow lookups directly for any domain with relevant records within ENS.


=== ERC-7527 ===
TITLE: Token Bound Function Oracle AMM
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-03
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal outlines interfaces for wrapping [ERC-20](./eip-20.md) or ETH to [ERC-721](./eip-721.md) and unwrap ERC-721 to ERC-20 or ETH. A function oracle feeds mint/burn prices based on an embedded equation of Function Oracle Automated Market Maker(FOAMM), which executes and clears the mint and burn of NFT.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Contract Interfaces: Three interfaces are included here: `Agency`, `App`, and `Factory`. `Agency` and `App` MAY

MOTIVATION:
Liquidity can be a significant challenge in decentralized systems, especially for unique or less commonly traded tokens like NFTs. To foster a trustless NFT ecosystem, the motivation behind Function Oracle Automated Market Maker(FOAMM) is to provide automated pricing solutions for NFTs with liquidity through transparent, smart contract mechanisms. This

RATIONALE:
### Prior Interfaces [ERC-5679](./eip-5679.md) proposed `IERC5679Ext721` interface for introducing a consistent way to extend [ERC-721](./eip-721.md) token standards for minting and burning. To ensure the backward compatibility, considering some contracts which do not implement `ERC721TokenReceiver`, `IERC7527App` employ `mint` function instead of `safeMint`. To ensure the safety and the uniqueness of


=== ERC-7734 ===
TITLE: Decentralized Identity Verification (DID)
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2024-06-26
REQUIRES: 

SUMMARY:
This proposal introduces a standard for decentralized identity verification (DID) on the blockchain. The standard leverages cryptographic hashes to represent identity proofs and events for transparency and traceability. By emphasizing simplicity, privacy, and user control, this proposal aims to reduce overhead for developers and users, ensuring seamless integration into

SPECIFICATION:
The Decentralized Identity Verification (DID) standard introduces a simple, secure, and privacy-preserving mechanism for verifying user identities on the blockchain. The key components of this standard are outlined below: #### Identity Contract A smart contract that acts as the central authority for identity verification. The contract stores the status

MOTIVATION:
Centralized identity verification methods are cumbersome, prone to data breaches, and fail to provide users control over their identity data. Existing DID solutions often introduce complexity, making adoption challenging for developers and users. This proposal seeks to address these issues by: - Offering a minimalistic, decentralized standard that simplifies

RATIONALE:
The design leverages cryptographic hashes to represent identity information, ensuring that sensitive data is not stored directly on the blockchain. The use of `verificationHashes` allows for flexible identity verification mechanisms. These hashes could be derived from various off-chain proofs, such as cryptographic challenges or attestations, depending on the implementer's


=== ERC-7632 ===
TITLE: Interfaces for Named Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-08
REQUIRES: 165

SUMMARY:
Extends tokens using `uint256 tokenId` to support `tokenName` in type `string` and be able to convert backward to `tokenId`.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. 1. Compliant contracts MUST support `tokenName` and mapping between `tokenName` and `tokenId` in one of

MOTIVATION:
For Marketplaces, Explorers, Wallets, DeFi and dApps to better display and operate NFTs that comes with a name.

RATIONALE:
1. We allow default way to map `tokenId` and `tokenName` for convenience, but we also allow contract to implement their own way to map `tokenId` and `tokenName` for flexibility. 2. We consider providing an interface for


=== ERC-6147 ===
TITLE: Guard of NFT/SBT, an Extension of ERC-721
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-12-07
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It separates the holding right and transfer right of non-fungible tokens (NFTs) and Soulbound Tokens (SBTs) and defines a new role, `guard` with `expires`. The flexibility of the `guard` setting enables the design of NFT anti-theft, NFT lending, NFT leasing, SBT, etc.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ERC-721 compliant contracts MAY implement this EIP. A guard Must be valid only before expires. When a token has no guard

MOTIVATION:
NFTs are assets that possess both use and financial value. Many cases of NFT theft currently exist, and current NFT anti-theft schemes, such as transferring NFTs to cold wallets, make NFTs inconvenient to be used. In current NFT lending, the NFT owner needs to transfer the NFT to the


=== ERC-5313 ===
TITLE: Light Contract Ownership
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-07-22
REQUIRES: 1, 6, 5, ,,  , 1, 7, 3

SUMMARY:
This specification defines the minimum interface required to identify an account that controls a contract.

SPECIFICATION:
The key word “MUST” in this document is to be interpreted as described in RFC 2119. Every contract compliant with this EIP MUST implement the `EIP5313` interface. ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity ^0.8.15; /// @title EIP-5313 Light Contract Ownership Standard interface EIP5313 { /// @notice Get the address

MOTIVATION:
This is a slimmed-down alternative to [EIP-173](./eip-173.md).

RATIONALE:
Key factors influencing the standard: - Minimize the number of functions in the interface - Backwards compatibility with existing contracts This standard can be (and has been) extended by other standards to add additional ownership functionality. The smaller scope of this specification allows more and more straightforward ownership implementations,


=== ERC-7555 ===
TITLE: Single Sign-On for Account Discovery
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-11-10
REQUIRES: 4337

SUMMARY:
This proposal establishes a standardized interface and functionality for applications to discover user accounts besides the readily available EOA. Specifically discovering normal accounts and smart accounts that may have been deployed or configured using a signing key that is not the standard Ethereum secp256k1 curve. The objective is to

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Definitions - **Smart account** - An ERC-4337 compliant smart contract account that has a

MOTIVATION:
The recent progress in account abstraction has led to significantly increased flexibility enabling use cases such as multi-signature transactions, social recovery, contract/account whitelisting, session keys and much more. However, with increased flexibility there comes an increased complexity. One area of increased complexity is account fragmentation -both at the EOA

RATIONALE:
### Redirects Taking inspiration from how SSO functions in the web today. We implement a similar redirect pattern, consisting of a simple request/response. #### Application ##### Initial Request An application would redirect a user to a specified provider, only passing along the callback url information. This is to ensure


=== ERC-7779 ===
TITLE: Interoperable Delegated Accounts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-02
REQUIRES: 7, 2, 0, 1, ,,  , 7, 7, 0, 2

SUMMARY:
This proposal outlines the interfaces to make delegated EOAs interoperable after the merge of [EIP-7702](./eip-7702.md). With [EIP-7702](./eip-7702.md), EOAs will be able to enable execution abstraction, which leads to a more feature-rich account, including gas sponsorship, batch execution, and more. However, there is a need to help facilitate storage management

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ```solidity interface IInteroperableDelegatedAccount { /* * @dev Provides the namespace of the account. * namespace of

MOTIVATION:
After the merge of [EIP-7702](./eip-7702.md), it is expected that a considerable number of EOA wallets will migrate from pure EOA accounts to delegated EOA accounts. This is to enable a more appealing wallet UX, including a 1-step swap, automated subscription, gas sponsorship, and more. However, considering the fact that

RATIONALE:
### Storage base checks This standard is designed with the need of wallets to validate the storage of the EOA, even if some may consider that the probability of hash is already big that the account doesn't have to check, assuming that each wallet uses a different storage base


=== ERC-6932 ===
TITLE: Subscription-Based Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-25
REQUIRES: 20

SUMMARY:
This subscription-based [ERC-20](./eip-20.md) token extends the basic [ERC-20](./eip-20.md) token standard with a `subscribe` and `unsubscribe` function, which allow users to subscribe or unsubscribe from the subscription service. The `subscriptionFee` and `subscriptionFrequency` variables define the cost and frequency of the subscription. The `nextPaymentDate` mapping keeps track of the next payment

SPECIFICATION:
Below are the implementaions required by the standard: ### `SubscriptionToken` #### `subscribers` Returns the list of `addresses` subscribed to the subscription token contract. #### `subscriptionInfo` Metadata information of the subscription, like - `subscriptionID`, `subscriptionName`, `subscriptionDesc` and `subscriptionTandC`. #### `subscriptionFee` The subscription amount specified that will be deducted in `subscriptionFrequency`

MOTIVATION:
The rise of subscription-based business models necessitates a standardized approach to handle recurring payments on the Ethereum blockchain. Currently, users often manually initiate subscription payments, resulting in inconvenience and potential disruptions in service delivery. By introducing a Subscription Token, users can seamlessly authorize periodic deductions, enabling uninterrupted access to

RATIONALE:
The subscription token contract inherits the fundamentals of subscription by deducting payments from subscribed addresses on a regular interval using mathematical formulas. ``` uint256 intervals = ( block.timestamp - info.start ) / info.frequency; uint256 amount = info.amount * intervals; uint256 localEffectiveBalance = effectiveBalance[account]; if ( (totalAmount + amount) >


=== ERC-2477 ===
TITLE: Token Metadata Integrity
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-01-02
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
An interface `ERC2477` with two functions `tokenURIIntegrity` and `tokenURISchemaIntegrity` are specified for smart contracts and a narrative is provided to explain how this improves the integrity of the token metadata documents.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Smart contracts **Smart contracts implementing the ERC-2477 standard MUST implement the `ERC2477` interface.** ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity

MOTIVATION:
Tokens are being used in many applications to represent, trace and provide access to assets off-chain. These assets include in-game digital items in mobile apps, luxury watches and products in our global supply chain, among many other creative uses. Several token standards allow attaching metadata to specific tokens using

RATIONALE:
**Function and parameter naming** The W3C Subresource Integrity (SRI) specification uses the attribute "integrity" to perform integrity verification. This ERC-2477 standard provides a similar mechanism and reuses the integrity name so as to be familiar to people that have seen SRI before. **Function return tuple** The SRI integrity attribute


=== ERC-1592 ===
TITLE: Address and ERC20-compliant transfer rules
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-09
REQUIRES: 

SUMMARY:
This standard proposal should answer the following challenges: - Enable integration of rules with interacting platforms such as exchanges, decentralized wallets and DApps. - Externale code and storage, improve altogether reusability, gas costs and contracts' memory footprint. - Highlight contract behavior and its evolution, in order to ease user

SPECIFICATION:
We define below an interface for a rule. Rules are meant to be as simple as possible, to limit gas expenditure, since that logic will be executed on every transfer. Another reason for keeping rules simple and short, and strive for atomicity, is to facilitate both composition and interpretation

MOTIVATION:
ERC20 was designed as a standard interface allowing any token on Ethereum to be handled by other applications: from wallets to decentralized exchanges. This has been extremely powerful, but future developments in the industry of tokenization are bringing new challenges. For example it is already hard to know exactly


=== ERC-7510 ===
TITLE: Cross-Contract Hierarchical NFT
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-08-24
REQUIRES: 721

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It proposes a way to maintain hierarchical relationship between tokens from different contracts. This standard provides an interface to query the parent tokens of an NFT or whether the parent relation exists between two NFTs.

SPECIFICATION:
Solidity interface available at [`IERC7510.sol`](../assets/eip-7510/contracts/IERC7510.sol): ```solidity /// @notice The struct used to reference a token in an NFT contract struct Token { address collection; uint256 id; } interface IERC7510 { /// @notice Emitted when the parent tokens for an NFT is updated event UpdateParentTokens(uint256 indexed tokenId); /// @notice Get

MOTIVATION:
Some NFTs want to generate derivative assets as new NFTs. For example, a 2D NFT image would like to publish its 3D model as a new derivative NFT. An NFT may also be derived from multiple parent NFTs. Such cases include a movie NFT featuring multiple characters from other

RATIONALE:
This standard differs from [ERC-6150](./eip-6150.md) in mainly two aspects: supporting cross-contract token reference, and allowing multiple parents. But we try to keep the naming consistent overall. In addition, we didn't include `child` relation in the interface. An original NFT exists before its derivative NFTs. Therefore we know what parent


=== ERC-5334 ===
TITLE: EIP-721 User And Expires And Level Extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-25
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
An [EIP-721](./eip-721.md) extension that adds an additional role (`user`) which can be granted to addresses, and a time where the role is automatically revoked (`expires`) and (`level`) . The `user` role represents permission to "use" the NFT, but not the ability to transfer it or set users.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### Contract Interface Solidity Interface with NatSpec & OpenZeppelin v4 Interfaces (also available at [`IERC5334.sol`](../assets/eip-5334/IERC5334.sol)): ```solidity interface IERC5334 { // Logged

MOTIVATION:
Some NFTs have certain utilities. For example, virtual land can be "used" to build scenes, and NFTs representing game assets can be "used" in-game. In some cases, the owner and user may not always be the same. There may be an owner of the NFT that rents it out

RATIONALE:
TBD


=== ERC-7769 ===
TITLE: JSON-RPC API for ERC-4337
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-08-23
REQUIRES: 1, 5, 5, ,,  , 4, 3, 3, 7, ,,  , 7, 5, 6, 2

SUMMARY:
Defines new JSON-RPC API methods which enable [ERC-4337](./eip-4337) wallets to communicate with `UserOpeation` mempool nodes and bundlers, matching the functionality that exists for Ethereum transactions. Additionally, a set of `debug` JSON-RPC API methods is defined in order to facilitate development, testing and debugging issues with ERC-4337 implementations.

SPECIFICATION:
### Definitions * **bundler**: a node exposing the APIs, in order to submit them to the network. A bundler collects one or more UserOperations into a bundle and submits them together to the `EntryPoint` in a single `handleOps` call. ### RPC methods (eth namespace) #### `eth_sendUserOperation` The `eth_sendUserOperation` method

MOTIVATION:
In ERC-4337, user transactions as defined in Ethereum are replaced with `UserOperation` objects, which contain all the information needed to perform the operations requested by the users. However, existing Ethereum JSON-RPC API methods are not suited to working with `UserOperation` objects. In order to facilitate the operation of the


=== ERC-4972 ===
TITLE: Name-Owned Account
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-04-04
REQUIRES: 137

SUMMARY:
The ERC suggests expanding the capabilities of the name service, such as ENS, by enabling each human-readable identity to be linked to a single smart contract account that can be controlled by the owner of the name identity.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### Name-Owned Account An NOA has - a human readable name defined by [ERC-137](./eip-137.md); and - an owned account(NOA), which

MOTIVATION:
Name itself cannot hold any context. We want to build an extension of name service to give name rich context by offering each name owner an extra ready to use smart contract account, which may help the general smart contract account adoption. With NOA, it is possible to hold

RATIONALE:
To achieve a one-to-one mapping from the name to the NOA, where each NOA's address is derived from the name node, we must include the name node information in each NOA to reflect its name node ownership. The "name()" function can be used to retrieve this property of each


=== ERC-1386 ===
TITLE: Attestation management contract
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-08
REQUIRES: 


=== ERC-7710 ===
TITLE: Smart Contract Delegation
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-05-20
REQUIRES: 1, 2, 7, 1, ,,  , 7, 5, 7, 9

SUMMARY:
This proposal introduces a standard way for smart contracts to delegate capabilities to other smart contracts or Externally Owned Accounts (EOAs). The delegating contract (delegator) must be able to authorize a `DelegationManager` contract to call the delegator to execute the desired action. This framework empowers a delegating contract with

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Terms - A **Delegator** is a smart contract that can create a delegation. -

MOTIVATION:
The development of smart contracts on Ethereum has led to a diverse array of decentralized applications (dApps) that leverage composability to interact with one another in innovative ways. While current smart contracts are indeed capable of working together, enabling these interactions, especially in the realm of sharing capabilities or

RATIONALE:
The design of this ERC is motivated by the need to introduce standardized, secure, and efficient mechanisms for delegation within the Ethereum ecosystem. Several considerations were taken into account: **Flexibility and Scalability**: The proposed interfaces are designed to be minimal yet powerful, allowing contracts to delegate a wide range


=== ERC-7409 ===
TITLE: Public Non-Fungible Tokens Emote Repository
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-07-26
REQUIRES: 165

SUMMARY:
❗️ **[ERC-7409](./eip-7409.md) supersedes [ERC-6381](./eip-6381.md).** ❗️ The Public Non-Fungible Tokens Emote Repository standard provides an enhanced interactive utility for [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) by allowing NFTs to be emoted at. This proposal introduces the ability to react to NFTs using Unicode standardized emoji in a public non-gated repository smart contract that

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity /// @title ERC-7409 Emotable Extension for Non-Fungible Tokens /// @dev See https://eips.ethereum.org/EIPS/eip-7409 /// @dev Note: the ERC-165 identifier for

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time to standardize additional utility for them. Having the ability for anyone to interact with an NFT introduces an interactive aspect to owning an NFT and

RATIONALE:
Designing the proposal, we considered the following questions: 1. **Does the proposal support custom emotes or only the Unicode specified ones?**\ The proposal only accepts the Unicode identifier which is a `string` value. This means that while we encourage implementers to add the reactions using standardized emojis, the values


=== ERC-4527 ===
TITLE: QR Code transmission protocol for wallets
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-12-07
REQUIRES: 

SUMMARY:
The purpose of this EIP is to provide a process and data transmission protocol via QR Code between offline signers and watch-only wallets.

SPECIFICATION:
**Offline signer**: An offline signer is a device or application which holds the user’s private keys and does not have network access. **Watch-only wallet**: A watch-only wallet is a wallet that has network access and can interact with the Ethereum blockchain. ### Process In order to work with offline

MOTIVATION:
There is an increasing number of users whom like to use complete offline signers to manage their private keys, signers like hardware wallets and mobile phones in offline mode. In order to sign transactions or data, these offline signers have to rely on a watch-only wallet since it would

RATIONALE:
This EIP uses some existing UR types like `crypto-keypath` and `crypto-hdkey` and also introduces some new UR types like `eth-sign-request` and `eth-signature`. Here are the reasons we choose UR for the QR Code data transmission protocol: ### UR provides a solid foundation for QR Code data transmission - Uses


=== ERC-7484 ===
TITLE: Registry Extension for ERC-7579
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-08-14
REQUIRES: 7579

SUMMARY:
This proposal standardizes the interface and functionality of Module Registries, allowing modular smart accounts to verify the security of modules using a Registry Adapter. It also provides a reference implementation of a Singleton Module Registry.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Definitions - **Smart account** - An ERC-7579 modular smart account. - **Module** - Self-contained

MOTIVATION:
[ERC-4337](./eip-4337.md) standardizes the execution flow of contract accounts and [ERC-7579](./eip-7579.md) standardizes the modular implementation of these accounts, allowing any developer to build modules for these modular accounts (hereafter Smart Accounts). However, adding third-party modules into Smart Accounts unchecked opens up a wide range of attack vectors. One solution to

RATIONALE:
### Attestations Attestations are onchain assertions made about a module. These assertions could pertain to the security of a module (similar to a regular smart contract audit), whether a module adheres to a certain standard or any other kinds of statements about these modules. While some of these assertions


=== ERC-7597 ===
TITLE: Signature Validation Extension for Permit
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-01-15
REQUIRES: 1, 2, 7, 1, ,,  , 2, 6, 1, 2

SUMMARY:
This proposal aims to extend the functionality of the existing [ERC-2612](./eip-2612.md) Permit to support gasless [ERC-20](./eip-20.md) approval operations initiated by smart contract wallets.

SPECIFICATION:
Compliant contracts must implement the `permit` using the following spec ``` function permit(address owner, address spender, uint value, uint deadline, bytes memory signature) external ``` as well as two other interfaces previously mandated by [ERC-2612](./eip-2612.md): ``` function nonces(address owner) external view returns (uint) function DOMAIN_SEPARATOR() external view returns (bytes32)

MOTIVATION:
The current signature validation scheme in [ERC-2612](./eip-2612.md), based on V, R, S parameters, restricts signature validation to EOA wallets. With the growing popularity of smart contract wallets and increased adoption of [ERC-1271](./eip-1271.md), it is necessary to allow for flexible signature validation methods and the use of custom logic in

RATIONALE:
By replacing the existing V, R, S signature validation scheme and introducing support for unstructured bytes input, contract developers can use a unified interface to validate signature from both EOAs and SC wallets. This allows for the utilization of different signature schemes and algorithms fitting the wallet type, paving


=== ERC-5507 ===
TITLE: Refundable Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-19
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This ERC adds refund functionality for initial token offerings to [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), and [ERC-1155](./eip-1155.md). Funds are held in escrow until a predetermined time before they are claimable. Until that predetermined time passes, users can receive a refund for tokens they have purchased.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. All implementations MUST use and follow the directions of [ERC-165](./eip-165.md). ### ERC-20 Refund Extension ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity

MOTIVATION:
The NFT and token spaces lack accountability. For the health of the ecosystem as a whole, better mechanisms to prevent rugpulls from happening are needed. Offering refunds provides greater protection for buyers and increases legitimacy for creators. A standard interface for this particular use case allows for certain benefits:

RATIONALE:
`refundDeadlineOf` uses blocks instead of timestamps, as timestamps are less reliable than block numbers. The function names of `refund`, `refundOf`, and `refundDeadlineOf` were chosen to fit the naming style of ERC-20, ERC-721, and ERC-1155. [ERC-165](./eip-165.md) is required as introspection by DApps would be made significantly harder if it were


=== ERC-2018 ===
TITLE: Clearable Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-04-30
REQUIRES: 1996

SUMMARY:
The clearing process turns the promise of a transfer into the actual movement of money from one account to another. A clearing agent decides if the transfer can be executed or not. The amount which should be transferred is not deducted from the balance of the payer, but neither

SPECIFICATION:
```solidity interface ClearableToken /* is ERC-1996 */ { enum ClearableTransferStatusCode { Nonexistent, Ordered, InProcess, Executed, Rejected, Cancelled } function orderTransfer(string calldata operationId, address to, uint256 value) external returns (bool); function orderTransferFrom(string calldata operationId, address from, address to, uint256 value) external returns (bool); function cancelTransfer(string calldata operationId) external returns (bool);

MOTIVATION:
A regulated token needs to comply with all the legal requirements, especially [KYC][KYC-Wikipedia] and [AML][AML-Wikipedia]. Some of these checks may not be able to be done on-chain and therefore a transfer may not be completed in one step. Currently there is no EIP to make such off-chain checks possible.

RATIONALE:
This EIP uses [EIP-1996][EIP-1996] to hold the money after a transfer is ordered. A clearing agent, whose implementation is not part of this proposal, acts as a predefined notary to decide if the transfer complies with the rules of the token or not. The `operationId` is a string and


=== ERC-190 ===
TITLE: Ethereum Smart Contract Packaging Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2017-01-10
REQUIRES: 


=== ERC-5982 ===
TITLE: Role-based Access Control
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-11-15
REQUIRES: 1, 6, 5, ,,  , 5, 7, 5, 0

SUMMARY:
This EIP defines an interface for role-based access control for smart contracts. Roles are defined as `byte32`. The interface specifies how to read, grant, create and destroy roles. It specifies the sense of role power in the format of its ability to call a given method identified by `bytes4`

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Interfaces of reference is described as followed: ```solidity interface IERC_ACL_CORE { function hasRole(bytes32 role, address

MOTIVATION:
There are many ways to establish access control for privileged actions. One common pattern is "role-based" access control, where one or more users are assigned to one or more "roles," which grant access to privileged actions. This pattern is more secure and flexible than ownership-based access control since it

RATIONALE:
1. The names and parameters of methods in `IERC_ACL_CORE` are chosen to allow backward compatibility with OpenZeppelin's implementation. 2. The methods in `IERC_ACL_GENERAL` conform to [ERC-5750](./eip-5750.md) to allow extension. 3. The method of `renounceRole` was not adopted, consolidating with `revokeRole` to simplify interface.


=== ERC-1261 ===
TITLE: Membership Verification Token (MVT)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-07-14
REQUIRES: 1, 6, 5, ,,  , 1, 7, 3

SUMMARY:
The following standard allows for the implementation of a standard API for Membership Verification Token within smart contracts(called entities). This standard provides basic functionality to track membership of individuals in certain on-chain ‘organizations’. This allows for several use cases like automated compliance, and several forms of governance and membership

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. **Every ERC-1261 compliant contract must implement the `ERC1261`, `ERC173` and `ERC165` interfaces** (subject to "caveats" below): ```solidity /// @title ERC-1261

MOTIVATION:
A standard interface allows any user, applications to work with any MVT on Ethereum. We provide for simple ERC-1261 smart contracts. Additional applications are discussed below. This standard is inspired from the fact that voting on the blockchain is done with token balance weights. This has been greatly detrimental

RATIONALE:
There are many potential uses of Ethereum smart contracts that depend on tracking membership. Examples of existing or planned MVT systems are Vault, a DAICO platform, and Stream, a security token framework. Future uses include the implementation of direct democracy, in-game memberships and badges, licence and travel document issuance,


=== ERC-7741 ===
TITLE: Authorize Operator
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-06-03
REQUIRES: 7, 1, 2, ,,  , 1, 2, 7, 1

SUMMARY:
A set of functions to enable meta-transactions and atomic interactions with contracts implementing an operator model, via signatures conforming to the [EIP-712](./eip-712.md) typed message signing specification.

SPECIFICATION:
### Operator-compatible contracts This signed authorization scheme applies to any contracts implementing the following interface: ```solidity interface IOperator { event OperatorSet(address indexed owner, address indexed operator, bool approved); function setOperator(address operator, bool approved) external returns (bool); function isOperator(address owner, address operator) external returns (bool status); } ``` [EIP-6909](./eip-6909.md) and

MOTIVATION:
The primary motivation for this standard is to enhance the flexibility, security, and efficiency of operator management. By leveraging EIP-712 signatures, this standard allows users to authorize operators without the need for on-chain transactions, reducing gas costs and improving user experience. This is particularly beneficial whenever frequent operator changes

RATIONALE:
### Similarity to [ERC-2612](./eip-2612.md) The specification is intentionally designed to closely match [ERC-2612](./eip-2612.md). This should simplify new integrations of the standard. The main difference is using `bytes32` vs `uint256`, which enables unordered nonces.


=== ERC-601 ===
TITLE: Ethereum hierarchy for deterministic wallets
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2017-04-13
REQUIRES: 

SUMMARY:
This EIP defines a logical hierarchy for deterministic wallets based on [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki), the purpose scheme defined in [BIP43](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki) and eip-draft-ethereum-purpose. This EIP is a particular application of eip-draft-ethereum-purpose.

SPECIFICATION:
We define the following 4 levels in BIP32 path: <pre> m / purpose' / subpurpose' / EIP' / wallet' </pre> Apostrophe in the path indicates that BIP32 hardened derivation is used. Each level has a special meaning, described in the chapters below. ### Purpose Purpose is a constant set

MOTIVATION:
At present, different Ethereum clients and wallets use different derivation paths; a summary of them can be found [here](https://github.com/ethereum/EIPs/issues/84#issuecomment-292324521). Some of these paths violate BIP44, the standard defining derivation paths starting with `m/44'/`. This creates confusion and incompatibility between wallet implementations, in some cases making funds from one wallet

RATIONALE:
The existing convention is to use the 'Ethereum' coin type, leading to paths starting with `m/44'/60'/*`. Because this still assumes a UTXO-based coin, we contend that this is a poor fit, resulting in standardisation, usability, and security compromises. As a result, we are making the above proposal to define


=== ERC-1155 ===
TITLE: Multi Token Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-06-17
REQUIRES: 165

SUMMARY:
This standard outlines a smart contract interface that can represent any number of fungible and non-fungible token types. Existing standards such as ERC-20 require deployment of separate contracts per token type. The ERC-721 standard's token ID is a single non-fungible index and the group of these non-fungibles is deployed

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. **Smart contracts implementing the ERC-1155 standard MUST implement all of the functions in the `ERC1155` interface.** **Smart contracts implementing the

MOTIVATION:
Tokens standards like ERC-20 and ERC-721 require a separate contract to be deployed for each token type or collection. This places a lot of redundant bytecode on the Ethereum blockchain and limits certain functionality by the nature of separating each token contract into its own permissioned address. With the

RATIONALE:
### Metadata Choices The `symbol` function (found in the ERC-20 and ERC-721 standards) was not included as we do not believe this is a globally useful piece of data to identify a generic virtual item / asset and are also prone to collisions. Short-hand symbols are used in tickers


=== ERC-7774 ===
TITLE: Cache invalidation in ERC-5219 mode Web3 URL
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-09-20
REQUIRES: 5, 2, 1, 9, ,,  , 6, 9, 4, 4

SUMMARY:
In the context of the [ERC-6860](./eip-6860.md) `web3://` standard, this ERC extends the [ERC-6944](./eip-6944.md) resolve mode. It introduces mechanisms to address limitations that prevent the use of standard [RFC 9111](https://www.rfc-editor.org/rfc/rfc9111) HTTP caching.

SPECIFICATION:
This standard introduces the `evm-events` cache directive for the `Cache-Control` header of request responses, as an extension directive as defined in section 5.2.3 of [RFC 9111](https://www.rfc-editor.org/rfc/rfc9111). When an [ERC-6944](./eip-6944.md) resolve mode website wants to use event-based caching for a request, it MUST: - Include the `evm-events` directive in the

MOTIVATION:
Calls to Ethereum RPC providers are costly—both CPU-wise for local nodes and monetarily for paid external RPC providers. Furthermore, external RPC providers are rate-limited, which can quickly cause disruptions when loading `web3://` URLs. Therefore, it makes sense to implement caching mechanisms to reduce RPC calls when possible. Since `web3://`

RATIONALE:
To stay as close as possible to standard HTTP, we reuse the HTTP caching mechanism headers. The use of the `evm-events` directive is necessary to avoid a situation where a website uses traditional [RFC 9111](https://www.rfc-editor.org/rfc/rfc9111) HTTP caching headers, but the contract does not implement this ERC by failing to


=== ERC-7512 ===
TITLE: Onchain Representation for Audits
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-05
REQUIRES: 712

SUMMARY:
The proposal aims to create a standard for an onchain representation of audit reports that can be parsed by contracts to extract relevant information about the audits, such as who performed the audits and what standards have been verified.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Audit Properties - Auditor - `name`: Name of the auditor (i.e. for displaying to the

MOTIVATION:
Audits are an integral part of the smart contract security framework. They are commonly used to increase the security of smart contracts and ensure that they follow best practices as well as correctly implement standards such [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), and similar ERCs. Many essential parts of the blockchain ecosystem are

RATIONALE:
The current ERC deliberately does not define the `findings` of an audit. Such a definition would require alignment on the definition of what severities are supported, what data of a finding should be stored onchain vs off-chain, and other similar finding-related attributes that are hard to strictly describe. Given


=== ERC-5744 ===
TITLE: Latent Fungible Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-09-29
REQUIRES: 2, 0, ,,  , 2, 6, 1, 2

SUMMARY:
The following standard is an extension of [EIP-20](./eip-20.md) that enables tokens to become fungible after some initial non-fungible period. Once minted, tokens are non-fungible until they reach maturity. At maturity, they become fungible and can be transferred, traded, and used in any way that a standard EIP-20 token can

SPECIFICATION:
All latent fungible tokens MUST implement EIP-20 to represent the token. The `balanceOf` and `totalSupply` return quantities for all tokens, not just the matured, fungible tokens. A new method called `balanceOfMatured` MUST be added to the ABI. This method returns the balance of matured tokens for a given address:

MOTIVATION:
Example use cases include: - Receipt tokens that do not become active until a certain date or condition is met. For example, this can be used to enforce minimum deposit durations in lending protocols. - Vesting tokens that cannot be transferred or used until the vesting period has elapsed.

RATIONALE:
The `mints` method is optional because the ID is optional. In some use cases such as vesting where a user may have a maximum of one mint, an ID is not required. Similarly, vesting use cases may want to enforce non-transferrable tokens until maturity, whereas lending receipt tokens with


=== ERC-5539 ===
TITLE: Revocation List Registry
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-26
REQUIRES: 712

SUMMARY:
This EIP proposes a set of methods and standards for a role-based registry of indicators aimed for usage in revocations.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. This EIP specifies a contract called `EthereumRevocationRegistry` that is deployed once and may then be commonly used by everyone. By

MOTIVATION:
Revocation is a universally needed construct both in the traditional centralized and decentralized credential attestation. This EIP aims to provide an interface to standardize a decentralized approach to managing and resolving revocation states in a contract registry. The largest problem with traditional revocation lists is the centralized aspect of

RATIONALE:
### Why the concept of namespaces? This provides every Ethereum address a reserved space, without the need to actively claim it in the contract. Initially addresses only have owner access in their own namespace. ### Why does a namespace always represent the initial owner address? The change of an


=== ERC-2020 ===
TITLE: E-Money Standard Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-05-10
REQUIRES: 2, 0, ,,  , 1, 0, 6, 6, ,,  , 1, 9, 9, 6, ,,  , 2, 0, 0, 9, ,,  , 2, 0, 1, 8, ,,  , 2, 0, 1, 9, ,,  , 2, 0, 2, 1

SUMMARY:
Financial institutions work today with electronic systems, which hold account balances in databases on core banking systems. In order for an institution to be allowed to maintain records of client balances segregated and available for clients, such institution must be regulated under a known legal framework and must possess

SPECIFICATION:
```solidity interface EMoneyToken /* is ERC-1996, ERC-2018, ERC-2019, ERC-2021 */ { function currency() external view returns (string memory); function version() external pure returns (string memory); function availableFunds(address account) external view returns (uint256); function checkTransferAllowed(address from, address to, uint256 value) external view returns (byte status); function checkApproveAllowed(address from, address spender,

MOTIVATION:
There are only a number of potential regulatory license frameworks that allow institutions to issue and hold money balances for customers (be it retail corporate or institutional types). The most important and practical ones are three: * **Electronic money entities**: these are legally regulated vehicles that are mostly used

RATIONALE:
This EIP unifies [ERC-1996][ERC-1996], [ERC-2018][ERC-2018], [ERC-2019][ERC-2019] and [ERC-2021][ERC-2021] and adds the checks for the compliance on top of it. By this way the separate EIPs are otherwise independent of each other, and the E-Money Standard Token offers a solution for all necessary functionality of regulated electronic money. While not


=== ERC-5805 ===
TITLE: Voting with delegation
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-04
REQUIRES: 7, 1, 2, ,,  , 6, 3, 7, 2

SUMMARY:
Many DAOs (decentralized autonomous organizations) rely on tokens to represent one's voting power. In order to perform this task effectively, the token contracts need to include specific mechanisms such as checkpoints and delegation. The existing implementations are not standardized. This ERC proposes to standardize the way votes are delegated

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Following pre-existing (but not-standardized) implementation, the EIP proposes the following mechanism. Each user account (address) can delegate to an account

MOTIVATION:
Beyond simple monetary transactions, decentralized autonomous organizations are arguably one of the most important use cases of blockchain and smart contract technologies. Today, many communities are organized around a governance contract that allows users to vote. Among these communities, some represent voting power using transferable tokens ([ERC-20](./eip-20.md), [ERC-721](./eip-721.md), other).

RATIONALE:
Delegation allows token holders to trust a delegate with their vote while keeping full custody of their token. This means that only a small-ish number of delegates need to pay gas for voting. This leads to better representation of small token holders by allowing their votes to be cast


=== ERC-4337 ===
TITLE: Account Abstraction Using Alt Mempool
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2021-09-29
REQUIRES: 7562

SUMMARY:
An account abstraction proposal which completely avoids the need for consensus-layer protocol changes. Instead of adding new protocol features and changing the bottom-layer transaction type, this proposal instead introduces a higher-layer pseudo-transaction object called a `UserOperation`. Users send `UserOperation` objects into a separate mempool. A special class of actor

SPECIFICATION:
### Definitions * **UserOperation** - a structure that describes a transaction to be sent on behalf of a user. To avoid confusion, it is not named "transaction". * Like a transaction, it contains "sender", "to", "calldata", "maxFeePerGas", "maxPriorityFee", "signature", "nonce" * unlike a transaction, it contains several other fields,

MOTIVATION:
See also `https://ethereum-magicians.org/t/implementing-account-abstraction-as-part-of-eth1-x/4020` and the links therein for historical work and motivation, and [EIP-2938](./eip-2938.md) for a consensus layer proposal for implementing the same goal. This proposal takes a different approach, avoiding any adjustments to the consensus layer. It seeks to achieve the following goals: * **Achieve the key goal

RATIONALE:
The main challenge with a purely smart contract wallet-based account abstraction system is DoS safety: how can a block builder including an operation make sure that it will actually pay fees, without having to first execute the entire operation? Requiring the block builder to execute the entire operation opens


=== ERC-3224 ===
TITLE: Described Data
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-01-23
REQUIRES: 191

SUMMARY:
Human-readable descriptions for machine executable operations, described in higher level machine readable data, so that wallets can provide meaningful feedback to the user describing the action the user is about to perform.

SPECIFICATION:
The **description string** and **described data** are generated simultaneously by evaluating the contract (i.e. the **describer**), passing the **describer inputs** to the method: ```solidity function eipXXXDescribe(bytes describer_inputs) view returns (string description_string, bytes described_data); ``` The method must be executable in a static context, (i.e. any side effects, such as

MOTIVATION:
When using an Ethereum Wallet (e.g. MetaMask, Clef, Hardware Wallets) users must accept and authorize signing messages or sending transactions. Due to the complexity of Ethereum transactions, wallets are very limitd in their ability to provide insight into the contents of transactions user are approving; outside special-cased support for

RATIONALE:
### Meta Description There have been many attempts to solve this problem, many of which attempt to examine the encoded transaction data or message data directly. In many cases, the information that would be necessary for a meaningful description is not present in the final encoded transaction data or


=== ERC-2770 ===
TITLE: Meta-Transactions Forwarder Contract
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-07-01
REQUIRES: 7, 1, 2, ,,  , 2, 7, 7, 1

SUMMARY:
This proposal defines an external API of an extensible Forwarder whose responsibility is to validate transaction signatures on-chain and expose the signer to the destination contract, that is expected to accommodate all use-cases. The ERC-712 structure of the forwarding request can be extended allowing wallets to display readable data

SPECIFICATION:
The Forwarder contract operates by accepting a signed typed data together with it's ERC-712 signature, performing signature verification of incoming data, appending the signer address to the data field and performing a call to the target. ### Forwarder data type registration Request struct MUST contain the following fields in

MOTIVATION:
There is a growing interest in making it possible for Ethereum contracts to accept calls from externally owned accounts that do not have ETH to pay for gas. This can be accomplished with meta-transactions, which are transactions that have been signed as plain data by one externally owned account

RATIONALE:
Further relying on `msg.sender` to authenticate end users by their externally-owned accounts is taking the Ethereum dapp ecosystem to a dead end. A need for users to own Ether before they can interact with any contract has made a huge portion of use-cases for smart contracts non-viable, which in


=== ERC-1080 ===
TITLE: Recoverable Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-02
REQUIRES: 

SUMMARY:
The following standard allows for the implementation of a standard API for tokens extending ERC-20 or ERC-791. This standard provides basic functionality to recover stolen or lost accounts, as well as provide for the chargeback of tokens.

MOTIVATION:
To mitigate the effects of reasonably provable token or asset loss or theft and to help resolve other conflicts. Ethereum's protocol should not be modified because of loss, theft, or conflicts, but it is possible to solve these problems in the smart contract layer.

RATIONALE:
* A recoverable token standard can provide configurable safety for users or contracts who desire this safety. * Implementations of this standard will give users the ability to select a dispute resolution process on an opt-in basis and benefit the community by decreasing the necessity of consideration of token


=== ERC-7506 ===
TITLE: Trusted Hint Registry
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-08-31
REQUIRES: 712

SUMMARY:
This EIP standardizes a system for managing on-chain metadata (hints), enabling claim interpretation, reliability, and verification. It structures these hints within defined namespaces and lists, enabling structured organization and retrieval, as well as permissioned write access. The system permits namespace owners to delegate hint management tasks, enhancing operational flexibility.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. This EIP specifies a contract called `TrustedHintRegistry` and standardizes a set of **REQUIRED** core hint functions, while also providing a

MOTIVATION:
In an increasingly interconnected and decentralized landscape, the formation of trust among entities remains a critical concern. Ecosystems, both on-chain and off-chain—spanning across businesses, social initiatives, and other organized frameworks—frequently issue claims for or about entities within their networks. These claims serve as the foundational elements of trust, facilitating

RATIONALE:
Examining the method signatures reveals a deliberate architecture and data hierarchy within this ERC: A namespace address maps to a hint list, which in turn maps to a hint key, which then reveals the hint value. ```solidity // namespace hint list hint key hint value mapping(address => mapping(bytes32 =>


=== ERC-5625 ===
TITLE: NFT Metadata JSON Schema dStorage Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-08
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP extends the NFT metadata JSON schema defined in [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md), adding a `dStorage` key that provides information about how the NFT data is stored.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. In addition to the existing properties, the Metadata JSON file returned by [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md) smart contracts (via `tokenURI` and

MOTIVATION:
As highly valuable crypto properties, NFT assets intrinsically demand guaranteed storage to assure their **immutability**, **reliability**, and **durability**. NFT ownership is tracked by [EIP-721](./eip-721.md) or [EIP-1155](./eip-1155.md) smart contracts, hence persisted in blockchain, which is not a problem. But how about the mime-type assets that NFT tokens represent? Ideally, they

RATIONALE:
### Choice between Interface and JSON Schema Extension An extension of the EIP-721 or EIP-1155 contract interfaces would unnecessarily require additional code to implement, and would not be available for use by NFT projects that already have their NFT smart contracts finalized and deployed. An optional JSON schema extension


=== ERC-205 ===
TITLE: ENS support for contract ABIs
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2017-02-06
REQUIRES: 1, 3, 7, ,,  , 1, 8, 1

SUMMARY:
ABIs are important metadata required for interacting with most contracts. At present, they are typically supplied out-of-band, which adds an additional burden to interacting with contracts, particularly on a one-off basis or where the ABI may be updated over time. The small size of ABIs permits an alternative solution,

SPECIFICATION:
### ABI encodings In order to allow for different tradeoffs between onchain size and accessibility, several ABI encodings are defined. Each ABI encoding is defined by a unique constant with only a single bit set, allowing for the specification of 256 unique encodings in a single uint. The currently

RATIONALE:
Storing ABIs onchain avoids the need to introduce additional dependencies for applications wishing to fetch them, such as swarm or HTTP access. Given the typical compactness of ABIs, we believe this is a worthwhile tradeoff in many cases. The two-step resolution process permits different names to provide different ABIs


=== ERC-7562 ===
TITLE: Account Abstraction Validation Scope Rules
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-01
REQUIRES: 

SUMMARY:
This document describes the rules we impose on the validation context of Account Abstraction transactions, such as [ERC-4337](./eip-4337) `UserOperation` or RIP-7560 (Native Account Abstraction), which are enforced off-chain by a block builder or a standalone bundler, and the rationale behind each one of them.

SPECIFICATION:
### Rule Types There are two types of rules: - **Network-wide rules** rules that MUST be applied to each UserOperation before accepting it into the local mempool and propagating it. These rules include the opcode and storage rules. - Failing these validation rules SHOULD drop the UserOperation - Failing

MOTIVATION:
With Account-Abstraction, instead of hard-coded logic for processing a transaction (validation, gas-payment, and execution), this logic is executed by EVM code. The benefits for the account are countless - - abstracting the validation allows the contract to use different signature schemes, multisig configuration, custom recovery, and more. - abstracting

RATIONALE:
All transactions initiated by EOAs have an implicit validation phase where balance, nonce, and signature are checked to be valid for the current state of the Ethereum blockchain. Once the transaction is checked to be valid by a node, only another transaction by the same EOA can modify the


=== ERC-6059 ===
TITLE: Parent-Governed Nestable Non-Fungible Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-11-15
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The Parent-Governed Nestable NFT standard extends [ERC-721](./eip-721.md) by allowing for a new inter-NFT relationship and interaction. At its core, the idea behind the proposal is simple: the owner of an NFT does not have to be an Externally Owned Account (EOA) or a smart contract, it can also be

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity /// @title EIP-6059 Parent-Governed Nestable Non-Fungible Tokens /// @dev See https://eips.ethereum.org/EIPS/eip-6059 /// @dev Note: the ERC-165 identifier for this

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time to standardize additional utility for them. Having the ability for tokens to own other tokens allows for greater utility, usability and forward compatibility. In the

RATIONALE:
Designing the proposal, we considered the following questions: 1. **How to name the proposal?**\ In an effort to provide as much information about the proposal we identified the most important aspect of the proposal; the parent centered control over nesting. The child token's role is only to be able


=== ERC-1462 ===
TITLE: Base Security Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-10-01
REQUIRES: 2, 0, ,,  , 1, 0, 6, 6

SUMMARY:
This EIP defines a minimal set of additions to the default token standard such as [ERC-20](./eip-20.md), that allows for compliance with domestic and international legal requirements. Such requirements include KYC (Know Your Customer) and AML (Anti Money Laundering) regulations, and the ability to lock tokens for an account, and

SPECIFICATION:
The ERC-20 token provides the following basic features: ```solidity contract ERC20 { function totalSupply() public view returns (uint256); function balanceOf(address who) public view returns (uint256); function transfer(address to, uint256 value) public returns (bool); function allowance(address owner, address spender) public view returns (uint256); function transferFrom(address from, address to, uint256 value)

MOTIVATION:
There are several security token standards that have been proposed recently. Examples include [ERC-1400](https://github.com/ethereum/EIPs/issues/1411), also [ERC-1450](https://eips.ethereum.org/EIPS/eip-1450). We have concerns about each of them, mostly because the scope of each of these EIPs contains many project-specific or market-specific details. Since many EIPs are coming from the respective backing companies, they

RATIONALE:
This EIP targets both ERC-20 and ERC-777 based tokens, although the most emphasis is given to ERC-20 due to its widespread adoption. However, this extension is designed to be compatible with the forthcoming ERC-777 standard, as well. All checking functions are named with prefixes `check` since they return check


=== ERC-6735 ===
TITLE: L2 Aliasing of EVM-based Addresses
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-03-20
REQUIRES: 55

SUMMARY:
The document describes the minimal set of business and technical prerequisites, functional and non-functional requirements for Aliasing of EVM based Addresses that when implemented ensures that two or more Layer 1, Layer 2, or Sidechains can identify and translate EVM based addresses from different Layer 1, Layer 2, or

SPECIFICATION:
### Typographical Convention: Requirement Ids A requirement is uniquely identified by a unique ID composed of its requirement level followed by a requirement number, as per convention **[RequirementLevelRequirementNumber]**. There are four requirement levels that are coded in requirement ids as per below convention: **[R]** - The requirement level for

MOTIVATION:
The members of the L2 WG of the EEA Communities Project managed by OASIS have recognized that the ability to deterministically derive addresses of a digital asset or an externally owned account (EOA) in EVM based execution frameworks for L1s, L2s, Sidechains based on an origin chain of an

RATIONALE:
The standard follows an already existing approach for address aliasing from Ethereum (L1) to EVM-based L2s such as Arbitrum and Optimism and between L2s, and extends and generalizes it to allow aliasing across any type of EVM-based network irrespective of the network type -- L1, L2 or higher layer


=== ERC-3770 ===
TITLE: Chain-specific addresses
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2021-08-26
REQUIRES: 

SUMMARY:
[ERC-3770](./eip-3770.md) introduces a new address standard to be adapted by wallets and dApps to display chain-specific addresses by using a human-readable prefix.

SPECIFICATION:
This proposal extends addresses with a human-readable blockchain short name. ### Syntax A chain-specific address is prefixed with a chain shortName, separated with a colon sign (:). Chain-specific address = "`shortName`" "`:`" "`address`" - `shortName` = STRING - `address` = STRING ### Semantics * `shortName` is mandatory and MUST

MOTIVATION:
The need for this proposal emerges from the increasing adoption of non-Ethereum Mainnet chains that use the Ethereum Virtual Machine (EVM). In this context, addresses become ambiguous, as the same address may refer to an EOA on chain X or a smart contract on chain Y. This will eventually

RATIONALE:
To solve the initial problem of user-facing addresses being ambiguous in a multichain context, we need to map EIP-155 chain IDs with a user-facing format of displaying chain identifiers.


=== ERC-4519 ===
TITLE: Non-Fungible Tokens Tied to Physical Assets
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2021-12-03
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This EIP standardizes an interface for non-fungible tokens representing physical assets, such as Internet of Things (IoT) devices. These NFTs are tied to physical assets and can verify the authenticity of the tie. They can include an Ethereum address of the physical asset, permitting physical assets to sign messages

SPECIFICATION:
The attributes `addressAsset` and `addressUser` are, respectively, the Ethereum addresses of the physical asset and the user. They are optional attributes but at least one of them should be used in an NFT. In the case of using only the attribute `addressUser`, two states define if the token is

MOTIVATION:
This standard was developed because [EIP-721](./eip-721.md) only tracks ownership (not usage rights) and does not track the Ethereum addresses of the asset. The popularity of smart assets, such as IoT devices, is increasing. To permit secure and traceable management, these NFTs can be used to establish secure communication channels

RATIONALE:
### Authentication This EIP uses smart contracts to verify the mutual authentication process since smart contracts are trustless. ### Tie Time This EIP proposes including the attribute timestamp (to register in Ethereum the last time that the physical asset checked the tie with its token) and the attribute timeout


=== ERC-6357 ===
TITLE: Single-contract Multi-delegatecall
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2023-01-18
REQUIRES: 

SUMMARY:
This EIP standardizes an interface containing a single function, `multicall`, allowing EOAs to call multiple functions of a smart contract in a single transaction, and revert all calls if any call fails.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Contracts implementing this EIP must implement the following interface: ```solidity pragma solidity ^0.8.0; interface IMulticall

MOTIVATION:
Currently, in order to transfer several [ERC-721](./eip-721.md) NFTs, one needs to submit a number of transactions equal to the number of NFTs being tranferred. This wastes users' funds by requiring them to pay 21000 gas fee for every NFT they transfer.

RATIONALE:
`multicallPayable` is optional because it isn't always feasible to implement, due to the `msg.value` splitting.


=== ERC-7820 ===
TITLE: Access Control Registry
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2024-11-19
REQUIRES: 

SUMMARY:
The Access Control Registry (ACR) standard defines a universal interface for managing role-based access control across multiple smart contracts. This standard introduces a centralized registry system allowing access control management for multiple smart contracts. The single access-control registry smart contract manages the user roles across multiple contracts, and can

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119 and RFC 8174. The `AccessControlRegistry` contract provides a standardized interface for managing access control in Ethereum smart contracts.

MOTIVATION:
As decentralized applications (dApps) grow in complexity, managing access control across multiple smart contracts becomes increasingly difficult. Current practices involve bespoke implementations, leading to redundancy and potential security flaws. A standardized approach for managing roles and permissions will ensure better interoperability, security, and transparency. By providing a unified interface

RATIONALE:
The `IAccessControlRegistry` interface aims to provide a standardized way to manage access control across multiple contracts within the ecosystem. By defining a clear structure and set of events, this interface helps streamline the process of registering, unregistering, and managing roles for contracts. The rationale for each function and event


=== ERC-7589 ===
TITLE: Semi-Fungible Token Roles
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-28
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This standard introduces role management for SFTs (Semi-Fungible Tokens). Each role assignment is granted to a single user (grantee) and expires automatically. Roles are defined as `bytes32` and feature a custom `_data` field of arbitrary size to allow customization.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Compliant contracts MUST implement the following interface: ```solidity /// @title ERC-7589 Semi-Fungible Token Roles /// @dev

MOTIVATION:
[ERC-1155](./eip-1155.md) has significantly contributed to the tokenization capabilities of Ethereum by enabling developers to create fungible and non-fungible tokens with a single contract. While [ERC-1155](./eip-1155.md) excels at tracking ownership, it focuses solely on token balances, overlooking the nuanced aspects of how these tokens can be utilized. An essential aspect

RATIONALE:
The concept of "token commitments" as an abstraction serves as a powerful tool for users looking to delegate the control of their SFTs. A token commitment represents either a frozen balance or tokens deposited into a contract, offering a standardized and secure way for SFT owners to delegate the


=== ERC-6808 ===
TITLE: Fungible Key Bound Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-03-31
REQUIRES: 20

SUMMARY:
A standard interface for Fungible Key Bound Tokens (**FKBT/s**), a subset of the more general Key Bound Tokens (**KBT/s**). The following standardizes an API for tokens within smart contracts and provides basic functionality to the [addBindings](#addbindings-function) function. This function designates **Key Wallets**[^1], which are responsible for conducting a **Safe

SPECIFICATION:
### `IKBT20` (Token Contract) **NOTES**: - The following specifications use syntax from Solidity `0.8.0` (or above) - Callers MUST handle `false` from `returns (bool success)`. Callers MUST NOT assume that `false` is never returned! ```solidity interface IKBT20 { event AccountSecured(address _account, uint256 _amount); event AccountResetBinding(address _account); event SafeFallbackActivated(address _account);

MOTIVATION:
In this fast-paced technologically advancing world, people learn and mature at different speeds. The goal of global adoption must take into consideration the target demographic is of all ages and backgrounds. Unfortunately for self-custodial assets, one of the greatest pros is also one of its greatest cons. The individual

RATIONALE:
The intent from individual technical decisions made during the development of **FKBTs** focused on maintaining consistency and backward compatibility with ERC-20s, all the while offering self-custodial security features to the user. It was important that **FKBT's** inherited all of ERC-20s characteristics to comply with requirements found in dApps which


=== ERC-2544 ===
TITLE: ENS Wildcard Resolution
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-02-28
REQUIRES: 137

SUMMARY:
The Ethereum Name Service Specification (EIP-137) establishes a two-step name resolution process. First, an ENS client performs the namehash algorithm on the name to determine the associated "node", and supplies that node to the ENS Registry contract to determine the resolver. Then, if a resolver has been set on

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Let: - `namehash` be the algorithm defined in EIP 137. - `dnsencode` be the process for encoding DNS names specified

MOTIVATION:
Many applications such as wallet providers, exchanges, and dapps have expressed a desire to issue ENS names for their users via custom subdomains on a shared parent domain. However, the cost of doing so is currently prohibitive for large user bases, as a distinct record must be set on

RATIONALE:
The proposed implementation supports wildcard resolution in a manner that minimizes the impact to existing systems. It also reuses existing algorithms and procedures to the greatest possible extent, thereby easing the burden placed on authors and maintainers of various ENS clients. It also recognizes an existing consensus concerning the


=== ERC-5559 ===
TITLE: Cross Chain Write Deferral Protocol
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-06-23
REQUIRES: 712

SUMMARY:
The following standard provides a mechanism in which smart contracts can request various tasks to be resolved by an external handler. This provides a mechanism in which protocols can reduce the gas fees associated with storing data on mainnet by deferring the handling of it to another system/network. These

SPECIFICATION:
### Overview There are two main handler classifications: L2 Contract and Off-Chain Database. These are determined based off of where the handler is deployed. The handler classifications are used to better define the different security guarantees and requirements associated with its deployment. From a high level: - Handlers hosted

MOTIVATION:
[EIP-3668](./eip-3668) provides a mechanism by which off-chain lookups can be defined inside smart contracts in a transparent manner. In addition, it provides a scheme in which the resolved data can be verified on-chain. However, there lacks a standard by which mutations can be requested through the native contract, to

RATIONALE:
### Use of `revert` to convey call information [EIP-3668](./eip-3668) adopted the idea of using a `revert` to convey call information. It was proposed as a simple mechanism in which any pre-existing interface or function signature could be satisfied while maintain a mechanism to instruct and trigger an off-chain lookup.


=== ERC-7517 ===
TITLE: Content Consent for AI/ML Data Mining
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-12
REQUIRES: 7, 2, 1, ,,  , 7, 0, 5, 3

SUMMARY:
This EIP proposes a standardized approach to declaring mining preferences for digital media content on the EVM-compatible blockchains. This extends digital media metadata standards like [ERC-7053](./eip-7053.md) and NFT metadata standards like [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md), allowing asset creators to specify how their assets are used in data mining, AI training,

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. This EIP introduces a new property, `dataMiningPreference`, to the metadata standards which signify the choices

MOTIVATION:
As digital assets become increasingly utilized in AI and machine learning workflows, it is critical that the rights and preferences of asset creators and license owners are respected, and the AI/ML creators can check and collect data easily and safely. Similar to robot.txt to websites, content owners and creators

RATIONALE:
The technical decisions behind this EIP have been carefully considered to address specific challenges and requirements in the digital asset landscape. Here are the clarifications for the rationale behind: 1. Adoption of JSON schema: The use of JSON facilitates ease of integration and interaction, both manually and programmatically, with


=== ERC-7720 ===
TITLE: Deferred Token Transfer
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-06-09
REQUIRES: 20

SUMMARY:
This standard specifies that allows users to deposit [ERC-20](./eip-20.md) tokens for a beneficiary. The beneficiary can withdraw the tokens only after a specified future timestamp. Each deposit transaction is assigned a unique ID and includes details such as the token address, sender, recipient, amount, unlock time, and withdrawal status.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Implementers of this standard **MUST** have all of the following functions: ```solidity pragma solidity ^0.8.0;

MOTIVATION:
In various scenarios, such as vesting schedules, escrow services, or timed rewards, there is a need for deferred payments. This contract provides a secure and reliable mechanism for time-locked token transfers, ensuring that tokens can only be transferred after a specified timestamp is reached. By facilitating structured and delayed

RATIONALE:
The design of the Deferred Token Transfer contract aims to provide a straightforward and secure method for handling time-locked token transfers. The following considerations were made during its development: **Unlock Time Precision with `uint40`**: We chose a full `uint40` for `_unlockTime` because it provides a sufficiently large range to


=== ERC-7588 ===
TITLE: Blob Transactions Metadata JSON Schema
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2024-01-01
REQUIRES: 4844

SUMMARY:
This EIP introduces a standard for attaching metadata to blobs carried by blob transactions, as outlined in [EIP-4844](./eip-4844.md). The metadata is represented as a JSON object adhering to a predefined schema, and its string representation is placed in the data field of the blob transaction.

SPECIFICATION:
### Metadata JSON Schema The metadata is represented as a JSON object adhering to the following JSON Schema: ```json { "title": "Blobs Metadata", "type": "object", "properties": { "originator": { "type": "string", "description": "Identifies the originator of the carried blobs" }, "description": { "type": "string", "description": "Describes the contents of

MOTIVATION:
[EIP-4844](./eip-4844.md) defines a new type of transaction known as a “blob transaction.” These transactions contain a list of blobs along with their KZG commitments and proofs. Blob transactions serve as a mechanism for rollups to post their layer 2 transaction data to Ethereum layer 1. While rollups typically manage

RATIONALE:
In the Ethereum ecosystem, various types of transactions exist, each serving different purposes. The usage of the data field within these transactions varies: - **Regular Funds Transfer Transactions**: In these transactions, the data field is typically not used, and users may optionally include arbitrary data. - **Smart Contract Deployment


=== ERC-1948 ===
TITLE: Non-fungible Data Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-04-18
REQUIRES: 721

SUMMARY:
Non-fungible tokens (NFTs) are extended with the ability to store dynamic data. A 32 bytes data field is added and a read function allows to access it. The write function allows to update it, if the caller is the owner of the token. An event is emitted every time

SPECIFICATION:
An extension of [ERC-721](./eip-721.md) interface with the following functions and events is suggested: ``` solidity pragma solidity ^0.5.2; /** * @dev Interface of the ERC1948 contract. */ interface IERC1948 { /** * @dev Emitted when `oldData` is replaced with `newData` in storage of `tokenId`. * * Note that `oldData`

MOTIVATION:
The proposal is made to standardize on tokens with dynamic data. Interactions with bridges for side-chains like xDAI or Plasma chains will profit from the ability to use such tokens. Protocols that build on data tokens like [distributed breeding](https://ethresear.ch/t/a-distributed-breeding-function/5264) will be enabled.

RATIONALE:
The suggested data field in the NFT is used either for storing data directly, like a counter or address. If more data is required the implementer should fall back to authenticated data structures, like merkle- or patricia-trees. The proposal for this ERC stems from the [distributed breeding proposal](https://ethresear.ch/t/a-distributed-breeding-function/5264) to


=== ERC-5573 ===
TITLE: Sign-In with Ethereum Capabilities, ReCaps
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2021-07-20
REQUIRES: 4361

SUMMARY:
[ERC-4361](./eip-4361.md), or Sign-In with Ethereum (SIWE), describes how Ethereum accounts authenticate with off-chain services. This proposal, known as ReCaps, describes a mechanism on top of SIWE to give informed consent to authorize a Relying Party to exercise certain scoped capabilities. How a Relying Party authenticates against the target resource

SPECIFICATION:
This specification has three different audiences: - Web3 application developers that want to integrate ReCaps to authenticate with any protocols and APIs that support object capabilities. - Protocol or API developers that want to learn how to define their own ReCaps. - Wallet implementers that want to improve the

MOTIVATION:
SIWE ReCaps unlock integration of protocols and/or APIs for developers by reducing user friction, onchain state and increasing security by introducing informed consent and deterministic capability objects on top of Sign-In With Ethereum (ERC-4361). While SIWE focuses on authenticating the Ethereum account against the service (relying party or SIWE

RATIONALE:
TBD


=== ERC-3525 ===
TITLE: Semi-Fungible Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-12-01
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This is a standard for semi-fungible tokens. The set of smart contract interfaces described in this document defines an [ERC-721](./eip-721.md) compatible token standard. This standard introduces an `<ID, SLOT, VALUE>` triple scalar model that represents the semi-fungible structure of a token. It also introduces new transfer models as well

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. **Every [ERC-3525](./eip-3525.md) compliant contract must implement the ERC-3525, ERC-721 and [ERC-165](./eip-165.md) interfaces** ```solidity pragma solidity ^0.8.0; /** * @title ERC-3525 Semi-Fungible

MOTIVATION:
Tokenization is one of the most important trends by which to use and control digital assets in crypto. Traditionally, there have been two approaches to do so: fungible and non-fungible tokens. Fungible tokens generally use the ERC-20 standard, where every unit of an asset is identical to each other.

RATIONALE:
### Metadata generation This token standard is designed to represent semi-fungible assets, which are most suited for financial instruments rather than collectibles or in-game items. For maximum transparency and safety of digital assets, we strongly recommend that all implementations should generate metadata directly from contract code rather than giving


=== ERC-4886 ===
TITLE: Proxy Ownership Register
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-09-03
REQUIRES: 

SUMMARY:
A proxy protocol that allows users to nominate a proxy address to act on behalf of another wallet address, together with a delivery address for new assets. Smart contracts and applications making use of the protocol can take a proxy address and lookup holding information for the nominator address.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Definitions * Delivery address: The address that assets will be delivered to for the current Proxy Record, i.e. a

MOTIVATION:
To make full use of Ethereum users often need to prove their ownership of existing assets. For example: * Discord communities require users to sign a message with their wallet to prove they hold the tokens or NFTs of that community. * Whitelist events (for example recent airdrops, or

RATIONALE:
The rationale for this EIP was to provide a way for all existing and future Ethereum assets to be have a 'beneficial owner' (the proxy) that is different to the address custodying the asset. The use of a register to achieve this ensures that changes to existing tokens are


=== ERC-7621 ===
TITLE: Basket Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-11
REQUIRES: 2, 0, ,,  , 7, 2, 1

SUMMARY:
The Basket Token Standard (BTS) allows for the implementation of multi-asset tokenized funds. This standard provides basic functionality for anyone to deploy unique, non-fungible BTS tokens that can contain an unlimited number of underlying [ERC-20](./eip-20.md) tokens. The deployer receives a BTS token representative of their ownership of the fund,

SPECIFICATION:
### BTS BTS is a smart contract enabling the creation of on-chain tokenized funds backed by assets, allowing users to manage assets and liquidity through functions like initialization, contribution, withdrawal, rebalancing, and token distribution. #### Purpose The purpose of the BTS is to allow anyone to build an on-chain

MOTIVATION:
The motivation is to provide infrastructure that will enable the on-chain creation and management of asset-backed tokenized investment funds as no such standardized infrastructure curently exists. Providing the necessary infrastructure will help facilitate the onboarding of traditional fund management onto blockchain. No existing standard is capable of achieving this

RATIONALE:
<!-- TODO -->


=== ERC-7509 ===
TITLE: Entity Component System
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-05
REQUIRES: 

SUMMARY:
This proposal defines a minimal Entity Component System (ECS). Entities are unique identities that are assigned to multiple components (data) and then processed using the system (logic). This proposal standardizes the interface specification for using ECS in smart contracts, providing a set of basic functions that allow users to

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. World contracts are containers for entities, component contracts, and system contracts. Its core principle is

RATIONALE:
### Why include type information instead of simple byte arrays? This is to ensure the correctness of types when using components, in order to avoid potential errors and inconsistencies. External developers can clearly set and get based on the type. ### Why differentiate between a non-existent entity and an


=== ERC-1271 ===
TITLE: Standard Signature Validation Method for Contracts
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-07-25
REQUIRES: 

SUMMARY:
Externally Owned Accounts (EOA) can sign messages with their associated private keys, but currently contracts cannot. We propose a standard way for any contracts to verify whether a signature on a behalf of a given contract is valid. This is possible via the implementation of a `isValidSignature(hash, signature)` function

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC 2119](https://www.ietf.org/rfc/rfc2119.txt). ```javascript pragma solidity ^0.5.0; contract ERC1271 { // bytes4(keccak256("isValidSignature(bytes32,bytes)") bytes4 constant internal MAGICVALUE = 0x1626ba7e; /** * @dev Should return

MOTIVATION:
There are and will be many contracts that want to utilize signed messages for validation of rights-to-move assets or other purposes. In order for these contracts to be able to support non Externally Owned Accounts (i.e., contract owners), we need a standard mechanism by which a contract can indicate

RATIONALE:
We believe the name of the proposed function to be appropriate considering that an *authorized* signers providing proper signatures for a given data would see their signature as "valid" by the signing contract. Hence, a signed action message is only valid when the signer is authorized to perform a


=== ERC-1417 ===
TITLE: Poll Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-16
REQUIRES: 1, 6, 5, ,,  , 1, 2, 6, 1

SUMMARY:
The following standard allows for the implementation of a standard API for polls to be used with MVTs (refer [EIP-1261](./eip-1261.md)). The standard provides basic functionality to vote, unvote, tally votes, get voter turnout, and a lot more. The poll standard attempts to modularize blockchain voting by breaking down a

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. **Every ERC-1417 compliant contract must implement the `ERC1417` and `ERC165` interfaces** (subject to "caveats" below): ```solidity /// @title ERC-1417 Poll

MOTIVATION:
A standard interface allows any user or applications to work with any Poll contract on Ethereum. We provide for simple ERC-1417 smart contracts. Additional applications are discussed below. This standard is inspired by the lack of governance tools in the blockchain space. Whenever there is a consensus collection exercise,

RATIONALE:
As the poll standard is built with the intention of creating a system that allows for more transparency and accessibility of governance data, the design choices in the poll standard are driven by this motivator. In this section we go over some of the major design choices, and why


=== ERC-7649 ===
TITLE: Bonding curve-embedded liquidity for NFTs
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-28
REQUIRES: 721

SUMMARY:
This proposal introduces a standard for embedding Bonding Curve-like liquidity into Non-Fungible Tokens (NFTs) without modifying the [ERC-721](./eip-721.md) standard. The proposed standard allows the attachment of an embedded liquidity contract, referred to as Tradable Shares, to an ERC-721 NFT. Tradable Shares leverage a Bonding Curve-like approach to attract liquidity,

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. 1. Bonding Curve-Embedded Liquidity / Tradable Shares: - An embedded bonding curve-based liquidity SHOULD be

MOTIVATION:
The ERC-721 standard lacks a specific mechanism for embedding bonding curve-based liquidity, limiting the creative possibilities for NFT-based projects. This EIP addresses the need for a standardized approach to integrate bonding curve contracts seamlessly into ERC-721 NFTs, allowing for diverse and innovative implementations without modifying the ERC-721 standard. The

RATIONALE:
The rationale behind the design choices for the embedded liquidity standard is deeply rooted in providing a robust and versatile framework for embedding Bonding Curve-like liquidity into NFTs. The following key considerations have influenced the technical decisions: 1. **Bonding Curve-Embedded Liquidity / Tradable Shares Contract**: - **Seamless Integration**: The


=== ERC-2771 ===
TITLE: Secure Protocol for Native Meta Transactions
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-07-01
REQUIRES: 

SUMMARY:
This EIP defines a contract-level protocol for `Recipient` contracts to accept meta-transactions through trusted `Forwarder` contracts. No protocol changes are made. `Recipient` contracts are sent the effective `msg.sender` (referred to as `_msgSender()`) and `msg.data` (referred to as `_msgData()`) by appending additional calldata.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### Definitions **Transaction Signer**: Signs & sends transactions to a Gas Relay **Gas Relay**: Receives signed requests off-chain from Transaction Signers

MOTIVATION:
There is a growing interest in making it possible for Ethereum contracts to accept calls from externally owned accounts that do not have ETH to pay for gas. Solutions that allow for third parties to pay for gas costs are called meta transactions. For the purposes of this EIP,

RATIONALE:
* Make it easy for contract developers to add support for meta transactions by standardizing the simplest viable contract interface. * Without support for meta transactions in the recipient contract, an externally owned account can not use meta transactions to interact with the recipient contract. * Without a standard


=== ERC-7780 ===
TITLE: Validation Module Extension for ERC-7579
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-01
REQUIRES: 7579

SUMMARY:
This proposal introduces three new module types on top of the existing modules described in [ERC-7579](./eip-7579). The modules are policy, signer and stateless validator. None of these modules are required to be implemented by accounts, but accounts can choose to implement them or other modules can choose to make

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. This standard introduces three new module types on top of the existing modules introduced by

MOTIVATION:
The modules introduced by this proposal aim to create more composability around signature and permission verification. Policy and signer modules allow an account to make direct use of such a permissioning logic rather than relying on external modules to handle this. This has the upside of lower gas cost

RATIONALE:
TBD <!-- TODO -->


=== ERC-3234 ===
TITLE: Batch Flash Loans
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-01-31
REQUIRES: 

SPECIFICATION:
A batch flash lending feature integrates two smart contracts using a callback pattern. These are called the LENDER and the RECEIVER in this EIP. ### Lender Specification A `lender` MUST implement the IERC3234BatchFlashLender interface. ``` pragma solidity ^0.7.0 || ^0.8.0; import "./IERC3234BatchFlashBorrower.sol"; interface IERC3234BatchFlashLender { /** * @dev The

MOTIVATION:
Flash loans of multiple assets, or batch flash loans, are a common offering of flash lenders, and have a strong use case in the simultaneous refinance of several positions between platforms. At the same time, batch flash loans are more complicated to use than single asset flash loans (ER3156).

RATIONALE:
The interfaces described in this ERC have been chosen as to cover the known flash lending use cases, while allowing for safe and gas efficient implementations. `flashFee` reverts on unsupported tokens, because returning a numerical value would be incorrect. `batchFlashLoan` has been chosen as a function name as descriptive


=== ERC-4521 ===
TITLE: 721/20-compatible transfer
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-12-13
REQUIRES: 721

SUMMARY:
ERC-721, the popular standard for non-fungible tokens (NFTs), includes send functions, such as `transferFrom()` and `safeTransferFrom()`, but does not include a backwards-compatible `transfer()` found in fungible ERC-20 tokens. This standard provides references to add such a `transfer()`.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. The interface for ERC-4521 `transfer()` MUST conform to ERC-20 and resulting transfers MUST fire the `Transfer` event as described in

MOTIVATION:
This standard proposes a simple extension to allow NFTs to work with contracts designed to manage ERC-20s and many consumer wallets which expect to be able to execute a token `transfer()`. For example, if an NFT is inadvertently sent to a contract that typically handles ERC-20, that NFT will

RATIONALE:
Replicating ERC-20 `transfer()` with just a minor change to accurately reflect that a unique `tokenId` rather than fungible sum is being sent is desirable for code simplicity and to make integration easier.


=== ERC-5202 ===
TITLE: Blueprint contract format
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-06-23
REQUIRES: 170

SUMMARY:
Define a standard for "blueprint" contracts, or contracts which represent initcode that is stored on-chain.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. A blueprint contract MUST use the preamble `0xFE71<version bits><length encoding bits>`. 6 bits are allocated to the version, and 2

MOTIVATION:
To decrease deployer contract size, a useful pattern is to store initcode on chain as a "blueprint" contract, and then use `EXTCODECOPY` to copy the initcode into memory, followed by a call to `CREATE` or `CREATE2`. However, this comes with the following problems: - It is hard for external

RATIONALE:
- To save gas and storage space, the preamble should be as minimal as possible. - It is considered "bad" behavior to try to CALL a blueprint contract directly, therefore the preamble starts with `INVALID (0xfe)` to end execution with an exceptional halting condition (rather than a "gentler" opcode


=== ERC-1081 ===
TITLE: Standard Bounties
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-14
REQUIRES: 20

SUMMARY:
In order to encourage cross-platform interoperability of bounties on Ethereum, and for easier reputational tracking, StandardBounties can facilitate the administration of funds in exchange for deliverables corresponding to a completed task, in a publicly auditable and immutable fashion.

SPECIFICATION:
After studying bounties as they've existed for thousands of years (and after implementing and processing over 300 of them on main-net in beta), we've discovered that there are 3 core steps to every bounty: - a bounty is **issued**: an `issuer` specifies the requirements for the task, describing the

MOTIVATION:
In the absence of a standard for bounties on Ethereum, it would be difficult for platforms to collaborate and share the bounties which users create (thereby recreating the walled gardens which currently exist on Web2.0 task outsourcing platforms). A standardization of these interactions across task types also makes it

RATIONALE:
The development of this standard began a year ago, with the goal of encouraging interoperability among bounty implementations on Ethereum. The initial version had significantly more restrictions: a bounty's `data` could not be changed after issuance (it seemed unfair for bounty `issuer`s to change the requirements after work is


=== ERC-7405 ===
TITLE: Portable Smart Contract Accounts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-26
REQUIRES: 1, 9, 1, ,,  , 1, 9, 6, 7

SUMMARY:
Portable Smart Contract Accounts (PSCA) address the lack of portability and compatibility faced by Smart Contract Accounts (SCA) across different wallet providers. Based on [ERC-1967](./eip-1967.md), the PSCA system allows users to easily migrate their SCAs between different wallets using new, randomly generated migration keys. This provides a similar experience

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Terms - Wallet Provider: A service provider that offers wallet services. SCA implementations among wallet providers are typically different,

MOTIVATION:
With the introduction of the [ERC-4337](./eip-4337.md) standard, AA related infrastructure and SCAs have been widely adopted in the community. However, unlike EOAs, SCAs have a more diverse code space, leading to varying contract implementations across different wallet providers. Consequently, the lack of portability for SCAs has become a significant

RATIONALE:
The main challenge addressed by this EIP is the lack of portability in Smart Contract Accounts (SCAs). Currently, due to variations in SCA implementations across wallet providers, moving between wallets is a hassle. Proposing a modular approach, though beneficial in some respects, comes with its own costs and compatibility


=== ERC-2333 ===
TITLE: BLS12-381 Key Generation
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-09-30
REQUIRES: 

SUMMARY:
This standard is a method for deriving a tree-hierarchy of BLS12-381 keys based on an entropy seed. Starting with the aforementioned seed, a tree of keys is built out using only the parent node's private key and the index of the desired child. This allows for a practically limitless

SPECIFICATION:
### Version Due to the evolving BLS signatures CFRG draft (currently v4), the `KeyGen` function was updated, meaning that `hkdf_mod_r` no longer reflected what appeared in the BLS standard. This EIP was updated on the 17th of September 2020 to reflect this new method for deriving keys, **if you

MOTIVATION:
### Deficiencies of the existing mechanism The curve BLS12-381 used for BLS signatures within Ethereum 2.0 (alongside many other projects) mandates a new key derivation scheme. The most commonly used scheme for key derivation within Ethereum 1.x is [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) (also known as HD derivation) which deems keys greater than

RATIONALE:
### Lamport signatures Lamport signatures are used as the backup mechanism because of their relative simplicity for a post-quantum signature scheme. Lamport signatures are very easy both to explain and implement as the sole cryptographic dependency is a secure hash function. This is important as it minimises the complexity


=== ERC-2615 ===
TITLE: Non-Fungible Token with mortgage and rental functions
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-04-25
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of ERC721. It proposes additional roles, the right of tenants to enable rentals, and the right of lien. With ERC2615, NFT owners will be able to rent out their NFTs and take out a mortgage by collateralizing their NFTs. For example, this standard can

SPECIFICATION:
This standard proposes three user roles: the **Lien Holder**, the **Owner**, and the **User**. Their rights are as follows: - A **Lien Holder** has the right to: 1. Transfer the **Owner** role 2. Transfer the **User** role - An **Owner** has the right to: 1. Transfer the **Owner** role

MOTIVATION:
It has been challenging to implement rental and mortgage functions with the ERC721 standard because it only has one role defined (which is the Owner). Currently, a security deposit is needed for trustless renting with ERC721, and ownership lockup within a contract is necessary whenever one chooses to mortgage

RATIONALE:
There have been some attempts to achieve rentals or mortgages with ERC721. However, as I noted before, it has been challenging to achieve. I will explain the reasons and advantages of this standard below. ### No security lockup for rentals To achieve trustless rental of NFTs with ERC721, it


=== ERC-1822 ===
TITLE: Universal Upgradeable Proxy Standard (UUPS)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-03-04
REQUIRES: 

SUMMARY:
The following describes a standard for proxy contracts which is universally compatible with all contracts, and does not create incompatibility between the proxy and business-logic contracts. This is achieved by utilizing a unique storage position in the proxy contract to store the Logic Contract's address. A compatibility check ensures

SPECIFICATION:
The Proxy Contract proposed here should be deployed _as is_, and used as a drop-in replacement for any existing methods of lifecycle management of contracts. In addition to the Proxy Contract, we propose the Proxiable Contract interface/base which establishes a pattern for the upgrade which does not interfere with

MOTIVATION:
- Improve upon existing proxy implementations to improve developer experience for deploying and maintaining Proxy and Logic Contracts. - Standardize and improve the methods for verifying the bytecode used by the Proxy Contract.


=== ERC-681 ===
TITLE: URL Format for Transaction Requests
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2017-08-01
REQUIRES: 2, 0, ,,  , 1, 3, 7

SUMMARY:
URLs embedded in QR-codes, hyperlinks in web-pages, emails or chat messages provide for robust cross-application signaling between very loosely coupled applications. A standardized URL format for payment requests allows for instant invocation of the user's preferred wallet application (even if it is a webapp or a swarm đapp), with

SPECIFICATION:
### Syntax Payment request URLs contain "ethereum" in their schema (protocol) part and are constructed as follows: request = schema_prefix target_address [ "@" chain_id ] [ "/" function_name ] [ "?" parameters ] schema_prefix = "ethereum" ":" [ "pay-" ] target_address = ethereum_address chain_id = 1*DIGIT function_name = STRING

MOTIVATION:
The convenience of representing payment requests by standard URLs has been a major factor in the wide adoption of Bitcoin. Bringing a similarly convenient mechanism to Ethereum would speed up its acceptance as a payment platform among end-users. In particular, URLs embedded in broadcast Intents are the preferred way

RATIONALE:
The proposed format is chosen to resemble `bitcoin:` URLs as closely as possible, as both users and application programmers are already familiar with that format. In particular, this motivated the omission of the unit, which is often used in Ethereum ecosystem. Handling different orders of magnitude is facilitated by


=== ERC-4804 ===
TITLE: Web3 URL to EVM Call Message Translation
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-02-14
REQUIRES: 137

SUMMARY:
This standard translates an RFC 2396 URI like `web3://uniswap.eth/` to an EVM message such as: ``` EVMMessage { To: 0xaabbccddee.... // where uniswap.eth's address registered at ENS Calldata: 0x ... } ```

SPECIFICATION:
This specification only defines read-only (i.e. Solidity's `view` functions) semantics. State modifying functions may be defined as a future extension. A Web3 URL is in the following form ``` web3URL = web3Schema [userinfo "@"] contractName [":" chainid] path ["?" query] web3Schema = [ "ethereum-web3://" | "eth-web3://" | "web3://" ]

MOTIVATION:
Currently, reading data from Web3 generally relies on a translation done by a Web2 proxy to Web3 blockchain. The translation is mostly done by the proxies such as dApp websites/node service provider/etherscan, which are out of the control of users. The standard here aims to provide a simple way

RATIONALE:
The purpose of the proposal is to add a decentralized presentation layer for Ethereum. With the layer, we are able to render any web content (including HTML/CSS/JPG/PNG/SVG, etc) on-chain using human-readable URLs, and thus EVM can be served as decentralized Backend. The design of the standard is based on


=== ERC-6327 ===
TITLE: Elastic Signature
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-01-13
REQUIRES: 

SUMMARY:
Elastic signature (ES) aims to sign data with a human friendly secret. The secret will be verified fully on-chain and is not stored anywhere. A user can change the secret as often as they need to. The secret does not have a fixed length. The secret will be like

SPECIFICATION:
Let: - `pwdhash` represents the hash of the private secret (password). - `datahash` represents the hash of an intended transaction data. - `fullhash` represents the hash of `datahash` and all the well-known variables. - `expiration` is the timestamp after which the intended transaction expires. - `allhash` represents the hash

MOTIVATION:
What would a changeable "private key" enable us? For years, we have been looking for ways to lower on-boarding barrier for users, especially those with less technical experiences. Private key custody solutions seem to provide an user friendly on-boarding experience, but it is vendor dependent and is not decentralized.

RATIONALE:
The contract will store everyone's `pwdhash`. ![verifier-contract](../assets/eip-6327/zkpass-1.png) The chart below shows ZK circuit logic. ![circuit-logic](../assets/eip-6327/zkpass-2.png) To verify the signature, it needs `proof`, `allhash`, `pwdhash` and `fullhash`. ![workflow](../assets/eip-6327/zkpass-3.png) The prover generates `proof` along with the public outputs. They will send all of them to a third-party requester contract. The requester


=== ERC-6734 ===
TITLE: L2 Token List
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-03-20
REQUIRES: 155

SUMMARY:
The document describes a JSON token list that ensures that two or more Layer 1, Layer 2, or Sidechains can identify tokens from a different Layer 1, Layer 2, or Sidechain.

SPECIFICATION:
### Keywords: The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [[RFC2119](https://www.rfc-editor.org/rfc/rfc2119)] when, and only when, they appear in all capitals, as shown here. ### Typographical Convention: Requirement Ids A

MOTIVATION:
This particular work by the L2 WG of the EEA Communities Projects managed by OASIS, an open-source initiative, is motivated by a significant challenge around the definition and listing of tokens on Layer 1 (L1), Layer 2 (L2), and Sidechain systems. Note that for simplicity, this document we will

RATIONALE:
This specification is extending and clarifying current custom lists such as from Arbitrum and Optimism as referenced in the [Motivation](#motivation) or the Uniswap Tokenlist Project to improve clarity, security and encourage adoption by non-Web3 native entities. The specification is utilizing the current JSON-LD standard to describe a token list


=== ERC-6786 ===
TITLE: Registry for royalties payment for NFTs
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-27
REQUIRES: 1, 6, 5, ,,  , 2, 9, 8, 1

SUMMARY:
This standard allows anyone to pay royalties for a certain NFT and also to keep track of the royalties amount paid. It will cumulate the value each time a payment is executed through it and make the information public.

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Every contract compliant with [ERC-6786](./eip-6786.md) MUST implement the interface defined as follows: ### Contract Interface ```solidity // @title Royalty Debt Registry

MOTIVATION:
There are many marketplaces which do not enforce any royalty payment to the NFT creator every time the NFT is sold or re-sold and/or providing a way for doing it. There are some marketplaces which use specific system of royalties, however that system is applicable for the NFTs creates

RATIONALE:
The payment can be made in native coins, so it is easy to aggregate the amount of paid royalties. We want this information to be public, so anyone could tell if a creator received royalties in case of under the table trading or in case of marketplaces which don’t


=== ERC-165 ===
TITLE: Standard Interface Detection
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-01-23
REQUIRES: 214

SUMMARY:
Herein, we standardize the following: 1. How interfaces are identified 2. How a contract will publish the interfaces it implements 3. How to detect if a contract implements ERC-165 4. How to detect if a contract implements any given interface

SPECIFICATION:
### How Interfaces are Identified For this standard, an *interface* is a set of [function selectors as defined by the Ethereum ABI](https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector). This a subset of [Solidity's concept of interfaces](https://solidity.readthedocs.io/en/develop/abi-spec.html) and the `interface` keyword definition which also defines return types, mutability and events. We define the interface identifier as

MOTIVATION:
For some "standard interfaces" like [the ERC-20 token interface](./eip-20.md), it is sometimes useful to query whether a contract supports the interface and if yes, which version of the interface, in order to adapt the way in which the contract is to be interacted with. Specifically for ERC-20, a version

RATIONALE:
We tried to keep this specification as simple as possible. This implementation is also compatible with the current Solidity version.


=== ERC-7787 ===
TITLE: Soulbound Degradable Governance
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-15
REQUIRES: 20

SUMMARY:
This proposal introduces the Soulbound Degradable Governance (SDG) standard, where governance power should be granted as non-transferable tokens that decay over time unless renewed through participation. SDG enables young DAOs to implement merit-based governance by detaching governance power from economic power while on early stages of development.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. This system MUST operate with two distinct tokens types, one representing **political power** and another

MOTIVATION:
Traditional DAO governance models rely heavily on economic tokens, where voting power is proportional to token holdings. While effective for some use cases, this model risks concentrating power among wealthy members, leading to plutocracy and discouraging participation from smaller stakeholders. Furthermore, it fosters a treasury-centric culture that attracts contributors

RATIONALE:
The SDG standard ensures flexibility by not being tied to any specific token type, allowing DAOs to implement it with [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), [ERC-1155](./eip-1155.md), or other future token standards. This decision maximizes the compatibility and adaptability of the framework across different governance models. The choice to **decouple governance power from


=== ERC-902 ===
TITLE: Token Validation
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-02-14
REQUIRES: 1066


=== ERC-6785 ===
TITLE: ERC-721 Utilities Information Extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-27
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This specification defines standard functions and an extension of the metadata schema that outlines what a token's utility entails and how the utility may be used and/or accessed. This specification is an optional extension of [ERC-721](./eip-721.md).

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Every contract compliant with [ERC-6785](./eip-6785.md) MUST implement the interface defined as follows: ### Contract Interface ```solidity // @title NFT Utility description

MOTIVATION:
This specification aims to clarify what the utility associated with an NFT is and how to access this utility. Relying on third-party platforms to obtain information regarding the utility of the NFT that one owns can lead to scams, phishing or other forms of fraud. Currently, utilities that are

RATIONALE:
Since the `utilityUri` could contain information that has to be restricted to some level and could be dependent on an off-chain tool for displaying said information, the creator needs the ability to modify it in the event the off-chain tool or platform becomes unavailable or inaccessible. For transparency purposes,


=== ERC-7412 ===
TITLE: On-Demand Off-Chain Data Retrieval
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-26
REQUIRES: 

SUMMARY:
Contracts may require off-chain data during execution. A smart contract function could implement the standard proposed here by reverting with `error OracleDataRequired(address oracleContract, bytes oracleQuery)`. Clients supporting this standard would recognize this error message during a simulation of the request, query the specified decentralized oracle network for signed data,

SPECIFICATION:
A contract implementing this standard MUST revert with the following error whenever off-chain data is required: ```solidity error OracleDataRequired(address oracleContract, bytes oracleQuery) ``` `oracleQuery` specifies the off-chain data that is being required. Valid data formats for this parameter are specific to the oracle ID specified by the oracle contract.

MOTIVATION:
Ethereum's scaling roadmap involves a series of separate execution contexts for smart contract code (including layer two and layer three scaling solutions). This makes the ability to read data across multiple chains crucial to the construction of scalable applications. Also, for decentralized finance protocols that rely on price data,

RATIONALE:
This proposal is essentially an alternative to [ERC-3668](./eip-3668.md) with a few important distinctions: - ERC-3668 requires URIs to be encoded on-chain. While this can work well for static assets (such as IPFS hashes for assets related to NFTs and merkle trees), it is not ideal for retrieving data that


=== ERC-1178 ===
TITLE: Multi-class Token Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-06-22
REQUIRES: 

SUMMARY:
This standard allows for the implementation of a standard API for multi-class fungible tokens (henceforth referred to as "MCFTs") within smart contracts. This standard provides basic functionality to track and transfer ownership of MCFTs.

SPECIFICATION:
### ERC-20 Compatibility (partial) **name** ```solidity function name() constant returns (string name) ``` *OPTIONAL - It is recommended that this method is implemented for enhanced usability with wallets and exchanges, but interfaces and other contracts MUST NOT depend on the existence of this method.* Returns the name of the

MOTIVATION:
Currently, there is no standard to support tokens that have multiple classes. In the real world, there are many situations in which defining distinct classes of the same token would be fitting (e.g. distinguishing between preferred/common/restricted shares of a company). Yet, such nuance cannot be supported in today's token

RATIONALE:
### Current Limitations The design of this project was motivated when I tried to create different classes of fungible ERC-721 tokens (an oxymoron) but ran into gas limits from having to create each tokens individually and maintain them in an efficient data structure for access. Using the maximum gas


=== ERC-2266 ===
TITLE: Atomic Swap-based American Call Option Contract Standard
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2019-08-17
REQUIRES: 

SUMMARY:
This standard provides functionality to make Atomic Swap-based American Call Option payment. The Atomic Swap protocol based on Hashed Time-Locked Contract (HTLC) [^1] has optionality [^2], and such optionality can be utilised to construct American Call Options without trusted third party. This standard defines the common way of implementing

SPECIFICATION:
The Atomic Swap-based American Call Option smart contract should follow the syntax and semantics of Ethereum smart contracts. ### Definitions + `initiator`: the party who publishes the advertisement of the swap. + `participant`: the party who agrees on the advertisement and participates in the swap with `initiator`. + `asset`:

MOTIVATION:
Atomic Swap allows users to atomically exchange their tokens without trusted third parties while the HTLC is commonly used for the implementation. However, the HTLC-based Atomic Swap has optionality. More specifically, the swap initiator can choose to proceed or abort the swap for several hours, which gives him time

RATIONALE:
+ To achieve the atomicity, HTLC is used. + The participant should decide whether to participate after the initiator locks the token and sets up the timelock. + The initiator should decide whether to proceed the swap (redeem the tokens from the participant and reveal the preimage of the


=== ERC-3569 ===
TITLE: Sealed NFT Metadata Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-05-07
REQUIRES: 

SUMMARY:
This standard accomplishes three things; it provides a way for potential collectors to verify that the NFT metadata will not change, allows creators to immortalize metadata for multiple tokens at one time, and allows metadata for many NFTs to be read and cached from one file. A creator can

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ``` interface SealedMetadata { /** @notice This function is used to set a sealed URI for the given range of

MOTIVATION:
In the original ERC-721 standard, the metadata extension specifies a `tokenURI` function which returns a URI for a single token ID. This may be hosted on IPFS or might be hosted on a centralized server. There's no guarantee that the NFT metadata will not change. This is the same

RATIONALE:
**Rationale for rule not explicitly requiring that sealed URI be hosted on decentralized filestorage** In order for this standard to remain future proof there is no validation within the smart contract that would verify the sealed URI is hosted on IPFS or another decentralized file storage system. The standard


=== ERC-7564 ===
TITLE: Contract wallet management NFT
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-11-21
REQUIRES: 165

SUMMARY:
This proposal introduces a smart contract wallet-based approach for managing NFTs, focusing on utilizing the programmable features of smart contract wallets for NFT asset management. Additionally, it introduces functions such as `nftApprove`, `nftSetApprovalForOneAll`, `nftSetApprovalForAllAll`, `nftGetApproved`, `nftIsApprovedForOneAll`, `nftIsApprovedForAllAll` and `nftTransfer`, which provide enhanced control over NFT transactions. This approach seeks

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. **Compliant contract must implement the [ERC-165](./eip-165) interfaces** ```solidity /// @title ERC-7564 /// @dev See https://eips.ethereum.org/EIPS/eip-7564

MOTIVATION:
An externally-owned account (EOA) wallet has no state and code storage, while the smart contract wallet does. Account abstraction (AA) is a direction of the smart contract wallet, which works around abstract accounts. This ERC can also be an extension based on [ERC-4337](./eip-4337) or as a plug-in for wallets.

RATIONALE:
the key technical decisions in this proposal are: **Improved Approve Mechanism** - **Current vs. Proposed**: In the existing ERC-721 system, an externally-owned account (EOA) directly interacts with nft contracts to `approve`. The new `nftApprove`, `nftSetApprovalForOneAll`, `nftSetApprovalForAllAll`, `nftGetApproved`, `nftIsApprovedForOneAll`, `nftIsApprovedForAllAll`functions in this proposed enable more precise control over nft usage


=== ERC-1167 ===
TITLE: Minimal Proxy Contract
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-06-22
REQUIRES: 211

SUMMARY:
By standardizing on a known minimal bytecode redirect implementation, this standard allows users and third party tools (e.g. Etherscan) to (a) simply discover that a contract will always redirect in a known manner and (b) depend on the behavior of the code at the destination contract as the behavior

SPECIFICATION:
The exact bytecode of the standard clone contract is this: `363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3` wherein the bytes at indices 10 - 29 (inclusive) are replaced with the 20 byte address of the master functionality contract. A reference implementation of this can be found at the [optionality/clone-factory](https://github.com/optionality/clone-factory) github repo.

MOTIVATION:
This standard supports use-cases wherein it is desirable to clone exact contract functionality with a minimum of side effects (e.g. memory slot stomping) and with low gas cost deployment of duplicate proxies.

RATIONALE:
The goals of this effort have been the following: - inexpensive deployment (low gas to deploy clones) - support clone initialization in creation transaction (through factory contract model) - simple clone bytecode to encourage directly bytecode interrogation (see CloneProbe.sol in the clone-factory project) - dependable, locked-down behavior - this


=== ERC-926 ===
TITLE: Address metadata registry
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-03-12
REQUIRES: 165

SUMMARY:
This EIP specifies a registry for address metadata, permitting both contracts and external accounts to supply metadata about themselves to onchain and offchain callers. This permits use-cases such as generalised authorisations, providing token acceptance settings, and claims registries.

SPECIFICATION:
The metadata registry has the following interface: ```solidity interface AddressMetadataRegistry { function provider(address target) view returns(address); function setProvider(address _provider); } ``` `setProvider` specifies the metadata registry to be associated with the caller's address, while `provider` returns the address of the metadata registry for the supplied address. The metadata registry

MOTIVATION:
An increasing set of use cases require storage of metadata associated with an address; see for instance EIP 777 and EIP 780, and the ENS reverse registry in EIP 181. Presently each use-case defines its own specialised registry. To prevent a proliferation of special-purpose registry contracts, we instead propose

RATIONALE:
There are two obvious approaches for a generic metadata registry: the indirection approach employed here, or a generalised key/value store. While indirection incurs the cost of an additional contract call, and requires providers to change over time, it also provides for significantly enhanced flexibility over a key/value store; for


=== ERC-7656 ===
TITLE: Generalized Token-Linked Services
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2024-03-15
REQUIRES: 1, 6, 5, ,,  , 1, 1, 6, 7, ,,  , 5, 3, 1, 3

SUMMARY:
This proposal defines a registry for generic services linked to specific non-fungible tokens (NFTs), i.e., contracts extending an NFT, owned by a single NFT and thus by the owner of the NFT. It achieves this goal using generic language for functions, errors, and events, and avoids conflicting with strict

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Registry Interface The interface `IERC7656Registry` is defined as follows: ```solidity // interfaceId 0xc6bdc908 interface

MOTIVATION:
Existing proposals aim to bind smart accounts to tokens, allowing their registries to deploy accounts owned by specific token IDs. The issue we attempt to address with this new proposal is that these proposals often explicitly require any contract deployed via their registries to implement specific interfaces to handle

RATIONALE:
The technical foundation of [ERC-7656](./eip-7656.md) centers on the extension and generalization of contract types that can be associated with NFTs. This approach was chosen to address specific limitations and opportunities identified in the design and application of NFT-linked contracts. Key technical decisions in this proposal include: - **Addressing ERC


=== ERC-6066 ===
TITLE: Signature Validation Method for NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-11-29
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 1, 2, 7, 1, ,,  , 5, 7, 5, 0

SUMMARY:
While **E**xternally **O**wned **A**ccounts can validate signed messages with `ecrecover()` and smart contracts can validate signatures using specifications outlined in [ERC-1271](./eip-1271.md), currently there is no standard method to create or validate signatures made by NFTs. We propose a standard way for anyone to validate whether a signature made by

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119 and RFC 8174. ``` pragma solidity ^0.8.0; interface IERC6066 { /** * @dev MUST return if the signature

MOTIVATION:
With billions of ETH in trading volume, the **N**on-**F**ungible **T**oken standard has exploded into tremendous popularity in recent years. Despite the far-reaching implications of having unique tokenized items on-chain, NFTs have mainly been used to represent artwork in the form of avatars or profile pictures. While this is certainly

RATIONALE:
We have purposefully decided to not include a signature generation standard in this proposal as it would restrict flexibility of such mechanism, just as [ERC-1271](./eip-1271.md) does not enforce a signing standard for smart contracts. We also decided to reference Gnosis Safe's contract signing approach as it is both simplistic


=== ERC-1132 ===
TITLE: Extending ERC20 with token locking capability
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-06-03
REQUIRES: 

SUMMARY:
This proposal provides basic functionality to time-lock tokens within an ERC20 smart contract for multiple utilities without the need of transferring tokens to an external escrow smart contract. It also allows fetching balance of locked and transferable tokens. Time-locking can also be achieved via staking (#900), but that requires

SPECIFICATION:
I’ve extended the ERC20 interface with the following enhancements: ### Locking of tokens ```solidity /** * @dev Locks a specified amount of tokens against an address, * for a specified reason and time * @param _reason The reason to lock tokens * @param _amount Number of tokens to be

MOTIVATION:
dApps often require tokens to be time-locked against transfers for letting members 1) adhere to vesting schedules and 2) show skin in the game to comply with the underlying business process. I realized this need while building Nexus Mutual and GovBlocks. In [Nexus Mutual](https://nexusmutual.io), claim assessors are required to


=== ERC-4671 ===
TITLE: Non-Tradable Tokens Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-01-13
REQUIRES: 165

SUMMARY:
A non-tradable token, or NTT, represents inherently personal possessions (material or immaterial), such as university diplomas, online training certificates, government issued documents (national id, driving license, visa, wedding, etc.), labels, and so on. As the name implies, non-tradable tokens are made to not be traded or transferred, they are

SPECIFICATION:
### Non-Tradable Token A NTT contract is seen as representing **one type of certificate** delivered by **one authority**. For instance, one NTT contract for the French National Id, another for Ethereum EIP creators, and so on... * An address might possess multiple tokens. Each token has a unique identifier:

MOTIVATION:
We have seen in the past smart contracts being used to deliver university diplomas or driving licenses, for food labeling or attendance to events, and much more. All of these implementations are different, but they have a common ground: the tokens are **non-tradable**. The blockchain has been used for

RATIONALE:
### On-chain vs Off-chain A decision was made to keep the data off-chain (via `tokenURI()`) for two main reasons: * Non-tradable tokens represent personal possessions. Therefore, there might be cases where the data should be encrypted. The standard should not outline decisions about encryption because there are just so


=== ERC-4973 ===
TITLE: Account-bound Tokens
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-04-01
REQUIRES: 1, 6, 5, ,,  , 7, 1, 2, ,,  , 7, 2, 1, ,,  , 1, 2, 7, 1

SUMMARY:
Proposes a standard API for account-bound Tokens (ABT) within smart contracts. An ABT is a non-fungible token bound to a single account. ABTs don't implement a canonical interface for transfers. This EIP defines basic functionality to mint, assign, revoke and track ABTs.

SPECIFICATION:
### Solidity Interface The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ABTs _must_ implement the interfaces: - [ERC-165](./eip-165.md)'s `ERC165` (`0x01ffc9a7`) - [ERC-721](./eip-721.md)'s `ERC721Metadata` (`0x5b5e139f`) ABTs _must not_ implement

MOTIVATION:
In the popular MMORPG World of Warcraft, its game designers intentionally took some items out of the world's auction house market system to prevent them from having a publicly-discovered price and limit their accessibility. Vanilla WoW's "Thunderfury, Blessed Blade of the Windseeker" was one such legendary item, and it

RATIONALE:
### Interface ABTs shall be maximally backward-compatible but still only expose a minimal and simple to implement interface definition. As [ERC-721](./eip-721.md) tokens have seen widespread adoption with wallet providers and marketplaces, using its `ERC721Metadata` interface with [ERC-165](./eip-165.md) for feature-detection potentially allows implementers to support ABTs out of the box.


=== ERC-5269 ===
TITLE: ERC Detection and Discovery
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-07-15
REQUIRES: 5750

SUMMARY:
An interface for better identification and detection of ERC by numbers. It designates a field in which it's called `majorERCIdentifier` which is normally known or referred to as "ERC number". For example, `ERC-721` aka [ERC-721](./eip-721.md) has a `majorERCIdentifier = 721`. This ERC has a `majorERCIdentifier = 5269`. Calling it

SPECIFICATION:
In the following description, we use ERC and ERC inter-exchangeably. This was because while most of the time the description applies to an ERC category of the Standards Track of ERC, the ERC number space is a subspace of ERC number space and we might sometimes encounter ERCs that

MOTIVATION:
This ERC is created as a competing standard for [ERC-165](./eip-165.md). Here are the major differences between this ERC and [ERC-165](./eip-165.md). 1. [ERC-165](./eip-165.md) uses the hash of a method's signature which declares the existence of one method or multiple methods, therefore it requires at least one method to *exist* in

RATIONALE:
1. When data type `uint256 majorERCIdentifier`, there are other alternative options such as: - (1) using a hashed version of the ERC number, - (2) use a raw number, or - (3) use an ERC-165 identifier. The pros for (1) are that it automatically supports any evolvement of future


=== ERC-7821 ===
TITLE: Minimal Batch Executor Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-11-21
REQUIRES: 7579

SUMMARY:
This proposal defines a minimal batch executor interface for delegations. A delegation is a smart contract that implements logic which other smart contracts can delegate to. This allows atomic batched executions to be prepared in a standardized way.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Overview The minimal batch executor interface is defined as follows: ```solidity /// @dev Interface

MOTIVATION:
With the advent of [EIP-7702](./eip-7702), it is possible for Externally Owned Accounts (EOAs) to perform atomic batched executions. We anticipate that there will be multiple EIP-7702 delegations from multiple major vendors. A standard for the execution interface will enable better interoperability. EIP-7702 delegation is a risky procedure which should

RATIONALE:
We aim for radical minimalism to keep the standard as left-curved as possible. Simplicity is the key to adoption. Our North Star is to get every decentralized exchange to support the approve + swap workflow for EOAs with delegations as soon as possible. ### `execute` and `supportsExecutionMode` We have


=== ERC-5646 ===
TITLE: Token State Fingerprint
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-11
REQUIRES: 165

SUMMARY:
This specification defines the minimum interface required to unambiguously identify the state of a mutable token without knowledge of implementation details.

SPECIFICATION:
The key words "MUST", "MUST NOT", "SHOULD", "SHOULD NOT", and "MAY" in this document are to be interpreted as described in RFC 2119. ```solidity pragma solidity ^0.8.0; interface ERC5646 is ERC165 { /// @notice Function to return current token state fingerprint. /// @param tokenId Id of a token state

MOTIVATION:
Currently, protocols need to know about tokens' state properties to create the unambiguous identifier. Unfortunately, this leads to an obvious bottleneck in which protocols need to support every new token specifically. ![](../assets/eip-5646/support-per-abi.png)

RATIONALE:
Protocols can use state fingerprints as a part of a token identifier and support mutable tokens without knowing any state implementation details. ![](../assets/eip-5646/support-per-eip.png) State fingerprints don't have to factor in state properties that are immutable, because they can be safely identified by a token id. This standard is not


=== ERC-5050 ===
TITLE: Interactive NFTs with Modular Environments
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-04-18
REQUIRES: 1, 6, 5, ,,  , 1, 7, 3, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 1, 8, 2, 0, ,,  , 4, 9, 0, 6

SUMMARY:
This standard defines a broadly applicable action messaging protocol for the transmission of user-initiated actions between tokens. Modular statefulness is achieved with optional state controller contracts (i.e. environments) that manage shared state, and provide arbitration and settlement of the action process.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. Smart contracts implementing this EIP standard MUST implement the [EIP-165](./eip-165.md) supportsInterface function and MUST return the constant value `true` if

MOTIVATION:
Tokenized item standards such as [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md) serve as the objects of the Ethereum computing environment. A growing number of projects are seeking to build interactivity and *"digital physics"* into NFTs, especially in the contexts of gaming and decentralized identity. A standard action messaging protocol will allow this

RATIONALE:
The critical features of this interactive token standard are that it 1) creates a common way to define, advertise, and conduct object interaction, 2) enables optional, brokered statefulness with *useful* validity assurances at minimum gas overhead, 3) is easy for developers to implement, and 4) is easy for end-users


=== ERC-5727 ===
TITLE: Semi-Fungible Soulbound Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-09-28
REQUIRES: 1, 6, 5, ,,  , 7, 1, 2, ,,  , 7, 2, 1, ,,  , 3, 5, 2, 5, ,,  , 4, 9, 0, 6, ,,  , 5, 1, 9, 2, ,,  , 5, 4, 8, 4

SUMMARY:
An interface for soulbound tokens (SBT), which are non-transferable tokens representing a person's identity, credentials, affiliations, and reputation. Our interface can handle a combination of fungible and non-fungible tokens in an organized way. It provides a set of core methods that can be used to manage the lifecycle of

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. A token is identified by its `tokenId`, which is a 256-bit unsigned integer. A token can also have a value

MOTIVATION:
The current Web3 ecosystem is heavily focused on financialized, transferable tokens. However, there's a growing need for non-transferable tokens to represent unique personal attributes and rights. Existing attempts within the Ethereum community to create such tokens lack the necessary flexibility and extensibility. Our interface addresses this gap, offering a

RATIONALE:
### Token storage model We adopt semi-fungible token storage models designed to support both fungible and non-fungible tokens, inspired by the semi-fungible token standard. We found that such a model is better suited to the representation of SBT than the model used in [ERC-1155](./eip-1155.md). Firstly, each slot can be


=== ERC-5496 ===
TITLE: Multi-privilege Management NFT Extension
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-07-30
REQUIRES: 721

SUMMARY:
This EIP defines an interface extending [EIP-721](./eip-721.md) to provide shareable multi-privileges for NFTs. Privileges may be on-chain (voting rights, permission to claim an airdrop) or off-chain (a coupon for an online store, a discount at a local restaurant, access to VIP lounges in airports). Each NFT may contain many

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Every contract complying with this standard MUST implement the `IERC5496` interface. The **shareable multi-privilege extension** is OPTIONAL for EIP-721 contracts.

MOTIVATION:
This standard aims to efficiently manage privileges attached to NFTs in real-time. Many NFTs have functions other than just being used as profile pictures or art collections, they may have real utilities in different scenarios. For example, a fashion store may give a discount for its own NFT holders;

RATIONALE:
### Shareable Privileges The number of privilege holders is limited by the number of NFTs if privileges are non-shareable. A shareable privilege means the original privilege holder can copy the privilege and give it to others, not transferring his/her own privilege to them. This mechanism greatly enhances the spread


=== ERC-2386 ===
TITLE: Ethereum 2 Hierarchical Deterministic Walletstore
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-11-21
REQUIRES: 2, 3, 3, 4, ,,  , 2, 3, 3, 5

SUMMARY:
Ethereum has the concept of keystores: pieces of data that define a key (see [EIP-2335](https://eips.ethereum.org/EIPS/eip-2335) for details). This adds the concept of walletstores: stores that define wallets and how keys in said wallets are created.

SPECIFICATION:
The elements of a hierarchical deterministic walletstore are as follows: ### UUID The `uuid` provided in the walletstore is a randomly-generated type 4 UUID as specified by [RFC 4122](https://tools.ietf.org/html/rfc4122). It is intended to be used as a 128-bit proxy for referring to a particular wallet, used to uniquely identify

MOTIVATION:
Hierarchical deterministic wallets create keys from a _seed_ and a _path_. The seed needs to be accessible to create new keys, however it should also be protected to the same extent as private keys to stop it from becoming an easy attack vector. The path, or at least the

RATIONALE:
A standard for walletstores, similar to that for keystores, provides a higher level of compatibility between wallets and allows for simpler wallet and key interchange between them.


=== ERC-6787 ===
TITLE: Order Book DEX with Two Phase Withdrawal
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-27
REQUIRES: 

SUMMARY:
The Order Book DEX Standard is a proposed set of interface specifications that define a decentralized exchange (DEX) protocol for trading assets using order books. This standard provides a set of functions that allow users to deposit, withdraw, and trade assets on a decentralized exchange. Additionally, it proposes a

SPECIFICATION:
### Interfaces The Order Book DEX Standard defines the following Interfaces: #### `deposit` `function deposit(address token, uint256 amount) external;` The **deposit** function allows a user to deposit a specified amount of a particular token to the exchange. The *token* parameter specifies the address of the token contract, and the

MOTIVATION:
Decentralized exchanges (DEXs) have become increasingly popular in recent years due to their ability to provide users with greater control over their assets and reduce reliance on centralized intermediaries. However, many existing DEX protocols suffer from issues such as low liquidity and inefficient price discovery. Order book-based DEXs based

RATIONALE:
The flow charts for two-phase withdrawal are shown below: ![](../assets/eip-6787/image1.png)


=== ERC-7683 ===
TITLE: Cross Chain Intents
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-11
REQUIRES: 

SUMMARY:
The following standard allows for the implementation of a standard API for cross-chain value-transfer systems. This standard provides generic order structs, as well as a standard set of settlement smart contract interfaces.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Glossary of Terms - **Destination Chain**: the chain where the intent is executed and the user receives funds. Note:

MOTIVATION:
Intent-based systems have become the preeminent solution for end-user cross-chain interaction by abstracting away the complexity and time constraints of traditional bridges. One of the key difficulties for cross-chain intents systems is accessing sufficient liquidity and a network of active fillers across chains. This challenge may be exacerbated as

RATIONALE:
### Generic OrderData A key consideration is to ensure that a broad range of cross-chain intent designs can work within the same standard. To enable this, the specification is designed around a cross-chain intents _flow_, with two variations: gasless and onchain. #### Gasless cross-chain intents flow Origin Chain: 1.


=== ERC-7087 ===
TITLE: MIME type for Web3 URL in Auto Mode
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-05-28
REQUIRES: 6860

SUMMARY:
This standard extends the [ERC-6860](./eip-6860.md) `web3://` standard: in smart contracts not designed for `web3://` (thus using auto mode), the MIME type of the returned data is either implicit (not advertised by the smart contract) or included within the returned data ([RFC 2397](https://www.rfc-editor.org/rfc/rfc2397) data URLs). This standard defines additional query

SPECIFICATION:
The standard introduces three query parameters to determine the MIME type. - `mime.content=<contentType>`, where `<contentType>` is a MIME type defined in [RFC 6838](https://www.rfc-editor.org/rfc/rfc6838). If the `<contentType>` does not follow the structure of a MIME type, the URL is not fetched and an error message is displayed to the user.

MOTIVATION:
When returning data to the web browser, a `Content-Type` header indicating the MIME type of the data is strongly recommended, or the data may be incorrectly interpreted and displayed by the web browser. The `web3://` protocol has 2 modes: manual and auto. - The manual mode is used on

RATIONALE:
The standard uses three different query parameters rather than a single query parameter to avoid confusion - an implementer or a user can easily tell the expected returned MIME of a link. Further, in auto mode, the query parameters are not used to form the EVM message (e.g., calldata)


=== ERC-7535 ===
TITLE: Native Asset ERC-4626 Tokenized Vault
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-10-12
REQUIRES: 2, 0, ,,  , 4, 6, 2, 6, ,,  , 7, 5, 2, 8

SUMMARY:
This standard is an extension of the [ERC-4626](./eip-4626.md) spec with an identical interface and behavioral overrides for handling Ether or any native asset as the underlying.

SPECIFICATION:
All [ERC-7535](./eip-7535.md) tokenized Vaults MUST implement ERC-4626 (and by extension ERC-20) with behavioral overrides for the methods `asset`, `deposit`, and `mint` specified below. ### ERC-4626 Breaking Changes * Any `assets` quantity refers to wei of Ether rather than ERC-20 balances. * Any ERC-20 `transfer` calls are replaced by Ether

MOTIVATION:
A standard for tokenized ETH Vaults has the same benefits as [ERC-4626](./eip-4626.md), particularly in the case of Liquid Staking Tokens, (i.e. fungible [ERC-20](./eip-20.md) wrappers around ETH staking). Maintaining the same exact interface as ERC-4626 further amplifies the benefits as the standard will be maximally compatible with existing ERC-4626 tooling

RATIONALE:
This standard was designed to maximize compatibility with ERC-4626 while minimizing additional opinionated details on the interface. Examples of this decision rationale are described below: * maintaining the redundant `assets` input to the `deposit` function while making its usage optional * not enforcing a relationship between `msg.value` and `assets`


=== ERC-7521 ===
TITLE: General Intents for Smart Contract Wallets
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-19
REQUIRES: 

SUMMARY:
A generalized intent specification entry point contract which enables support for a multitude of intent standards as they evolve over time. Instead of smart contract wallets having to constantly upgrade to provide support for new intent standards as they pop up, a single entry point contract is trusted to

SPECIFICATION:
Users package up intents they want their wallet to participate in, in an ABI-encoded struct called a `UserIntent`: | Field | Type | Description | | ------------ | --------- | ------------------------------------------------------------- | | `sender` | `address` | The wallet making the intent | | `segments` | `bytes[]` | Data

MOTIVATION:
See also ["ERC-4337: Account Abstraction via Entry Point Contract specification"](./eip-4337.md) and the links therein for historical work and motivation. This proposal uses the same entry point contract idea to enable a single interface which smart contract wallets can support now to unlock future-proof access to an evolving intent landscape.

RATIONALE:
The main challenge with a generalized intent standard is being able to adapt to the evolving world of intents. Users need to have a way to express their intents in a seamless way without having to make constant updates to their smart contract wallets. In this proposal, we expect


=== ERC-6366 ===
TITLE: Permission Token
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-01-19
REQUIRES: 6617

SUMMARY:
This EIP offers an alternative to Access Control Lists (ACLs) for granting authorization and enhancing security. A `uint256` is used to store permission of given address in a ecosystem. Each permission is represented by a single bit in a `uint256` as described in [ERC-6617](./eip-6617.md). Bitwise operators and bitmasks are

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. _Note_ The following specifications use syntax from Solidity `0.8.7` (or above) ### Core Interface Compliant

MOTIVATION:
Special roles like `Owner`, `Operator`, `Manager`, `Validator` are common for many smart contracts because permissioned addresses are used to administer and manage them. It is difficult to audit and maintain these system since these permissions are not managed in a single smart contract. Since permissions and roles are reflected

RATIONALE:
Needs discussion.


=== ERC-4974 ===
TITLE: Ratings
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-04-02
REQUIRES: 165

SUMMARY:
This standard defines a standardized interface for assigning and managing numerical ratings on the Ethereum blockchain. This allows ratings to be codified within smart contracts and recognized by other applications, enabling a wide range of new use cases for tokens.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Every compliant contract MUST implement the following interfaces: ``` // SPDX-License-Identifier: CC0 pragma solidity ^0.8.0; /// @title EIP-4974 Ratings ///

MOTIVATION:
Traditionally, blockchain applications have focused on buying and selling digital assets. However, the asset-centric model has often been detrimental to community-based blockchain projects, as seen in the pay-to-play dynamics of many EVM-based games and DAOs in 2021. This proposal addresses this issue by allowing ratings to be assigned to

RATIONALE:
### Rating Assignment Ratings SHALL be at the sole discretion of the contract operator. This party may be a sports team coach or a multisig DAO wallet. We decide not to specify how governance occurs, but only *that* governance occurs. This allows for a wider range of potential use


=== ERC-7425 ===
TITLE: Tokenized Reserve
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-30
REQUIRES: 2, 0, ,,  , 4, 6, 2, 6

SUMMARY:
This specification explains a tokenized reserve mechanism standard. Current smart contracts record transactions and are made public. The reserve will implement added functionality allowing stakeholders proactively to audit a contract. Using [ERC-4626](./eip-4626.md), stakeholders can create shares to show support for actions in the contract.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Definitions: - owner: The creator of the reserve - user: Stakeholders participating in policies

MOTIVATION:
Tokenized vaults store [ERC-20](./eip-20.md) tokens that are represented by shares within vault contracts. Implementations can follow the [ERC-4626](./eip-4626.md) standard to provide basic functionality for depositing, withdrawing, and reading balances for a vault. As tokenization becomes increasingly popular, applications should use a form of tokenized vaults to store assets and

RATIONALE:
This proposed standard is designed to be a core implementation of a tokenized reserve interface. Other non-specified conditions should be addressed on a case-by-case basis. Each reserve uses [ERC-20](./eip-20.md) standard for shares, and [ERC-4626](./eip-4626.md) for the creation of shares. The reserve token SHOULD be considered as either the underlying


=== ERC-7572 ===
TITLE: Contract-level metadata via `contractURI()`
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-06
REQUIRES: 

SUMMARY:
This specification standardizes `contractURI()` to return contract-level metadata. This is useful for dapps and offchain indexers to show rich information about a contract, such as its name, description and image, without specifying it manually or individually for each dapp.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The contract MUST implement the below interface: ```solidity interface IERC7572 { function contractURI() external view

MOTIVATION:
Dapps have included supported for `contractURI()` for years without an ERC to reference. This standard also introduces the event `ContractURIUpdated()` to signal when to update the metadata.

RATIONALE:
The method name `contractURI()` was chosen based on its existing implementation in dapps. The event `ContractURIUpdated()` is specified to help offchain indexers to know when to refetch the metadata.


=== ERC-191 ===
TITLE: Signed Data Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2016-01-20
REQUIRES: 

SPECIFICATION:
We propose the following format for `signed_data` ``` 0x19 <1 byte version> <version specific data> <data to sign>. ``` The initial `0x19` byte is intended to ensure that the `signed_data` is not valid RLP. > For a single byte whose value is in the [0x00, 0x7f] range, that byte


=== ERC-3440 ===
TITLE: ERC-721 Editions Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-04-20
REQUIRES: 7, 1, 2, ,,  , 7, 2, 1

SUMMARY:
ERC-3440 is an ERC-721 extension specifically designed to make NFTs more robust for works of art. This extends the original ERC-721 spec by providing the ability to designate the original and limited-edition prints with a specialized enumeration extension similar to the [original 721 extension](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol) built-in. The key improvement of

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ERC-721 compliant contracts MAY implement this ERC for editions to provide a standard method for designating the original and limited-edition

MOTIVATION:
Currently the link between a NFT and the digital work of art is only enforced in the token metadata stored in the shared `tokenURI` state of a NFT. While the blockchain provides an immutable record of history back to the origin of an NFT, often the origin is not

RATIONALE:
A major role of NFTs is to display uniqueness in digital art. Provenance is a desired feature of works of art, and this standard will help improve a NFT by providing a better way to verify uniqueness. Taking this extra step by an artist to explicitly sign tokens provides


=== ERC-884 ===
TITLE: DGCL Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-02-14
REQUIRES: 

SUMMARY:
The recently amended 'Title 8 of the Delaware Code Relating to the General Corporation Law' now explicitly allows for the use of blockchains to maintain corporate share registries. This means it is now possible to create a tradable `ERC-20` token where each token represents a share issued by a

SPECIFICATION:
The `ERC-20` token provides the following basic features: contract ERC20 { function totalSupply() public view returns (uint256); function balanceOf(address who) public view returns (uint256); function transfer(address to, uint256 value) public returns (bool); function allowance(address owner, address spender) public view returns (uint256); function transferFrom(address from, address to, uint256 value) public

MOTIVATION:
1. Delaware General Corporation Law requires that shares issued by a Delaware corporation be recorded in a share registry. 2. The share registry can be represented by an `ERC-20` token contract that is compliant with Delaware General Corporation Law. 3. This standard can cover equity issued by any Delaware

RATIONALE:
The proposed standard offers as minimal an extension as possible over the existing `ERC-20` standard in order to conform to the requirements of The Act. Rather than return a `bool` for successful or unsuccessful completion of state-changing functions such as `addVerified`, `removeVerified`, and `updateVerified`, we have opted to require


=== ERC-4834 ===
TITLE: Hierarchical Domains
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-02-22
REQUIRES: 

SUMMARY:
This is a standard for generic name resolution with arbitrarily complex access control and resolution. It permits a contract that implements this EIP (referred to as a "domain" hereafter) to be addressable with a more human-friendly name, with a similar purpose to [ERC-137](./eip-137.md) (also known as "ENS").

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### Contract Interface ```solidity interface IDomain { /// @notice Query if a domain has a subdomain with a given name

MOTIVATION:
The advantage of this EIP over existing standards is that it provides a minimal interface that supports name resolution, adds standardized access control, and has a simple architecture. ENS, although useful, has a comparatively complex architecture and does not have standard access control. In addition, all domains (including subdomains,

RATIONALE:
This EIP's goal, as mentioned in the abstract, is to have a simple interface for resolving names. Here are a few design decisions and why they were made: - Name resolution algorithm - Unlike ENS's resolution algorithm, this EIP's name resolution is fully under the control of the contracts


=== ERC-5902 ===
TITLE: Smart Contract Event Hooks
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-11-09
REQUIRES: 712

SUMMARY:
This EIP proposes a standard for creating "hooks" that allow a smart contract function to be called automatically in response to a trigger fired by another contract, by using a public relayer network as a messaging bus. While there are many similar solutions in existence already, this proposal describes

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### Registering a Publisher Both the publisher and subscriber contracts **MUST** register in a specific register contract, similarly to how

MOTIVATION:
There exists a number of use cases that require some off-chain party to monitor the chain and respond to on-chain events by broadcasting a transaction. Such cases usually require some off-chain process to run alongside an Ethereum node in order to subscribe to events emitted by smart contract, and

RATIONALE:
The rationale for this design is that it allows smart contract developers to write contract logic that listens and responds to events fired in other smart contracts, without requiring them to run some dedicated off-chain process to achieve this. This best suits any simple smart contract logic that runs


=== ERC-7546 ===
TITLE: Upgradeable Clone for Scalable Contracts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-10-25
REQUIRES: 1, 6, 5, ,,  , 1, 9, 6, 7, ,,  , 7, 2, 0, 1

SUMMARY:
It has been a significant challenge for developers attempting to create cloneable and upgradeable contracts on the Ethereum Virtual Machine (EVM). While [ERC-2535](./eip-2535.md) Diamonds and other existing proxy standards offer partial solutions, a comprehensive answer has remained elusive. Our proposal addresses this gap through the introduction of two main

SPECIFICATION:
> The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. In the EVM, contract accounts are characterized by four primary fields: *nonce*, *balance*, *code*,

MOTIVATION:
Smart contract development often encounters hurdles due to the inherent limitations of the Ethereum Virtual Machine (EVM), such as the contract size limit and stack depth. Additionally, addressing vulnerabilities in both the smart contract logic and its compiler are persistent issues. While there is a desire to minimize reliance

RATIONALE:
### Comparison with [ERC-2535](./eip-2535.md) While both this ERC and ERC-2535 offer [Function-Level Upgradeability](#function-level-upgradeability), there is a key distinction in their approaches. ERC-2535 maintains a mapping of implementation contracts (referred to as Facets in ERC-2535) within the Proxy itself. In contrast, this ERC stores the mapping in an external _Dictionary


=== ERC-7628 ===
TITLE: ERC-721 Ownership Shares Extension
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-02-20
REQUIRES: 721

SUMMARY:
This proposal introduces an attribute of ownership and profit share quantities for each token under an NFT. This attribute signifies a stake in the ownership and profit rights associated with the NFT's specific privileges, enabling the querying, transferring, and approval of these shares, thereby making the shares represented by

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Implementers of this extension **MUST** have all of the following functions: ```solidity pragma solidity ^0.8.0;

MOTIVATION:
At times, when we wish to distribute dividends or assign rights to tokens of an NFT based on their share of ownership, it becomes necessary to equip each token with an attribute indicating the number of ownership shares. While [ERC-1155](./eip-1155.md) allows for the representation of ownership stakes through the

RATIONALE:
#### Share Issuance to a Token Issuing additional shares to a token allows for flexible management of ownership stakes in digital assets, catering to the evolving needs of stakeholders. It ensures transparency and security in modifying ownership structures directly on the blockchain, facilitating scenarios like profit sharing or investment


=== ERC-7272 ===
TITLE: Ethereum Access Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-03
REQUIRES: 712

SUMMARY:
An Ethereum Access Token (EAT) is an [EIP-712](./eip-712.md) conformant, signed message, used by off-chain services to grant Ethereum accounts access to specific on-chain resources. EATs share similarities with JSON Web Tokens (JWTs); both are used for short-lived authorizations. However Ethereum Access Tokens are specifically designed to be verified on-chain

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Overview An example flow integrated in a DeFi application is the following: 1. A

MOTIVATION:
While other proposals tackle authentication or authorization in a more narrow way, this specification allows developers to add a layer of access control to any function they create with minimal changes. It is best suited for use cases where end users should only be able to access specific on-chain

RATIONALE:
- Single-use. The reference implementation guarantees non-replayability of EATs. But other implementations might favor a different approach. - Use of EIP-712. By conforming to EIP-712, EATs are interoperable with existing Ethereum infrastructure, and developers can use them to create access controls with minimal modifications to their existing code. It


=== ERC-5267 ===
TITLE: Retrieval of EIP-712 domain
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-07-14
REQUIRES: 1, 5, 5, ,,  , 7, 1, 2, ,,  , 2, 6, 1, 2

SUMMARY:
This EIP complements [EIP-712](./eip-712.md) by standardizing how contracts should publish the fields and values that describe their domain. This enables applications to retrieve this description and generate appropriate domain separators in a general way, and thus integrate EIP-712 signatures securely and scalably.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Compliant contracts MUST define `eip712Domain` exactly as declared below. All specified values MUST be returned even if they are not

MOTIVATION:
EIP-712 is a signature scheme for complex structured messages. In order to avoid replay attacks and mitigate phishing, the scheme includes a "domain separator" that makes the resulting signature unique to a specific domain (e.g., a specific contract) and allows user-agents to inform end users the details of what

RATIONALE:
A notable application of EIP-712 signatures is found in EIP-2612 (permit), which specifies a `DOMAIN_SEPARATOR` function that returns a `bytes32` value (the actual domain separator, i.e., the result of `hashStruct(eip712Domain)`). This value does not suffice for the purposes of integrating with EIP-712, as the RPC methods defined there receive


=== ERC-6672 ===
TITLE: Multi-redeemable NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-02-21
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This EIP proposes an extension to the [ERC-721](./eip-721.md) standard for Non-Fungible Tokens (NFTs) to enable multi-redeemable NFTs. Redemption provides a means for NFT holders to demonstrate ownership and eligibility of their NFT, which in turn enables them to receive a physical or digital item. This extension would allow an

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Redeem and Cancel Functions An operator SHALL only make an update to the redemption

MOTIVATION:
The motivation behind our proposed NFT standard is to provide a more versatile and flexible solution compared to existing standards, allowing for multi-redeemable NFTs. Our proposed NFT standard enables multi-redeemable NFTs, allowing them to be redeemed in multiple scenarios for different campaigns or events, thus unlocking new possibilities for

RATIONALE:
### Key Choices for Redemption Flag and Status The combination of `_operator`, `_tokenId`, and `_redemptionId` is chosen as the key because it provides a clear and unique identifier for each redemption transaction. - Operator wallet address, i.e. `_operator` It's possible that there are more than one party who would


=== ERC-721 ===
TITLE: Non-Fungible Token Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-01-24
REQUIRES: 165

SUMMARY:
The following standard allows for the implementation of a standard API for NFTs within smart contracts. This standard provides basic functionality to track and transfer NFTs. We considered use cases of NFTs being owned and transacted by individuals as well as consignment to third party brokers/wallets/auctioneers ("operators"). NFTs can

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. **Every ERC-721 compliant contract must implement the `ERC721` and `ERC165` interfaces** (subject to "caveats" below): ```solidity pragma solidity ^0.4.20; ///

MOTIVATION:
A standard interface allows wallet/broker/auction applications to work with any NFT on Ethereum. We provide for simple ERC-721 smart contracts as well as contracts that track an *arbitrarily large* number of NFTs. Additional applications are discussed below. This standard is inspired by the ERC-20 token standard and builds on

RATIONALE:
There are many proposed uses of Ethereum smart contracts that depend on tracking distinguishable assets. Examples of existing or planned NFTs are LAND in Decentraland, the eponymous punks in CryptoPunks, and in-game items using systems like DMarket or EnjinCoin. Future uses include tracking real-world assets, like real-estate (as envisioned


=== ERC-6865 ===
TITLE: On-Chain EIP-712 Visualization
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-10
REQUIRES: 712

SUMMARY:
Numerous protocols employ distinct [EIP-712](./eip-712.md) schemas, leading to unavoidable inconsistencies across the ecosystem. To address this issue, we propose a standardized approach for dApps to implement an on-chain view function called `visualizeEIP712Message`. This function takes an abi encoded EIP-712 payload message as input and returns a universally agreed-upon structured

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Contracts implementing this proposal MUST include the `visualizeEIP712Message` function in the `verifyingContract` implementation so that

MOTIVATION:
The rapid expansion of the web3.0 ecosystem has unlocked numerous opportunities and innovations. However, this growth has also heightened users' vulnerability to security threats, such as phishing scams. Ensuring that users have a comprehensive understanding of the transactions they sign is crucial for mitigating these risks. In an attempt

RATIONALE:
### on-chain One might argue that certain processes can be done off-chain, which is true, but our experience building an off-chain TypeScript SDK to solve this matter revealed some issues: - Reliability: Protocols developers are the ones responsible for developing the protocol itself, thus crafting the visualization is much


=== ERC-2981 ===
TITLE: NFT Royalty Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-09-15
REQUIRES: 165

SUMMARY:
This standard allows contracts, such as NFTs that support [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) interfaces, to signal a royalty amount to be paid to the NFT creator or rights holder every time the NFT is sold or re-sold. This is intended for NFT marketplaces that want to support the ongoing funding

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. **ERC-721 and ERC-1155 compliant contracts MAY implement this ERC for royalties to provide a standard method of specifying royalty payment

MOTIVATION:
There are many marketplaces for NFTs with multiple unique royalty payment implementations that are not easily compatible or usable by other marketplaces. Just like the early days of ERC-20 tokens, NFT marketplace smart contracts are varied by ecosystem and not standardized. This EIP enables all marketplaces to retrieve royalty

RATIONALE:
### Optional royalty payments It is impossible to know which NFT transfers are the result of sales, and which are merely wallets moving or consolidating their NFTs. Therefore, we cannot force every transfer function, such as `transferFrom()` in ERC-721, to involve a royalty payment as not every transfer is


=== ERC-5585 ===
TITLE: ERC-721 NFT Authorization
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-15
REQUIRES: 721

SUMMARY:
This EIP separates the [ERC-721](./eip-721.md) NFT's commercial usage rights from its ownership to allow for the independent management of those rights.

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY” and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Contract Interface ```solidity interface IERC5585 { struct UserRecord { address user; string[] rights; uint256 expires; } /// @notice Get all

MOTIVATION:
Most NFTs have a simplified ownership verification mechanism, with a sole owner of an NFT. Under this model, other rights, such as display, or creating derivative works or distribution, are not possible to grant, limiting the value and commercialization of NFTs. Therefore, the separation of an NFT's ownership and

RATIONALE:
First of all, NFT contract owner can set the maximum number of authorized users to each NFT and whether the NFT owner can cancel the authorization at any time to protect the interests of the parties involved. Secondly, there is a `resetAllowed` flag to control the rights between the


=== ERC-7585 ===
TITLE: MixHash and Public Data Storage Proofs
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-27
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This proposal introduces a design for "minimum value selection" storage proofs on Merkle trees. The design consists of two main components: 1. A hashing algorithm termed MixHash, aimed to replace the commonly used Keccak256 and SHA256 algorithms. 2. Public data storage proofs. This enables anyone to present a proof

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### MixHash MixHash is a Merkle tree root hash value that incorporates data length information.

MOTIVATION:
The [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) standards are widely used in the NFT fields. However, the current standards do not provide a mechanism for verifying the existence of public data. This is a major obstacle to the development of many applications, such as decentralized data markets, decentralized data storage, and decentralized

RATIONALE:
Storage proofs (often referred to as space-time proofs) have long been a subject of interest, with numerous implementations and related projects existing. 1. Compared to existing copy proofs based on zero-knowledge proofs, our storage proof is based on "Nash Consensus," with its core principles being: a. The public network


=== ERC-5131 ===
TITLE: SAFE Authentication For ENS
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-06-03
REQUIRES: 1, 3, 7, ,,  , 1, 8, 1, ,,  , 6, 3, 4

SUMMARY:
This EIP links one or more signing wallets via Ethereum Name Service Specification ([EIP-137](./eip-137.md)) to prove control and asset ownership of a main wallet.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Let: - `mainAddress` represent the wallet address we are trying to authenticate or prove asset ownership for. - `mainENS` represent

MOTIVATION:
Proving ownership of an asset to a third party application in the Ethereum ecosystem is common. Users frequently sign payloads of data to authenticate themselves before gaining access to perform some operation. However, this method--akin to giving the third party root access to one's main wallet--is both insecure and

RATIONALE:
### Usage of EIP-137 The proposed specification makes use of EIP-137 rather than introduce another registry paradigm. The reason for this is due to the existing wide adoption of EIP-137 and ENS. However, the drawback to EIP-137 is that any linked `authAddress` must contain some ETH in order to


=== ERC-6268 ===
TITLE: Untransferability Indicator for EIP-1155
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-01-06
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP standardizes an interface indicating [EIP-1155](./eip-1155.md)-compatible token non-transferability using [EIP-165](./eip-165.md) feature detection.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Smart contracts implementing this standard MUST comform to the [EIP-1155](./eip-1155.md) specification. Smart contracts implementing this

MOTIVATION:
Soulbound Tokens (SBT) are non-transferable tokens. While [EIP-5192](./eip-5192.md) standardizes non-fungible SBTs, a standard for Soulbound semi-fungible or fungible tokens does not yet exist. The introduction of a standard non-transferability indicator that is agnostic to fungibility promotes the usage of Souldbound semi-fungible or fungible tokens.

RATIONALE:
Needs discussion.


=== ERC-1444 ===
TITLE: Localized Messaging with Signal-to-Text
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-23
REQUIRES: 

SUMMARY:
An on-chain system for providing user feedback by converting machine-efficient codes into human-readable strings in any language or phrasing. The system does not impose a list of languages, but rather lets users create, share, and use the localizated text of their choice.

SPECIFICATION:
### Contract Architecture Two types of contract: `LocalizationPreferences`, and `Localization`s. The `LocalizationPreferences` contract functions as a proxy for `tx.origin`. ```diagram +--------------+ | | +------> | Localization | | | | | +--------------+ | | +-----------+ +-------------------------+ | +--------------+ | | | | <------+ | | | Requestor | <------>

MOTIVATION:
There are many cases where an end user needs feedback or instruction from a smart contract. Directly exposing numeric codes does not make for good UX or DX. If Ethereum is to be a truly global system usable by experts and lay persons alike, systems to provide feedback on

RATIONALE:
### `bytes32` Keys `bytes32` is very efficient since it is the EVM's base word size. Given the enormous number of elements (card(A) > 1.1579 × 10<sup>77</sup>), it can embed nearly any practical signal, enum, or state. In cases where an application's key is longer than `bytes32`, hashing that long


=== ERC-5114 ===
TITLE: Soulbound Badge
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-05-30
REQUIRES: 

SUMMARY:
A soulbound badge is a token that, when minted, is bound to another Non-Fungible Token (NFT), and cannot be transferred/moved after that.

SPECIFICATION:
```solidity interface IERC5114 { // fired anytime a new instance of this badge is minted // this event **MUST NOT** be fired twice for the same `badgeId` event Mint(uint256 indexed badgeId, address indexed nftAddress, uint256 indexed nftTokenId); // returns the NFT that this badge is bound to. // this

RATIONALE:
### Immutability By requiring that badges can never move, we both guarantee non-separability and non-mergeability among collections of soulbound badges that are bound to a single NFT while simultaneously allowing users to aggressively cache results. ### Content Addressable URIs Required Soulbound badges are meant to be permanent badges/indicators attached


=== ERC-6353 ===
TITLE: Charity token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-05-13
REQUIRES: 20

SUMMARY:
An extension to [EIP-20](./eip-20.md) that can automatically send an additional percentage of each transfer to a third party, and that provides an interface for retrieving this information. This can allow token owners to make donations to a charity with every transfer. This can also be used to allow automated

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Owner of the contract **MAY**, after review, register charity address in `whitelistedRate` and set globally a default rate of donation.

MOTIVATION:
There are charity organizations with addresses on-chain, and there are token holders who want to make automated donations. Having a standardized way of collecting and managing these donations helps users and user interface developers. Users can make an impact with their token and can contribute to achieving sustainable blockchain

RATIONALE:
This EIP chooses to whitelist charity addresses by using an array and keeping track of the "active" status with a mapping `whitelistedRate` to allow multiple choice of recipient and for transparence. The donation address can also be a single address chosen by the owner of the contract and modified


=== ERC-7522 ===
TITLE: OIDC ZK Verifier for AA Account
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-20
REQUIRES: 4337

SUMMARY:
Account Abstraction facilitates new use cases for smart accounts, empowering users with the ability to tailor authentication and recovery mechanisms to their specific needs. To unlock the potential for more convenient verification methods such as social login, we inevitably need to connect smart accounts and OpenID Connect(OIDC), given its

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Definitions **Identity Provider(IDP)**: The service to authenticate users and provide signed ID token **User**: The client to authenticate users and

MOTIVATION:
Connecting OIDC identity and smart accounts has been a very interesting but challenging problem. Verifying an OIDC issued IdToken is simple. IdToken are usually in the form of JWT and for common JWTs, they usually consist of three parts, a header section, a claim section and a signature section.

RATIONALE:
To verify identity ownership on-chain, **IOpenIdVerifier** needs at least three pieces of information: 1. the user ID to identify the user in the IDP. The **getIdHash** function returns the hash of the user id given smart account address. There may be multiple smart accounts linked to the same user


=== ERC-6384 ===
TITLE: Human-readable offline signatures
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2023-01-08
REQUIRES: 712

SUMMARY:
This EIP introduces the `evalEIP712Buffer` function, which takes an [EIP-712](./eip-712.md) buffer and returns a human-readable text description.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. EIP-712 already formally binds an off-chain signature to a contract, with the `verifyingContract` parameter. We suggest adding a “view” function

MOTIVATION:
The use case of Web3 off-chain signatures intended to be used within on-chain transaction is gaining traction and being used in multiple leading protocols (e.g. OpenSea) and standards [EIP-2612](./eip-2612.md), mainly as it offers a fee-less experience. Attackers are known to actively and successfully abuse such off-chain signatures, leveraging the

RATIONALE:
- We chose to implement the `typeDataBuffer` parameter as abi encoded as it is a generic way to pass the data to the contract. The alternative was to pass the `typedData` struct, which is not generic as it requires the contract to specify the message data. - We chose


=== ERC-6617 ===
TITLE: Bit Based Permission
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-02-27
REQUIRES: 

SUMMARY:
This EIP offers a standard for building a bit-based permission and role system. Each permission is represented by a single bit. By using an `uint256`, up to $256$ permissions and $2^{256}$ roles can be defined. We are able to specify the importance of each permission based on the order

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. _Note_ The following specifications use syntax from Solidity `0.8.7` (or above) Interface of reference is

RATIONALE:
Currently permission and access control is performed using a single owner ([ERC-173](./eip-173.md)) or with `bytes32` roles ([ERC-5982](./eip-5982.md)). However, using bitwise and bitmask operations allows for greater gas-efficiency and flexibility. ### Gas cost efficiency Bitwise operations are very cheap and fast. For example, doing an `AND` bitwise operation on a


=== ERC-7777 ===
TITLE: Governance for Human Robot Societies
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-09-29
REQUIRES: 

SUMMARY:
This proposal defines two core interfaces: `IUniversalIdentity` and `IUniversalCharter`, providing mechanisms for humans, and robots to establish their identities and to create decentralized communities governed by specific rule sets. The `IUniversalIdentity` interface establishes the fair and equitable treatment of sentient computer architectures other than the human brain, enabling robots

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ```solidity interface IUniversalIdentity { /// @notice Structure for hardware identity struct HardwareIdentity { bytes32 publicKey;

MOTIVATION:
The human brain is a wet, massively parallel electrochemical computer. Recent hardware and software advances make it likely that soon, human societies will need tools for interacting with sentient, non-human computers, such as robots. Our current forms of government, where citizens are auto-enrolled into specific rule sets depending on

RATIONALE:
**IUniversalIdentity** `struct HardwareIdentity` The HardwareIdentity structure provides essential information about a robot, including a challenge-response public key, manufacturer, operator, model, manufacturer serial number `generateChallenge()` This function enables secure identity verification through a challenge-response authentication. `verifyChallenge(bytes32 challenge, bytes memory signature)` This function verifies that a signature was genuinely created by


=== ERC-4883 ===
TITLE: Composable SVG NFT
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-03-08
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
Compose an SVG (Scalable Vector Graphics) NFT by concatenating the SVG with the SVG of another NFT rendered as a string for a specific token ID.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity /// @title EIP-4883 Non-Fungible Token Standard interface IERC4883 is IERC165 { function renderTokenById(uint256 id) external view returns (string memory);

MOTIVATION:
Onchain SVG NFTs allow for NFTs to be entirely onchain by returning artwork as SVG in a data URI of the `tokenUri` function. Composability allows onchain SVG NFTs to be crafted. e.g. adding glasses & hat NFTs to a profile pic NFT or a fish NFT to a fish

RATIONALE:
SVG elements can be string concatenated to compose an SVG. ### Ordering of concatenation SVG uses a "painters model" of rendering. **Scalable Vector Graphics (SVG) 1.1 (Second Edition)**, section: **3.3 Rendering Order** >Elements in an SVG document fragment have an implicit drawing order, with the first elements in the


=== ERC-2942 ===
TITLE: EthPM URI Specification
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-09-04
REQUIRES: 2678

SUMMARY:
When interacting with the EthPM ecosystem, users and tooling can benefit from a URI scheme to identify EthPM assets. Being able to specify a package, registry, or release with a single string makes simplifies the steps required to install, publish, or distribute EthPM packages.

SPECIFICATION:
`scheme://registry_address[:chain_id][/package_name[@package_version[/json_pointer]]]` #### `scheme` - Required - Must be one of `ethpm` or `erc1319`. If future versions of the EthPM registry standard are designed and published via the ERC process, those ERCs will also be valid schemes. #### `registry_address` - Required - This **SHOULD** be either an ENS name or

RATIONALE:
Most interactions within the EthPM ecosystem benefit from a single-string representation of EthPM assets; from installing a package, to identifying a registry, to distributing a package. A single string that can faithfully represent any kind of EthPM asset, across the mainnet or testnets, reduces the mental overload for new


=== ERC-1844 ===
TITLE: ENS Interface Discovery
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-03-15
REQUIRES: 1, 3, 7, ,,  , 1, 6, 5

SUMMARY:
This EIP specifies a method for exposing interfaces associated with an ENS name or an address (typically a contract address) and allowing applications to discover those interfaces and interact with them. Interfaces can be implemented either by the target contract (if any) or by any other contract.

SPECIFICATION:
A new profile for ENS resolvers is defined, consisting of the following method: ```solidity function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address); ``` The EIP-165 interface ID of this interface is `0xb8f2bbb4`. Given an ENS name hash `node` and an EIP-165 `interfaceID`, this function returns the address of

MOTIVATION:
EIP 165 supports interface discovery - determining if the contract at a given address supports a requested interface. However, in many cases it's useful to be able to discover functionality associated with a name or an address that is implemented by other contracts. For example, a token contract may

RATIONALE:
A naive approach to this problem would involve adding this method directly to the target contract. However, doing this has several shortcomings: 1. Each contract must maintain its own list of interface implementations. 2. Modifying this list requires access controls, which the contract may not have previously required. 3.


=== ERC-3722 ===
TITLE: Poster
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-07-31
REQUIRES: 

SUMMARY:
A ridiculously simple general purpose social media smart contract. It takes two strings (`content` and `tag`) as parameters and emits those strings, along with msg.sender, as an event. That's it. The EIP also includes a proposed standard json format for a Twitter-like application, where each `post()` call can include

SPECIFICATION:
### Contract ```solidity contract Poster { event NewPost(address indexed user, string content, string indexed tag); function post(string calldata content, string calldata tag) public { emit NewPost(msg.sender, content, tag); } } ``` ### ABI ```json [ { "anonymous": false, "inputs": [ { "indexed": true, "internalType": "address", "name": "user", "type": "address"

MOTIVATION:
Poster is intended to be used as a base layer for decentralized social media. It can be deployed to the same address (via the singleton factory) on just about any EVM compatible network. Any Ethereum account can make posts to the deployment of Poster on its local network.

RATIONALE:
There was some discussion around whether or not an post ID should also be emitted, whether the content should be a string or bytes, and whether or not anything at all should actually be emitted. We decided not to emit an ID, since it meant adding state or complexity


=== ERC-2535 ===
TITLE: Diamonds, Multi-Facet Proxy
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-02-22
REQUIRES: 

SUMMARY:
<img align="right" src="../assets/eip-2535/diamond.svg" width="230" height="230" alt="Diamonds contract structure"> This proposal standardizes diamonds, which are modular smart contract systems that can be upgraded/extended after deployment, and have virtually no size limit. More technically, a **diamond** is a contract with external functions that are supplied by contracts called **facets**. Facets are

SPECIFICATION:
### Terms 1. A **diamond** is a facade smart contract that `delegatecall`s into its facets to execute function calls. A diamond is stateful. Data is stored in the contract storage of a diamond. 1. A **facet** is a stateless smart contract or Solidity library with external functions. A facet

MOTIVATION:
There are a number of different reasons to use diamonds. Here are some of them: 1. **A single address for unlimited contract functionality.** Using a single address for contract functionality makes deployment, testing and integration with other smart contracts, software and user interfaces easier. 1. **Your contract exceeds the

RATIONALE:
### Using Function Selectors User interface software can be used to retrieve function selectors and facet addresses from a diamond in order show what functions a diamond has. This standard is designed to make diamonds work well with user-interface software. Function selectors with the ABI of a contract provide


=== ERC-6120 ===
TITLE: Universal Token Router
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-12-12
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 0, 1, 4, ,,  , 1, 1, 5, 5

SUMMARY:
ETH is designed with *transfer-and-call* as the default behavior in a transaction. Unfortunately, [ERC-20](./eip-20.md) is not designed with that pattern in mind and newer standards cannot apply to the token contracts that have already been deployed. Application and router contracts must use the *approve-then-call* pattern, which costs additional $n\times

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119 and RFC 8174. The main interface of the UTR contract: ```solidity interface IUniversalTokenRouter { function exec( Output[] memory

MOTIVATION:
When users approve their tokens to a contract, they trust that: * it only spends the tokens with their permission (from `msg.sender` or `ecrecover`) * it does not use `delegatecall` (e.g. upgradable proxies) By ensuring the same security conditions above, the Universal Token Router can be shared by all

RATIONALE:
The `Permit` type signature is not supported since the purpose of the Universal Token Router is to eliminate all interactive `approve` signatures for new tokens, and *most* for old tokens.


=== ERC-7786 ===
TITLE: Cross-Chain Messaging Gateway
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-14
REQUIRES: 

SUMMARY:
This proposal describes an interface, and the corresponding workflow, for smart contracts to send arbitrary data through cross-chain messaging protocols. The end goal of this proposal is to have all such messaging protocols accessible via this interface (natively or using "adapters") to improve their composability and interoperability. That would

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Message Field Encoding A cross-chain message consists of a sender, receiver, payload, and list

MOTIVATION:
Cross-chain messaging protocols (or bridges) allow communication between smart contracts deployed on different blockchains. There is a large diversity of such protocols with multiple degrees of decentralization, different architectures, implementing different interfaces, and providing different guarantees to users. Because almost every protocol implements a different workflow using a specific

RATIONALE:
Attributes are designed so that gateways can expose any specific features the bridge offers without having to use a specific endpoint. Having a unique endpoint, with modularity through attributes, SHOULD allow contracts to change the gateway they use while continuing to express messages the same way. This portability offers


=== ERC-4361 ===
TITLE: Sign-In with Ethereum
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2021-10-11
REQUIRES: 5, 5, ,,  , 1, 3, 7, ,,  , 1, 5, 5, ,,  , 1, 9, 1, ,,  , 1, 2, 7, 1, ,,  , 1, 3, 2, 8

SUMMARY:
Sign-In with Ethereum describes how Ethereum accounts authenticate with off-chain services by signing a standard message format parameterized by scope, session details, and security mechanisms (e.g., a nonce). The goals of this specification are to provide a self-custodied alternative to centralized identity providers, improve interoperability across off-chain services for

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Overview Sign-In with Ethereum (SIWE) works as follows: 1. The relying party generates a

MOTIVATION:
When signing in to popular non-blockchain services today, users will typically use identity providers (IdPs) that are centralized entities with ultimate control over users' identifiers, for example, large internet companies and email providers. Incentives are often misaligned between these parties. Sign-In with Ethereum offers a new self-custodial option for

RATIONALE:
### Requirements Write a specification for how Sign-In with Ethereum should work. The specification should be simple and generally follow existing practices. Avoid feature bloat, particularly the inclusion of lesser-used projects who see getting into the specification as a means of gaining adoption. The core specification should be decentralized,


=== ERC-7579 ===
TITLE: Minimal Modular Smart Accounts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-14
REQUIRES: 1, 6, 5, ,,  , 1, 2, 7, 1, ,,  , 2, 7, 7, 1, ,,  , 4, 3, 3, 7

SUMMARY:
This proposal outlines the minimally required interfaces and behavior for modular smart accounts and modules to ensure interoperability across implementations. For accounts, the standard specifies execution, config and fallback interfaces as well as compliance to [ERC-165](./eip-165.md) and [ERC-1271](./eip-1271.md). For modules, the standard specifies a core interface, module types and

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Definitions - **Smart account** - A smart contract account that has a modular architecture.

MOTIVATION:
Contract accounts are gaining adoption with many accounts being built using a modular architecture. These modular contract accounts (hereafter smart accounts) move functionality into external contracts (modules) in order to increase the speed and potential of innovation, to future-proof themselves and to allow customizability by developers and users. However,

RATIONALE:
### Minimal approach Smart accounts are a new concept and we are still learning about the best ways to build them. Therefore, we should not be too opinionated about how they are built. Instead, we should define the most minimal interfaces that allow for interoperability between smart accounts and


=== ERC-7160 ===
TITLE: ERC-721 Multi-Metadata Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-06-09
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This EIP proposes an extension to the [ERC-721](./eip-721.md) standard to support multiple metadata URIs per token. It introduces a new interface, `IERC721MultiMetadata`, which provides methods for accessing the metadata URIs associated with a token, including a pinned URI index and a list of all metadata URIs. The extension is

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. **The multi-metadata extension is OPTIONAL for [ERC-721](./eip-721.md) contracts and it is RECOMMENDED to be used in conjunction with the [ERC-4906](./eip-4906.md)

MOTIVATION:
The current [ERC-721](./eip-721.md) standard allows for a single metadata URI per token with the `ERC721Metadata` implementation. However, there are use cases where multiple metadata URIs are desirable. Some example use cases are listed below: - A token represents a collection of (cycling) assets with individual metadata - An on-chain

RATIONALE:
Similar terminology to [ERC-721](./eip-721.md) was used in order to keep fetching metadata familiar. The concept of pinning and unpinning metadata is introduced as it is clear that NFT owners might want to choose which piece of metadata to display. At first, we considered leaving the pinning and unpinning actions


=== ERC-5570 ===
TITLE: Digital Receipt Non-Fungible Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-01
REQUIRES: 721

SUMMARY:
This ERC proposes a standard schema for digital receipts of transactions. Digital Receipt Non-Fungible Tokens are issued by a vendor when a customer makes a purchase from their store and contains transaction details necessary for record keeping. Digital Receipt Non-Fungible Tokens extend [ERC-721](./eip-721.md) which allows for the management and

SPECIFICATION:
Transaction Flow: - A customer purchases an item from an online retailer, checking out leads the customer to an option to mint a NFT. - The smart contract provides the user with a Digital Receipt Non-Fungible Token. - When fulfilling the order, the retailer will upload the digital receipt

MOTIVATION:
Purchases from online retailers include a receipt that is emailed and/or physically provided to the customer. These receipts are critical for many reasons but are provided in an analogue form which is difficult to parse by financial systems. Digital receipts have never gained traction dispite the fact that point

RATIONALE:
The schema introduced complies with ERC-721's metadata extension, conveniently allowing previous tools for viewing NFTs to show our receipts. The new property "receipt" contains our newly provided receipt structure and the signature property optionally allows the vendor to digitally sign the receipt structure.


=== ERC-5139 ===
TITLE: Remote Procedure Call Provider Lists
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-06-06
REQUIRES: 1, 5, 5, ,,  , 1, 5, 7, 7

SUMMARY:
This proposal specifies a JSON schema for describing lists of remote procedure call (RPC) providers for Ethereum-like chains, including their supported [EIP-155](./eip-155.md) `CHAIN_ID`.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### List Validation & Schema List consumers (like wallets) MUST validate lists against the provided schema. List consumers MUST NOT connect

MOTIVATION:
The recent explosion of alternate chains, scaling solutions, and other mostly Ethereum-compatible ledgers has brought with it many risks for users. It has become commonplace to blindly add new RPC providers using [EIP-3085](./eip-3085.md) without evaluating their trustworthiness. At best, these RPC providers may be accurate, but track requests; and

RATIONALE:
This specification has two layers (provider, then chain id) instead of a flatter structure so that wallets can choose to query multiple independent providers for the same query and compare the results. Each provider may specify multiple endpoints to implement load balancing or redundancy. List version identifiers conform to


=== ERC-2334 ===
TITLE: BLS12-381 Deterministic Account Hierarchy
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-09-30
REQUIRES: 2333

SUMMARY:
A standard for allocating keys generated by [EIP-2333](./eip-2333.md) to a specific purpose. It defines a `path` which is a string that parses into the indices to be used when traversing the tree of keys that [EIP-2333](./eip-2333.md) generates.

SPECIFICATION:
### Path The path traversed through the tree of keys is defined by integers (which indicate the sibling index) separated by `/` which denote ancestor relations. There are 4 levels (plus the master node) in the path and at least 4 (5 including the master node) MUST be used.

MOTIVATION:
Ethereum 2.0 alongside many other projects will use BLS signatures over BLS12-381, an [IETF proposed standard](https://datatracker.ietf.org/doc/draft-irtf-cfrg-bls-signature/). This new scheme requires a new key derivation mechanism, which is established within [EIP-2333](./eip-2333.md). This new scheme is incompatible with the current form of this specification ([BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki)) due to the: exclusive use of

RATIONALE:
`purpose`, `coin_type`, and `account` are widely-adopted terms as per [BIP43](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki) and [BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) and therefore reusing these terms and their associated meanings makes sense. The purpose needs to be distinct from these standards as the KDF and path are not inter-compatible and `12381` is an obvious choice. `account` separates user


=== ERC-7092 ===
TITLE: Financial Bonds
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-05-28
REQUIRES: 165

SUMMARY:
This proposal introduces fixed-income financial bonds with key characteristics defined to facilitate bond issuance in the primary market and enable buying or selling bonds in the secondary market. The standard also provides cross-chain functionalities for bonds operations and management accross multiple blockchains.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. **Every contract compliant with this ERC MUST implement the following Token Interface as well as

MOTIVATION:
Fixed-income instruments are a widely utilized asset class for corporations and other entities raising funds. However, transitioning to tokenized bonds is challenging due to existing standards like [ERC-3475](./eip-3475.md), which introduces unfamiliar concepts and leads to unnecessary gas consumption. Additionally, the lack of named variables like coupon, maturity date, and

RATIONALE:
The design of this ERC aims to simplify the migration to tokenized bonds by maintaining consistency with traditional bond standards. This approach allows fixed-income instruments to be represented as on-chain tokens, manageable through wallets, and utilized by applications like decentralized exchanges, while avoiding the complexities and inefficiencies associated with


=== ERC-7528 ===
TITLE: ETH (Native Asset) Address Convention
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-10-03
REQUIRES: 2, 0, ,,  , 1, 5, 5, ,,  , 4, 6, 2, 6

SUMMARY:
The following standard proposes a convention for using the address `0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee` in all contexts where an address is used to represent ETH in the same capacity as an [ERC-20](./eip-20.md) token. This would apply to both events where an address field would denote ETH or an [ERC-20](./eip-20.md) token, as well

SPECIFICATION:
This standard applies for all components of smart contract systems in which an address is used to identify an [ERC-20](./eip-20.md) token, and where native ETH is used in certain instances in place of an [ERC-20](./eip-20.md) token. The usage of the term Token below means ETH or an [ERC-20](./eip-20.md) in

MOTIVATION:
ETH, being a fungible unit of value, often behaves similarly to [ERC-20](./eip-20.md) tokens. Protocols tend to implement a standard interface for ERC-20 tokens, and benefit from having the ETH implementation to closely mirror the [ERC-20](./eip-20.md) implementations. In many cases, protocols opt to use Wrapped ETH (e.g. WETH9 deployed at

RATIONALE:
### Considered alternative addresses Many existing implementations of the same use case as this standard use addresses such as 0x0, 0x1, and 0xe for gas efficiency of having leading zero bytes. Ultimately, all of these addresses collide with potential precompile addresses and are less distinctive as identifiers for ETH.


=== ERC-5554 ===
TITLE: NFT Legal Use, Repurposing, and Remixing
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-07
REQUIRES: 5218

SUMMARY:
This EIP extends any other token standard to provide: * Explicit rights for the token holder related to commercial exploitation, derivative works, and reproduction; * [EIP-5218](./eip-5218.md) interface for creating, viewing, and checking the status of licenses * Standard format for extended license information in the token metadata; * Standard

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Every contract compliant with this EIP must implement the `IERC5554` interface: ```solidity pragma solidity ^0.8.0; interface IERC5554 is IERC5218 {

MOTIVATION:
NFTs still face legal uncertainty, and many now realize that the rights associated with an NFT are just as important as the NFT itself. Our goal is to help the ecosystem reach clear consensus and broad understanding of what purchasers of NFTs are acquiring in terms of copyright or

RATIONALE:
We expand here upon the Motivation section to justify every decision made with regard to the specs of the standard: The `getLicenseId()` function takes a tokenID as a parameter, making it possible for different tokenID to be associated with different licensing terms. LicenseURI links to a content-addressed file that


=== ERC-7573 ===
TITLE: Conditional-upon-Transfer-Decryption for DvP
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-05
REQUIRES: 

SUMMARY:
The interfaces in this proposal model a functional transaction scheme to establish a secure *delivery-versus-payment* across two blockchains, where a) no intermediary is required and b) one of the two chains can securely interact with a stateless "decryption oracle". Here, *delivery-versus-payment* refers to the exchange of, e.g., an asset

SPECIFICATION:
### Methods #### Smart Contract on the chain that performs the locking (e.g. the asset chain) The following methods specify the functionality of the smart contract implementing the locking. For further information, please also look at the interface documentation [`ILockingContract.sol`](../assets/eip-7573/contracts/ILockingContract.sol). ##### Initiation of Transfer: `inceptTransfer` ```solidity function inceptTransfer(bytes32 id,

MOTIVATION:
Within the domain of financial transactions and distributed ledger technology (DLT), the Hash-Linked Contract (HLC) concept has been recognized as valuable and has been thoroughly investigated. The concept may help to solve the challenge of delivery-versus-payment (DvP), especially in cases where the asset chain and payment system (which may

RATIONALE:
The protocol tries to be parsimonious. The transfer is associated with a (preferable unique) `id` possibly generated by some additional interaction of the trading parties. The `key` and the `encryptedKey` arguments are strings to allow the flexible use of different encryption schemes. The decryption/encryption scheme should be inferable from


=== ERC-2390 ===
TITLE: Geo-ENS
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-11-15
REQUIRES: 1, 3, 7, ,,  , 1, 6, 5, ,,  , 1, 0, 6, 2, ,,  , 1, 1, 8, 5

SUMMARY:
This EIP specifies an ENS resolver interface for geographically split horizon DNS. Geographic split horizon DNS returns resource records that are specific to an end user's location. This technique is commonly used by CDNs to direct traffic to content caches nearest users. Geographic split horizon resolution is primarily geared

SPECIFICATION:
This EIP proposes a new interface to ENS resolvers such that geo-spacial information can be recorded and retrieved from the blockchain. The interface changes are described below for "address resolvers" described in EIP137 however the idea applies to any record described in EIP1185 and EIP1062, namely DNS Resolvers, Text

MOTIVATION:
There are many use cases for traditional GeoDNS systems, like Amazon's Route53, in the centralized web. These use cases include proximity-based load balancing and serving content specific to the geographic location of the query. Unfortunately the ENS specification does not provide a mechanism for geo-specific resolution. ENS can respond

RATIONALE:
The proposed implementation uses a sparse [Quadtree](https://dl.acm.org/doi/10.1007/BF00288933) trie as an index for resource records as it has low storage overhead and good search performance. The leaf nodes of the tree store resource records while non-leaves represent one geohash character. Each node in the tree at depth d corresponds to


=== ERC-7613 ===
TITLE: Puppet Proxy Contract
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-04
REQUIRES: 

SUMMARY:
A puppet is a contract that, when called, acts like an empty account. It doesn't do anything and it has no API, except when it is called by the address that deployed it. In that case, it delegates the call to the address passed to it in calldata. This

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. To delegate, the deployer must prepend the calldata with an ABI-encoded address to delegate to.

MOTIVATION:
A puppet can be used as an alternative account of its deployer. It has a different address, so it has a separate set of asset balances. This enables sophisticated accounting, e.g. each user of a protocol can get their own address where assets can be sent and stored. The

RATIONALE:
The main goals of the puppet design are low cost and modularity. It should be cheap to deploy and cheap to interact with. The contract should be self-contained, simple to reason about, and easy to use as an architectural building block. The puppet behavior could be implemented fairly easily


=== ERC-162 ===
TITLE: Initial ENS Hash Registrar
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2016-10-25
REQUIRES: 

SUMMARY:
This ERC describes the implementation, as deployed to the main ethereum network on 2017-05-04, of a registrar contract to govern the allocation of names in the Ethereum Name Service (ENS). The corresponding source code is [here](https://github.com/ethereum/ens/blob/mainnet/contracts/HashRegistrarSimplified.sol). For more background, refer to [EIP-137](./eip-137.md). > Registrars are responsible for allocating domain

SPECIFICATION:
### Initial restrictions The Initial Registrar is expected to be in service for approximately two years, prior to upgrading. This should be sufficient time to learn, observe, and design an updated system. During the initial two year period, the available name space will be restricted to the `.eth` TLD.

RATIONALE:
### Starting with a temporary registrar Anticipating and designing for all the potential issues of name allocation names is unlikely to succeed. This approach chooses not to be concerned with getting it perfect, but allows us to observe and learn with training wheels on, and implement improvements before expanding


=== ERC-1046 ===
TITLE: tokenURI Interoperability
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-04-13
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
[ERC-721](./eip-721.md) introduced a `tokenURI` function for non-fungible tokens to handle miscellaneous metadata such as: - thumbnail image - title - description - special asset properties - etc. This ERC adds a `tokenURI` function to [ERC-20](./eip-20.md), and extends [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) to enable interoperability between all three types of token

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Interoperability Metadata The following TypeScript interface is used in later sections: ```typescript /** *

MOTIVATION:
See the note about the metadata extension in [ERC-721](./eip-721.md#rationale). The same arguments apply to ERC-20. Being able to use similar mechanisms to extract metadata for ERC-20, ERC-721, ERC-1155, and future standards is useful for determining: - What type of token a contract is (if any); - How to display

RATIONALE:
This ERC makes adding metadata to ERC-20 tokens more straightforward for developers, with minimal to no disruption to the overall ecosystem. Using the same parameter name makes it easier to reuse code. Additionally, the recommendations not to use ERC-20's `name`, `symbol`, and `decimals` functions save gas. Built-in interoperability is


=== ERC-6997 ===
TITLE: ERC-721 with transaction validation step.
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-05-07
REQUIRES: 721

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It defines new validation functionality to avoid wallet draining: every `transfer` or `approve` will be locked waiting for validation.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. [ERC-721](./eip-721.md) compliant contracts MAY implement this EIP. All the operations that change the ownership of an NFT, like a `transferFrom`/`safeTransferFrom`, SHALL

MOTIVATION:
The power of the blockchain is at the same time its weakness: giving the user full responsibility for their data. Many cases of NFT theft currently exist, and current NFT anti-theft schemes, such as transferring NFTs to cold wallets, make NFTs inconvenient to use. Having a validation step before

RATIONALE:
### Universality The standard only defines the validation functions, but not how they should be used. It defines the validations as internal and lets the user decide how to manage them. An example could be to have an address validator connected to a dApp so that users could manage


=== ERC-7439 ===
TITLE: Prevent ticket touting
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-07-28
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md) and defines standard functions outlining a scope for ticketing agents or event organizers to take preventative actions to stop audiences being exploited in the ticket scalping market and allow customers to resell their tickets via authorized ticket resellers.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Interface The interface and structure referenced here are as follows: * TokenInfo * `signature`:

MOTIVATION:
Industrial-scale ticket touting has been a longstanding issue, with its associated fraud and criminal problems leading to unfortunate incidents and waste of social resources. It is also hugely damaging to artists at all levels of their careers and to related businesses across the board. Although the governments of various

RATIONALE:
Designing the proposal, we considered the following questions: 1. What is the most crucial for ticketing agents, performers, and audiences? * For ticketing companies, selling out all tickets is crucial. Sometimes, to create a vibrant sales environment, ticketing companies may even collaborate with scalpers. This practice can be detrimental


=== ERC-1753 ===
TITLE: Smart Contract Interface for Licences
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-02-06
REQUIRES: 

SUMMARY:
This Ethereum Improvement Proposal (EIP) proposes an Ethereum standard for the issuance of licences, permits and grants (Licences). A Licence is a limited and temporary authority, granted to a natural (e.g. you) or legal person (e.g. a corporation), to do something that would otherwise be unlawful pursuant to a

SPECIFICATION:
### Methods **NOTES**: - The following specifications use syntax from Solidity `0.4.17` (or above) - Callers MUST handle `false` from `returns (bool success)`. Callers MUST NOT assume that `false` is never returned! #### name Returns the name of the permit - e.g. `"MyPermit"`. ``` js function name() public view

MOTIVATION:
Governments are responsible for the issuance and management of Licences. However, maintaining and sharing this data can be complicated and inefficient. The granting of Licences usually requires the filing of paper-based application forms, manual oversight of applicable legislation and data entry into registries, as well as the issuance of

RATIONALE:
The use of smart contracts to apply for, renew, suspend and revoke Licences will free up much needed government resources and allow for the more efficient management of Licences. The EIP also seeks to improve the end user experience of the Licence system. In an era of open government,


=== ERC-1996 ===
TITLE: Holdable Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-04-10
REQUIRES: 20

SUMMARY:
A hold specifies a payer, a payee, a maximum amount, a notary and an expiration time. When the hold is created, the specified token balance from the payer is put on hold. A held balance cannot be transferred until the hold is either executed or released. The hold can

SPECIFICATION:
```solidity interface IHoldable /* is ERC-20 */ { enum HoldStatusCode { Nonexistent, Ordered, Executed, ReleasedByNotary, ReleasedByPayee, ReleasedOnExpiration } function hold(string calldata operationId, address to, address notary, uint256 value, uint256 timeToExpiration) external returns (bool); function holdFrom(string calldata operationId, address from, address to, address notary, uint256 value, uint256 timeToExpiration) external returns

MOTIVATION:
A hold has to be used in different scenarios where a immediate transfer between accounts is not possible or has to be guaranteed beforehand: 1. A regulated token may not allow to do a token transfer between accounts without verifying first, that it follows all the regulations. In this

RATIONALE:
This standards provides a functionality, to guarantee future payments, which is needed for many business cases where transfers have to be guaranteed. It goes a step further than the ERC-20 `approve` function by ensuring that the held balance will be available when the transfer is done. Something that can


=== ERC-3386 ===
TITLE: ERC-721 and ERC-1155 to ERC-20 Wrapper
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-03-12
REQUIRES: 165

SUMMARY:
This standard outlines a smart contract interface to wrap identifiable tokens with fungible tokens. This allows for derivative [ERC-20](./eip-20.md) tokens to be minted by locking the base [ERC-721](./eip-721.md) non-fungible tokens and [ERC-1155](./eip-1155.md) multi tokens into a pool. The derivative tokens can be burned to redeem base tokens out of

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC 2119](https://www.ietf.org/rfc/rfc2119.txt). **Every IWrapper compliant contract must implement the `IWrapper` and `ERC165` interfaces** : ```solidity pragma solidity ^0.8.0; /** @title IWrapper Identifiable

MOTIVATION:
The ERC-20 token standard is the most widespread and liquid token standard on Ethereum. ERC-721 and ERC-1155 tokens on the other hand can only be transferred by their individual ids, in whole amounts. Derivative tokens allow for exposure to the base asset while benefiting from contracts which utilize ERC-20

RATIONALE:
### Naming The ERC-721/ERC-1155 tokens which are pooled are called {Base} tokens. Alternative names include: - Underlying. - NFT. However, ERC-1155 tokens may be considered "semi-fungible". The ERC-20 tokens which are minted/burned are called {Derivative} tokens. Alternative names include: - Wrapped. - Generic. The function names `mint` and `burn`


=== ERC-4907 ===
TITLE: Rental NFT, an Extension of EIP-721
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-03-11
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [EIP-721](./eip-721.md). It proposes an additional role (`user`) which can be granted to addresses, and a time where the role is automatically revoked (`expires`). The `user` role represents permission to "use" the NFT, but not the ability to transfer it or set users.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### Contract Interface Solidity Interface with NatSpec & OpenZeppelin v4 Interfaces (also available at [`IERC4907.sol`](../assets/eip-4907/contracts/IERC4907.sol)): ```solidity interface IERC4907 { // Logged

MOTIVATION:
Some NFTs have certain utilities. For example, virtual land can be "used" to build scenes, and NFTs representing game assets can be "used" in-game. In some cases, the owner and user may not always be the same. There may be an owner of the NFT that rents it out

RATIONALE:
This model is intended to facilitate easy implementation. Here are some of the problems that are solved by this standard: ### Clear Rights Assignment With Dual “owner” and “user” roles, it becomes significantly easier to manage what lenders and borrowers can and cannot do with the NFT (in other


=== ERC-7578 ===
TITLE: Physical Asset Redemption
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-08-01
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal is an extension of [ERC-721](./eip-721.md) and implements additional functionality and information pertaining to the NFT’s underlying physical asset by capturing information that enables the holder of physical asset backed NFTs to verify authenticity and facilitate redemption of the underlying physical assets. This proposal is primarily aimed at

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. When a token is minted, its properties SHOULD be initialized beforehand, with each field being defined as follows: - **Token issuer**:

MOTIVATION:
The first wave of NFT use cases encompass predominately the representation of ownership of digital assets. In view of the anticipated trend to tokenize any real-world asset, it is to be expected that the use cases of NFTs will rapidly grow and expand around physical assets. The absence of

RATIONALE:
By not initializing a token's properties before minting, one risks that the asset's provenance represented by the token cannot be established. Contract level validation is not used on the properties as we believe the accuracy of the data declared is the responsibility of the token issuer. This builds trust


=== ERC-4524 ===
TITLE: Safer ERC-20
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-12-05
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
This standard extends [ERC-20](./eip-20.md) tokens with [EIP-165](./eip-165.md), and adds familiar functions from [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) ensuring receiving contracts have implemented proper functionality.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. In order to be compliant with this EIP, and ERC-20-compliant contract MUST also implement the following functions: ```solidity pragma solidity

MOTIVATION:
[EIP-165](./eip-165.md) adds (among other things) the ability to tell if a target recipient explicitly signals compatibility with an ERC. This is already used in the EIPs for NFTs, [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md). In addition, EIP-165 is a valuable building block for extensions on popular standards to signal implementation, a trend

RATIONALE:
This EIP is meant to be minimal and straightforward. Adding EIP-165 to ERC-20 is useful for a number of applications, and outside of a minimal amount of code increasing contract size, carries no downside. The `safeTransfer` and `safeTransferFrom` functions are well recognized from ERC-721 and ERC-1155, and therefore keeping


=== ERC-5189 ===
TITLE: Account Abstraction via Endorsed Operations
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-06-29
REQUIRES: 

SUMMARY:
This ERC proposes a form of account abstraction (AA) that ensures compatibility with existing smart contract wallets and provides flexibility for alternative designs while avoiding introducing changes to the consensus layer. Instead of defining a strict structure for AA transactions, this proposal introduces the figure of `endorser` contracts. These

SPECIFICATION:
To avoid Ethereum consensus changes, we do not attempt to create new transaction types for account-abstracted transactions. Instead, AA transactions are packed up in a struct called `Operation`, operations are structs composed by the following fields: | Field | Type | Description | | -------------------------- | ------- | -----------------------------------------------------------------------------------------------------------------------------------------------------------

MOTIVATION:
This account abstraction proposal aims to implement a generalized system for executing AA transactions while maintaining the following goals: * **Achieve the primary goal of account abstraction:** allow users to use smart contract wallets containing arbitrary verification and execution logic instead of EOAs as their primary account. * **Decentralization:**

RATIONALE:
### Griefing protection The main challenge with a purely smart contract wallet-based account abstraction system is DoS safety: how can a bundler that includes an operation make sure it will be paid without executing the entire operation? Bundlers could execute the entire operation to determine if it is healthy


=== ERC-2009 ===
TITLE: Compliance Service
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-05-09
REQUIRES: 1066

SUMMARY:
A regulated token needs to comply with several legal requirements, especially [KYC][KYC-Wikipedia] and [AML][AML-Wikipedia]. If the necessary checks have to be made off-chain the token transfer becomes centralized. Further the transfer in this case takes longer to complete as it can not be done in one transaction, but requires

SPECIFICATION:
```solidity interface CompliantService { function checkTransferAllowed(bytes32 tokenId, address from, address to, uint256 value) external view returns (byte); function checkTransferFromAllowed(bytes32 tokenId, address sender, address from, address to, uint256 value) external view returns (byte); function checkMintAllowed(bytes32 tokenId, address to, uint256 value) external view returns (byte); function checkBurnAllowed(bytes32 tokenId, address from, uint256

MOTIVATION:
Currently there is no proposal on how to accomplish decentralized compliance checks. [ERC-1462][ERC-1462] proposes a basic set of functions to check if `transfer`, `mint` and `burn` are allowed for a user, but not how those checks should be implemented. This EIP proposes a way to implement them fully on-chain

RATIONALE:
The usage of a token id instead of the address has been chosen to give tokens the possibility to update their smart contracts and keeping all their associated accumulated. If the address would be used, a migration process would needed to be done after a smart contract update. No


=== ERC-1484 ===
TITLE: Digital Identity Aggregator
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-10-12
REQUIRES: 191

SUMMARY:
This EIP proposes an identity management and aggregation framework on the Ethereum blockchain. It allows entities to claim an `Identity` via a singular `Identity Registry` smart contract, associate it with Ethereum addresses in a variety of meaningful ways, and use it to interact with smart contracts. This enables arbitrarily

SPECIFICATION:
A digital identity in this proposal can be viewed as an omnibus account, containing more information about an identity than any individual identity application could. This omnibus identity is resolvable to an unlimited number of sub-identities called `Resolvers`. This allows an atomic entity, the `Identity`, to be resolvable to

MOTIVATION:
Emerging identity standards and related frameworks proposed by the Ethereum community (including ERCs/EIPs [725](./eip-725.md), [735](https://github.com/ethereum/EIPs/issues/735), [780](https://github.com/ethereum/EIPs/issues/780), [1056](./eip-1056.md), etc.) define and instrumentalize digital identity in a variety of ways. As existing approaches mature, new standards emerge, and isolated, non-standard approaches to identity develop, coordinating on identity will become increasingly burdensome

RATIONALE:
We find that at a protocol layer, identities should not rely on specific claim or attestation structures, but should instead be a part of a trustless framework upon which arbitrarily sophisticated claim and attestation structures may be built. The main criticism of existing identity solutions is that they're overly


=== ERC-5750 ===
TITLE: General Extensibility for Method Behaviors
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-10-04
REQUIRES: 165

SUMMARY:
This EIP standardizes the passing of unstructured call data to functions to enable future extensibility.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119 and RFC 8174. When used in this EIP, the term `bytes` MUST be interpreted as the dynamically-sized byte array in

MOTIVATION:
The purpose of having extra data in a method is to allow further extensions to existing method interfaces. It is it useful to make methods extendable. Any methods complying with this EIP, such as overloaded `transfer` and `vote` could use string reasons as the extra data. Existing EIPs that

RATIONALE:
1. Using the dynamically-sized `bytes` type allows for maximum flexibility by enabling payloads of arbitrary types. 2. Having the bytes specified as the last parameter makes this EIP compatible with the calldata layout of solidity.


=== ERC-5615 ===
TITLE: ERC-1155 Supply Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-05-25
REQUIRES: 1155

SUMMARY:
This ERC standardizes an existing mechanism to fetch token supply data from [ERC-1155](./eip-1155.md) tokens. It adds a `totalSupply` function, which fetches the number of tokens with a given `id`, and an `exists` function, which checks for the existence of a given `id`.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity interface ERC1155Supply is ERC1155 { // @notice This function MUST return whether the given token id exists, previously existed,

RATIONALE:
This ERC does not implement [ERC-165](./eip-165.md), as this interface is simple enough that the extra complexity is unnecessary and would cause incompatibilities with pre-existing implementations. The `totalSupply` and `exists` functions were modeled after [ERC-721](./eip-721.md) and [ERC-20](./eip-20.md). `totalSupply` does not revert if the token ID does not exist, since contracts


=== ERC-5883 ===
TITLE: Token Transfer by Social Recovery
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-19
REQUIRES: 

SUMMARY:
This EIP standardizes a mechanism of a social recovery where a token may be transferred from an inaccessible account to a new account, given enough approvals from other identities. This approval is not purely technical, but rather needs human intervention. These humans are - based on the Soul Bound

SPECIFICATION:
```solidity pragma solidity ^0.8.7; interface ISocialRecovery { /// @dev Related but independent identity approves the transfer function approveTransfer(address from_, address to_) external; /// @dev User wants to move their onchain identity to another wallet which needs to be approved by n-nearest neighbour identities function requestTransfer(address from_, address to_) external

MOTIVATION:
It is a known problem that the private key of an account can be lost. If that key is lost it's not possible to recover the tokens owned by that account. The holder loses those tokens forever. In addition to directly harming the token holder, the entire ecosystem of

RATIONALE:
The formula proposed was deemed very resilient and provides a coherent incentivation structure to actually see value in the on-chain score. The formula adds weights based on scores based on time which further contributes to the fairness of the metric.


=== ERC-4430 ===
TITLE: Described Transactions
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-11-07
REQUIRES: 

SUMMARY:
Use a contract method to provide *virtual functions* which can generate a human-readable description at the same time as the machine-readable bytecode, allowing the user to agree to the human-readable component in a UI while the machine can execute the bytecode once accepted.

SPECIFICATION:
The **description** (a string) and the matching **execcode** (bytecode) are generated simultaneously by evaluating the method on a contract: ```solidity function eipXXXDescribe(bytes inputs, bytes32 reserved) view returns (string description, bytes execcode) ``` The human-readable **description** can be shown in any client which supports user interaction for approval, while the

MOTIVATION:
When using an Ethereum Wallet (e.g. MetaMask, Clef, Hardware Wallets) users must accept a transaction before it can be submitted (or the user may decline). Due to the complexity of Ethereum transactions, wallets are very limited in their ability to provide insight into the effects of a transaction that

RATIONALE:
### Meta Description There have been many attempts to solve this problem, many of which attempt to examine the encoded transaction data or message data directly. In many cases, the information that would be necessary for a meaningful description is not present in the final encoded transaction data or


=== ERC-4824 ===
TITLE: Common Interfaces for DAOs
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-02-17
REQUIRES: 

SUMMARY:
An API standard for decentralized autonomous organizations (DAOs), focused on relating on-chain and off-chain representations of membership and proposals.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Every contract implementing this EIP MUST implement the `IERC4824` interface below: ```solidity pragma solidity ^0.8.1; /// @title ERC-4824 DAOs ///

MOTIVATION:
DAOs, since being invoked in the Ethereum whitepaper, have been vaguely defined. This has led to a wide range of patterns but little standardization or interoperability between the frameworks and tools that have emerged. Standardization and interoperability are necessary to support a variety of use-cases. In particular, a standard

RATIONALE:
In this standard, we assume that all DAOs possess at least two primitives: _membership_ and _behavior_. _Membership_ is defined by a set of addresses. _Behavior_ is defined by a set of possible contract actions, including calls to external contracts and calls to internal functions. _Proposals_ relate membership and behavior;


=== ERC-5851 ===
TITLE: On-Chain Verifiable Credentials
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-10-18
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 1, 1, 6, 7, ,,  , 1, 9, 6, 7, ,,  , 3, 4, 7, 5

SUMMARY:
This proposal introduces a method of certifying that a particular address meets a claim, and a method of verifying those certifications using on-chain metadata. Claims are assertions or statements made about a subject having certain properties that may be met conditions (for example: `age >= 18`), and are certified

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Definitions - Zero-Knowledge Proof (ZKP): a cryptographic device that can convince a verifier that an

MOTIVATION:
On-chain issuance of verifiable attestations are essential for use-case like: - Avoiding Sybil attacks with one person one vote - Participation in certain events with credentials - Compliance to government financial regulations etc. We are proposing a standard claims structure for Decentralized Identity (DID) issuers and verifier entities to

RATIONALE:
TBD


=== ERC-2612 ===
TITLE: Permit Extension for EIP-20 Signed Approvals
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-04-13
REQUIRES: 2, 0, ,,  , 7, 1, 2

SUMMARY:
Arguably one of the main reasons for the success of [EIP-20](./eip-20.md) tokens lies in the interplay between `approve` and `transferFrom`, which allows for tokens to not only be transferred between externally owned accounts (EOA), but to be used in other contracts under application specific conditions by abstracting away `msg.sender`

SPECIFICATION:
Compliant contracts must implement 3 new functions in addition to EIP-20: ```sol function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external function nonces(address owner) external view returns (uint) function DOMAIN_SEPARATOR() external view returns (bytes32) ``` The semantics of which are as follows:

MOTIVATION:
While EIP-20 tokens have become ubiquitous in the Ethereum ecosystem, their status remains that of second class tokens from the perspective of the protocol. The ability for users to interact with Ethereum without holding any ETH has been a long outstanding goal and the subject of many EIPs. So

RATIONALE:
The `permit` function is sufficient for enabling any operation involving EIP-20 tokens to be paid for using the token itself, rather than using ETH. The `nonces` mapping is given for replay protection. A common use case of `permit` has a relayer submit a `Permit` on behalf of the `owner`.


=== ERC-7580 ===
TITLE: Advertisement Tracking Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-13
REQUIRES: 

SUMMARY:
This ERC proposes a standard interface for advertisement clients to track user actions in contracts and check corresponding rewards from advertisement protocols. Contracts implementing the interface use events to define a region of interest within a transaction. A Dapp could implement this interface to join an advertisement protocol, which

SPECIFICATION:
The keywords “MUST,” “MUST NOT,” “REQUIRED,” “SHALL,” “SHALL NOT,” “SHOULD,” “SHOULD NOT,” “RECOMMENDED,” “MAY,” and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Interfaces This protocol standardizes how to keep track of inter-dapp operations, which initially offers 2 main methods `onTrackStart` and `onTrackEnd`.

MOTIVATION:
Dapps would propsper due to mass adoption and there emerges surging demands for advertisement on chain. Compared with advertisements in web2, web3 has tremendous advantages on delivery and many other fields. We do need a set of standard tracking interfaces to facilitate advertisement related developments, which could create new

RATIONALE:
The core mechanism for this proposal is to provide a shared tracking interface for inter-dapp operations, to improve the efficiency and fulfill the required tracking business. We provide two interface functions `onTrackStart` and `onTrackEnd` to fill the basic required info and connect the necessary dots. Sure there're more demands


=== ERC-7280 ===
TITLE: NFT Metadata Extension like JSON-LD
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-04
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 3, 5, 2, 5

SUMMARY:
This proposal expands the metadata format for Non-Fungible Tokens ([ERC-721](./eip-721.md), [ERC-1155](./eip-1155.md), [ERC-3525](./eip-3525.md), and others), adding support for linked data like JSON-LD format. The additional data is stored under the linked_data key in the metadata JSON.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The JSON-LD based metadata is stored under a new `linked_data` key in the metadata JSON.

MOTIVATION:
The existing metadata format for Non-Fungible Tokens is limited and doesn't support the inclusion of structured and semantically meaningful data. By integrating JSON-LD (Linked Data), we can enhance the richness and interoperability of the metadata associated with NFTs. This allows for complex metadata structures that can link to external

RATIONALE:
For providing typical webpage for an NFT, it's much simple to include JSON-LD in HTML header tag with this extension. Just looking for JSON-LD compliant value's uri from `linked_data` array, fetch it and embed its content in HTML header tag. This means the minter of NFT can control the


=== ERC-3009 ===
TITLE: Transfer With Authorization
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-09-28
REQUIRES: 2, 0, ,,  , 7, 1, 2

SUMMARY:
A set of functions to enable meta-transactions and atomic interactions with [ERC-20](./eip-20.md) token contracts via signatures conforming to the [EIP-712](./eip-712.md) typed message signing specification. This enables the user to: - delegate the gas payment to someone else, - pay for gas in the token itself rather than in ETH,

SPECIFICATION:
### Event ```solidity event AuthorizationUsed( address indexed authorizer, bytes32 indexed nonce ); // keccak256("TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)") bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267; // keccak256("ReceiveWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)") bytes32 public constant RECEIVE_WITH_AUTHORIZATION_TYPEHASH = 0xd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8; /** * @notice Returns the state of an authorization

MOTIVATION:
There is an existing spec, [EIP-2612](./eip-2612), that also allows meta-transactions, and it is encouraged that a contract implements both for maximum compatibility. The two primary differences between this spec and EIP-2612 are that: - EIP-2612 uses sequential nonces, but this uses random 32-byte nonces, and that - EIP-2612 relies

RATIONALE:
### Unique Random Nonce, Instead of Sequential Nonce One might say transaction ordering is one reason why sequential nonces are preferred. However, sequential nonces do not actually help achieve transaction ordering for meta transactions in practice: - For native Ethereum transactions, when a transaction with a nonce value that


=== ERC-7681 ===
TITLE: Dual Nature Multi Token Protocol
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-08
REQUIRES: 2, 0, ,,  , 1, 1, 5, 5

SUMMARY:
This proposal [ERC-7681](./eip-7681.md) delineates the integration of the fungible [ERC-20](./eip-20.md) token contract with the semi-fungible [ERC-1155](./eip-1155.md) multi-token standard, enabling cohesive operations between both standards within a single contract framework. It defines a mechanism for combining two token contracts and synchronizing operations between them.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Overview Every `ERC-7681` MUST implement both `ERC20` and `ERC1155` interfaces. ### ERC-7681 Interface The

MOTIVATION:
Inspired by [ERC-7631](./eip-7631.md) Dual Nature Token Pair, which introduced a concept of interlinkable tokens between ERC-20 and [ERC-721](./eip-721.md), a challenge arises due to the duplicated `Transfer(address, address, uint256)` event, making full compatibility challenging. However, combining ERC-20 and ERC-1155 offers similar benefits of non-fungible token (NFT) fractionalization natively. Here, acquiring

RATIONALE:
### Implementation Flexibility This proposal intentionally does not prescribe specific token synchronization logic to allow for diverse implementation strategies and novel use cases, such as one-to-one synchronization or fractionalization of ERC-1155 tokens based on ERC-20 holdings. Developers are afforded the flexibility to determine their synchronization approach, provided it remains


=== ERC-1921 ===
TITLE: dType Functions Extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-04-06
REQUIRES: 1900

SUMMARY:
This proposal is part of a series of EIPs focused on expanding the concept of a Decentralized Type System, as explained in [EIP-1900](./eip-1900.md). The current EIP specifies the data definitions and interfaces needed to support registering individual smart contract functions, as entries in the dType Registry.

SPECIFICATION:
This specification targets `pure` and `view` functions. For each function, we can store: * `name` - type `string` unique function name, as defined in EIP-1900; required * `types` - the type data and label of each input, as defined in EIP-1900; required * `outputs` - the type data and

MOTIVATION:
In order to evolve the EVM into a Singleton Operating System, we need a way to register, find and address contract functions that we want to run in an automated way. This implies having access to all the data needed to run the function inside the EVM. Aside from

RATIONALE:
The suggestion to treat each `pure` or `view` function as a separate entity instead of having a contract-based approach allows us to: * have a global context of readily available functions * scale designs through functional programming patterns rather than contract-encapsulated logic (which can be successfully used to scale


=== ERC-7533 ===
TITLE: Public Cross Port
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-10-11
REQUIRES: 

SUMMARY:
The objective of Public Cross Port (PCP) is to securely and efficiently connect various EVM chains. It replaces the method of pushing message to multiple chains with a method of pulling messages from multiple chains, significantly reducing the number of cross-chain bridges and gas cost, as more cross-chain bridge

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The essence of cross-chain is to inform the target chain about events happening on the

MOTIVATION:
Currently, there are official cross-chain bridges between L2 and L1, but not between L2s. If there are 10 L2 chains that need to cross-chain with each other, it would require 10 x 9 = 90 cross-chain bridges. However, if a pull mechanism is used to merge messages from the

RATIONALE:
The traditional approach involves using a push method, as depicted in the following diagram: ![](../assets/eip-7533/2.png) If there are 6 chains, each chain needs to push to the other 5 chains, resulting in the requirement of 30 cross-chain bridges, as shown in the diagram below: ![](../assets/eip-7533/3.png) When N chains require


=== ERC-7511 ===
TITLE: Minimal Proxy Contract with PUSH0
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-04
REQUIRES: 7, ,,  , 2, 1, 1, ,,  , 1, 1, 6, 7, ,,  , 3, 8, 5, 5

SUMMARY:
With the `PUSH0` opcode ([EIP-3855](./eip-3855.md)), introduced with the Shanghai upgrade, we optimized the previous Minimal Proxy Contract ([ERC-1167](./eip-1167.md)) by 200 gas at deployment and 5 gas at runtime, while retaining the same functionality.

SPECIFICATION:
### Standard Proxy Contract The exact runtime code for the minimal proxy contract with `PUSH0` is: ``` 365f5f375f5f365f73bebebebebebebebebebebebebebebebebebebebe5af43d5f5f3e5f3d91602a57fd5bf3 ``` where the bytes at indices 9 - 28 (inclusive) are replaced with the 20-byte address of the master implementation contract. The length of the runtime code is `44` bytes. The

MOTIVATION:
1. Reduce the contract bytecode size by `1` byte by removing a redundant `SWAP` opcode. 2. Reduce the runtime gas by replacing two `DUP` (cost `3` gas each) with two `PUSH0` (cost `2` gas each). 3. Increase the readability of the proxy contract by redesigning it from first principles

RATIONALE:
The optimized contract is constructed with essential components of the proxy contract and incorporates the recently added `PUSH0` opcode. The core elements of the minimal proxy include: 1. Copy the calldata with `CALLDATACOPY`. 2. Forward the calldata to the implementation contract using `DELEGATECALL`. 3. Copy the returned data from


=== ERC-875 ===
TITLE: Simpler NFT standard with batching and native atomic swaps
TYPE: Standards Track ERC
STATUS: Withdrawn
CREATED: 2018-02-08
REQUIRES: 

SPECIFICATION:
### function name() constant returns (string name) returns the name of the contract e.g. CarLotContract ### function symbol() constant returns (string symbol) Returns a short string of the symbol of the in-fungible token, this should be short and generic as each token is non-fungible. ### function balanceOf(address _owner) public


=== ERC-1633 ===
TITLE: Re-Fungible Token Standard (RFT)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-18
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The intention of this proposal, the Re-Fungible Token Standard, is to extend the ERC-20 Token Standard and utilize ERC-165 Standard Interface Detection in order to represent the shared ownership of an ERC-721 Non-Fungible Token. The ERC-20 Token Standard was modified as little as possible in order to allow this

SPECIFICATION:
At a minimum, third parties need two things: 1) to be able to distinguish re-fungible tokens from other token standards and 2) to determine when a non-fungible token is collectively owned. These two scenarios can be encountered from the perspective of initial contact with the non-fungible token or from

MOTIVATION:
Shared ownership occurs across many industries and for many reasons. As more assets are registered, regulated and/or represented by the ERC-721 Non-Fungible Token Standard there will be more instances where the need for shared ownership of these assets will arise. For example, ARTBLX Inc. is working towards facilitating a

RATIONALE:
Most of the decisions made around the design of this standard were done in the hopes of keeping it as flexible as possible for as many use cases as possible. This includes making the standard 100% backwards compatible with ERC-20 Token Standard and able to interact with any previously


=== ERC-6093 ===
TITLE: Custom errors for commonly-used tokens
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-12-06
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP defines a standard set of custom errors for commonly-used tokens, which are defined as [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), and [ERC-1155](./eip-1155.md) tokens. Ethereum applications and wallets have historically relied on revert reason strings to display the cause of transaction errors to users. Recent Solidity versions offer rich revert reasons with

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The following errors were designed according to the criteria described in [Rationale](#rationale). This EIP defines

MOTIVATION:
Since the introduction of Solidity custom errors in v0.8.4, these have provided a way to show failures in a more expressive and gas efficient manner with dynamic arguments, while reducing deployment costs. However, [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), [ERC-1155](./eip-1155.md) were already finalized when custom errors were released, so no errors are included

RATIONALE:
The chosen objectives for a standard for token errors are to provide context about the error, and to make moderate use of meaningful arguments (to maintain the code size benefits with respect to strings). Considering this, the error names are designed following a basic grammatical structure based on the


=== ERC-5516 ===
TITLE: Soulbound Multi-owner Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-19
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP proposes a standard interface for non-fungible double signature Soulbound multi-tokens. Previous account-bound token standards face the issue of users losing their account keys or having them rotated, thereby losing their tokens in the process. This EIP provides a solution to this issue that allows for the recycling

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. **Smart contracts implementing this EIP MUST implement all of the functions in the `EIP-5516` interface.** **Smart contracts implementing this EIP

MOTIVATION:
This EIP was inspired by the main characteristics of the [EIP-1155](./eip-1155.md) token and by articles in which benefits and potential use cases of Soulbound/Accountbound Tokens (SBTs) were presented. This design also allows for batch token transfers, saving on transaction costs. Trading of multiple tokens can be built on top

RATIONALE:
### SBT as an extension of EIP-1155 We believe that Soulbound Tokens serve as a specialized subset of existing [EIP-1155](./eip-1155.md) tokens. The advantage of such a design is the seamless compatibility of SBTs with existing NFT services. Service providers can treat SBTs like NFTs and do not need to


=== ERC-1923 ===
TITLE: zk-SNARK Verifier Registry Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-12-22
REQUIRES: 1, 6, 5, ,,  , 1, 9, 6, ,,  , 1, 9, 7

SUMMARY:
The following standard allows for the implementation of a standard contract API for the registration of zk-SNARKs ("Zero-Knowledge Succinct Non-Interactive Arguments of Knowledge"), also known as "proofs", "arguments", or "commitments". TODO: Which functionality is exposed in this standard interface?

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ```solidity pragma solidity ^0.5.6; /// @title EIP-XXXX zk-SNARK Verifier Registry Standard /// @dev See https://github.com/EYBlockchain/zksnark-verifier-standard /// Note: the ERC-165 identifier

MOTIVATION:
zk-SNARKs are a promising area of interest for the Ethereum community. Key applications of zk-SNARKs include: - Private transactions - Private computations - Ethereum scaling through proofs of 'bundled' transactions A standard interface for registering all zk-SNARKs will allow applications to more easily implement private transactions, private contracts, and

RATIONALE:
⚠️ TODO: Add Rationale section. ### Backwards Compatibility ⚠️ TODO: Add Backwards Compatibility section. ### Test Cases Truffle tests of example implementations are included in this Repo. ⚠️ TODO: Reference specific test cases because there are many currently in the repository.


=== ERC-67 ===
TITLE: URI Scheme with Metadata, Value and Bytecode
TYPE: Standards Track ERC
STATUS: Withdrawn
CREATED: 2016-02-17
REQUIRES: 

SUMMARY:
This proposal (inspired by BIP 21) defines a format for encoding a transaction into a URI, including a recipient, number of ethers (possibly zero), and optional bytecode.

SPECIFICATION:
If we follow the bitcoin standard, the result would be: ``` ethereum:<address>[?value=<value>][?gas=<suggestedGas>][?data=<bytecode>] ``` Other data could be added, but ideally the client should take them from elsewhere in the blockchain, so instead of having a `label` or a `message` to be displayed to the users, these should be read

MOTIVATION:
Imagine these scenarios: * An exchange or a instant converter like ShapeShift wants to create a single Ethereum address for payments that will be converted into credit in their internal system or output bitcoin to an address. * A store wants to show a QR code to a client

RATIONALE:
TODO


=== ERC-6464 ===
TITLE: Multi-operator, per-token ERC-721 approvals.
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2023-02-02
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
[ERC-721](./eip-721.md) did not foresee the approval of multiple operators to manage a specific token on behalf of its owner. This lead to the establishment of `setApprovalForAll()` as the predominant way to authorise operators, which affords the approved address control over all assets and creates an unnecessarily broad security risk

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. To comply with this EIP, a contract MUST implement `IERC6464` (defined herein) and the `ERC165`

MOTIVATION:
The NFT standard defined in ERC-721 allows token owners to "approve" arbitrary addresses to control their tokens—the approved addresses are known as "operators". Two types of approval were defined: 1. `approve(address,uint256)` provides a mechanism for only a single operator to be approved for a given `tokenId`; and 2. `setApprovalForAll(address,bool)`

RATIONALE:
### Draft notes to be expanded upon 1. Approvals granted via the newly introduced methods are called *explicit* as a means of easily distinguishing them from those granted via the standard `ERC721.approve()` and `ERC721.setApprovalForAll()` functions. However they follow the same intent: authorising operators to act on the owner's behalf.


=== ERC-5773 ===
TITLE: Context-Dependent Multi-Asset Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-10-10
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The Multi-Asset NFT standard allows for the construction of a new primitive: context-dependent output of information per single NFT. The context-dependent output of information means that the asset in an appropriate format is displayed based on how the token is being accessed. I.e. if the token is being opened

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity /// @title ERC-5773 Context-Dependent Multi-Asset Tokens /// @dev See https://eips.ethereum.org/EIPS/eip-5773 /// @dev Note: the ERC-165 identifier for this interface

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time to standardize additional utility for them. Having multiple assets associated with a single NFT allows for greater utility, usability and forward compatibility. In the four

RATIONALE:
Designing the proposal, we considered the following questions: 1. **Should we use Asset or Resource when referring to the structure that comprises the token?**\ The original idea was to call the proposal Multi-Resource, but while this denoted the broadness of the structures that could be held by a single


=== ERC-634 ===
TITLE: Storage of text records in ENS
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2017-05-17
REQUIRES: 1, 3, 7, ,,  , 1, 6, 5

SUMMARY:
This EIP defines a resolver profile for ENS that permits the lookup of arbitrary key-value text data. This allows ENS name holders to associate e-mail addresses, URLs and other informational data with a ENS name.

SPECIFICATION:
### Resolver Profile A new resolver interface is defined, consisting of the following method: ```solidity interface IERC634 { /// @notice Returns the text data associated with a key for an ENS name /// @param node A nodehash for an ENS name /// @param key A key to lookup text

MOTIVATION:
There is often a desire for human-readable metadata to be associated with otherwise machine-driven data; used for debugging, maintenance, reporting and general information. In this EIP we define a simple resolver profile for ENS that permits ENS names to associate arbitrary key-value text.

RATIONALE:
### Application-specific vs general-purpose record types Rather than define a large number of specific record types (each for generally human-readable data) such as `url` and `email`, we follow an adapted model of DNS's `TXT` records, which allow for a general keys and values, allowing future extension without adjusting the


=== ERC-1388 ===
TITLE: Attestation Issuers Management List
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-08
REQUIRES: 


=== ERC-5006 ===
TITLE: Rental NFT, NFT User Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-04-12
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This standard is an extension of [ERC-1155](./eip-1155.md). It proposes an additional role (`user`) which can be granted to addresses that represent a `user` of the assets rather than an `owner`.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity ^0.8.0; interface IERC5006 { struct UserRecord { uint256 tokenId; address owner; uint64 amount; address user;

MOTIVATION:
Like [ERC-721](./eip-721.md), [ERC-1155](./eip-1155.md) tokens may have utility of some kind. The people who “use” the token may be different than the people who own it (such as in a rental). Thus, it would be useful to have separate roles for the “owner” and the “user” so that the “user”

RATIONALE:
This model is intended to facilitate easy implementation. The following are some problems that are solved by this standard: ### Clear Rights Assignment With Dual “owner” and “user” roles, it becomes significantly easier to manage what lenders and borrowers can and cannot do with the NFT (in other words,


=== ERC-1775 ===
TITLE: App Keys, application specific wallet accounts
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-02-20
REQUIRES: 

SUMMARY:
In a wallet, an user often holds most of her funds in her main accounts. These accounts require a significant level of security and should not be delegated in any way, this significantly impacts the design of cryptographic applications if a user has to manually confirm every action. Also

SPECIFICATION:
### Applications An app is a website (or other) that would like to request from a wallet to access a cryptographic key specifically derived for this usage. It can be any form of cryptography/identity relying application, Ethereum based but not only. Once connected to a wallet, an application can

MOTIVATION:
Wallets developers have agreed on an HD derivation path for ethereum accounts using BIP32, BIP44, SLIP44, [(see the discussion here)](https://github.com/ethereum/EIPs/issues/84). Web3 wallets have implemented in a roughly similar way the rpc eth api. [EIP-1102](./eip-1102.md) introduced privacy through non automatic opt-in of a wallet account into an app increasing privacy.

RATIONALE:
### Sharing application keys across domains: While this does not explicit cover cases of sharing these app keys between pages on its own, this need can be met by composition: Since a domain would get a unique key per persona, and because domains can intercommunicate, one domain (app) could


=== ERC-7496 ===
TITLE: NFT Dynamic Traits
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-28
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This specification introduces a new interface that extends [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) that defines methods for setting and getting dynamic onchain traits associated with non-fungible tokens. These dynamic traits can be used to represent properties, characteristics, redeemable entitlements, or other attributes that can change over time. By defining these traits

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Contracts implementing this EIP MUST include the events, getters, and setters as defined below, and

MOTIVATION:
Trait values for non-fungible tokens are often stored offchain. This makes it difficult to query and mutate these values in contract code. Specifying the ability to set and get traits onchain allows for new use cases like redeeming onchain entitlements and transacting based on a token's traits. Onchain traits

RATIONALE:
The design of this specification is primarily a key-value mapping for maximum flexibility. This interface for traits was chosen instead of relying on using regular `getFoo()` and `setFoo()` style functions to allow for brevity in defining, setting, and getting traits. Otherwise, contracts would need to know both the getter


=== ERC-7776 ===
TITLE: Transparent Financial Statements
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-09-20
REQUIRES: 20

SUMMARY:
This proposal defines a standard API that enables EVM Blockchain-based companies (or also called "protocols") to publish their financial information, specifically Income Statements and Balance Sheets, on- chain in a transparent and accessible manner through solidity smart contracts. This standard aims to emulate the reporting structure used by publicly

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. All Transparent Financial Statements Standard implementations MUST implement ERC-20 to represent shares, and the financial

MOTIVATION:
The motivation of this ERC is to bring seriousness to the cryptocurrencies investments market. Currently, the situation is as follows: The current state of token investment analysis is opaque, with most information presented in an abstract and non-quantitative form. This standard API ensures a consistent and reliable way for

RATIONALE:
ERC-20 is enforced because implementation details like Earnings Per Token calculation directly carry over to the accounting. This standardization makes the Transparent Financial Statements compatible with all ERC-20 use cases. This implementation enables the protocol to share their financial information both as their latest updated Balance Sheet (if the


=== ERC-6220 ===
TITLE: Composable NFTs utilizing Equippable Parts
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-12-20
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 5, 7, 7, 3, ,,  , 6, 0, 5, 9

SUMMARY:
The Composable NFTs utilizing equippable parts standard extends [ERC-721](./eip-721.md) by allowing the NFTs to selectively add parts to themselves via equipping. Tokens can be composed by cherry picking the list of parts from a Catalog for each NFT instance, and are able to equip other NFTs into slots, which

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Equippable tokens The interface of the core smart contract of the equippable tokens. ```solidity /// @title EIP-6220 Composable NFTs

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time to standardize additional utility for them. Having the ability for tokens to equip other tokens and be composed from a set of available parts allows

RATIONALE:
Designing the proposal, we considered the following questions: 1. **Why are we using a Catalog in stead of supporting direct NFT equipping?**\ If NFTs could be directly equipped into other NFTs without any oversight, the resulting composite would be unpredictable. Catalog allows for parts to be pre-verified in order


=== ERC-6315 ===
TITLE: ERC-2771 Namespaced Account Abstraction
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-01-11
REQUIRES: 1, 6, 5, ,,  , 2, 7, 7, 1

SUMMARY:
[ERC-2771](./eip-2771.md) is a prevalent standard for handling meta-transactions via trusted forwarders. This EIP proposes an extension to [ERC-2771](./eip-2771.md) to introduce a namespacing mechanism, facilitating trustless account abstraction through per-forwarder namespaced addresses.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The key words "Forwarder" and "Recipient" in this document are to be interpreted as described

RATIONALE:
The approach of simply augmenting existing EIP functions with new `address` parameters, rather than crafting new interfaces for the most commonly used EIPs, is employed to ensure broader applicability of this namespacing proposal.


=== ERC-7644 ===
TITLE: ERC-721 Name Registry Extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-03-01
REQUIRES: 721

SUMMARY:
This extension defines an interface that adds a naming mechanism to [ERC-721](./eip-721.md) tokens. It allows each token to have a unique name with a set expiration date, ensuring uniqueness within the current NFT contract. The interface includes functions for assigning, updating, and querying names and their associated tokens, ensuring

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Implementers of this extension **MUST** have all of the following functions: ```solidity pragma solidity ^0.8.0;

MOTIVATION:
As decentralized domain registration methods evolve with the integration of NFTs, we see an opportunity to extend this paradigm to the realm of usernames. By associating token IDs with usernames, we enhance the intuitive identification of entities within decentralized ecosystems. This integration serves multiple purposes: - **Intuitiveness:** Numeric token

RATIONALE:
#### Name Expiry By implementing expiration periods for usernames, we introduce several advantages. This mechanism ensures a dynamic environment where unused or outdated usernames can be released, fostering a healthy ecosystem. It encourages turnover of usernames, preventing long-term hoarding and promoting active participation. Users are motivated to manage their


=== ERC-7390 ===
TITLE: Vanilla Options for ERC-20 Tokens
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-09-02
REQUIRES: 2, 0, ,,  , 1, 1, 5, 5

SUMMARY:
This standard defines a comprehensive set of functions and events facilitating seamless interactions (creation, management, exercising, etc.) for vanilla options. Vanilla options grant the right, without obligation, to buy or sell an asset at a set price within a specified timeframe. This standard doesn't represent a simple option that

SPECIFICATION:
Implementations of this proposal MUST also implement ERC-1155 to give the possibility to buy only a fraction of the issuance. ### Interface ```solidity interface IERC7390 { enum Side { Call, Put } struct VanillaOptionData { Side side; address underlyingToken; uint256 amount; address strikeToken; uint256 strike; address premiumToken; uint256 premium;

MOTIVATION:
Options are widely used financial instruments, and have a true usefulness for investors and traders. It offers versatile risk management tools and speculative opportunities.\ In the decentralized finance, many options-selling platform emerged, but each of these protocols implements their own definition of an option. This leads to incompatibilities, which

RATIONALE:
This contract's concept is oracle-free, because we assume that a rational buyer will exercise his option only if it's profitable for him. The premium is to be determined by the option writer. writer is free to choose how to calculate the premium, e.g. by using *Black-Scholes model* or something


=== ERC-1319 ===
TITLE: Smart Contract Package Registry Interface
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-08-13
REQUIRES: 

SUMMARY:
This EIP specifies an interface for publishing to and retrieving assets from smart contract package registries. It is a companion EIP to [1123](./eip-1123.md) which defines a standard for smart contract package manifests.

SPECIFICATION:
The specification describes a small read/write API whose components are mandatory. It allows registries to manage versioned releases using the conventions of [semver](https://semver.org/) without imposing this as a requirement. It assumes registries will share the following structure and conventions: + a **registry** is a deployed contract which manages a

MOTIVATION:
The goal is to establish a framework that allows smart contract publishers to design and deploy code registries with arbitrary business logic while exposing a set of common endpoints that tooling can use to retrieve assets for contract consumers. A clear standard would help the existing EthPM Package Registry

RATIONALE:
The proposal hopes to accomplish the following: + Define the smallest set of inputs necessary to allow registries to map package names to a set of release versions while allowing them to use any versioning schema they choose. + Provide the minimum set of getter methods needed to retrieve


=== ERC-2645 ===
TITLE: Hierarchical Deterministic Wallet for Layer-2
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-05-13
REQUIRES: 

SUMMARY:
We provide a Derivation Path allowing a user to derive hierarchical keys for Layer-2 solutions depending on the zk-technology, the application, the user’s Layer-1 address, as well as an efficient grinding method to enforce the private key distribution within the curve domain. The propose Derivation Path is defined as

SPECIFICATION:
Starkware keys are derived with the following [BIP43](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki)-compatible derivation path, with direct inspiration from [BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki): ``` m / purpose' / layer' / application' / eth_address_1' / eth_address_2' / index ``` where: * `m` - the seed. * `purpose` - `2645` (the number of this EIP). * `layer` - the

MOTIVATION:
In the context of Computation Integrity Proof (CIP) Layer-2 solutions such as ZK-Rollups, users are required to sign messages on new elliptic curves optimized for those environments. Extensive work has been done to make it secure on Bitcoin via [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki), [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki) and [BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki). These protocols are the standard for

RATIONALE:
This EIP specifies two aspects of keys derivation in the context of Hierarchical Wallets: - Derivation Path - Grinding Algorithm to enforce a uniform distribution over the elliptic curve. The derivation path is defined to allow efficient keys separation based on technology and application while maintaining a 1-1 relation


=== ERC-5187 ===
TITLE: Extend EIP-1155 with rentable usage rights
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-04-17
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This standard is an extension of [EIP-1155](./eip-1155.md). It proposes to introduce separable, rentable, and transferable usage rights (in the form of NFT-IDs), enabling the property owner (the only NFT holder) to rent out the NFT to multiple users (ID holders) at the same time for different terms, and be

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity pragma solidity ^0.8.0; /// Note: the ERC-165 identifier for this interface is 0x6938e358. interface IRental /* is IERC165,IERC1155 */

MOTIVATION:
The well-accepted [EIP-721](./eip-721.md) and EIP-1155 standards focused on the ownership of unique assets, quite sensible in the time of NFTs being used primarily as arts and collectibles, or, you can say, as private property rights. ### First Step: "Expirable" NFTs The advent of private ownership in the real world

RATIONALE:
Implementing the proposal to create rentable NFTs has two main benefits. One is that NFTs with multiple usage rights allow NFT property owners to perform the safeRent function and rent out usage rights to multiple users at the same time. For each usage right leased and expires, the property


=== ERC-5252 ===
TITLE: Account-bound Finance
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-06-29
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 5, 1, 1, 4

SUMMARY:
This EIP proposes a form of smart contract design pattern and a new type of account abstraction on how one's finance should be managed, ensuring transparency of managing investments and protection with self-sovereignty even from its financial operators. This EIP enables greater self-sovereignty of one's assets using a personal

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. The specification consists of two patterns for **Interaction** and **Governance**. ### Interaction #### Interfaces The interaction pattern consists of 4

MOTIVATION:
Decentralized finance (DeFi) faces a trust issue. Smart contracts are often proxies, with the actual logic of the contract hidden away in a separate logic contract. Many projects include a multi-signature "wallet" with unnecessarily-powerful permissions. And it is not possible to independently verify that stablecoins have enough real-world assets

RATIONALE:
### Gas saving for end user The gas cost of using multiple contracts (as opposed to a single one) actually saves gas long-run if the clone factory pattern is applied. One contract storing users' states globally means each user is actually paying for the storage cost of other users


=== ERC-7524 ===
TITLE: PLUME Signature in Wallets
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-24
REQUIRES: 

SUMMARY:
ZK-SNARKs have enabled ideation for new identity applications based on anonymous proof-of-ownership. One of the primary technologies that would enable the jump from existing apps to systems that require anonymous uniqueness is the development of verifiably deterministic signatures. Because Ethereum is based on ECDSA, there is no way right

SPECIFICATION:
We propose a new signature standard that offers the following properties, to be implemented for standard ECDSA keys within wallets: 1. It produces signatures that contain a deterministic component and a nondeterministic component. The deterministic component may be used as a *nullifier*. 2. Signers can use existing secpk256k1 keypairs,

MOTIVATION:
- Existing ZK applications have the advantage that there is no uniqueness constraint on the provers: that is, allowing the same wallet to prove itself as a member more than once is intended. However, many applications require a maximum of one action per user, especially protocols that desire Sybil

RATIONALE:
We will define a few specific properties we are looking for in a candidate algorithm, then define a few other intuitive algorithms and explain why they don’t actually work. - Noninteractivity - The importance of noninteractivity in ZK ID systems is that it enables a large anonymity set from


=== ERC-4400 ===
TITLE: EIP-721 Consumable Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2021-10-30
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This specification defines standard functions outlining a `consumer` role for instance(s) of [EIP-721](./eip-721.md). An implementation allows reading the current `consumer` for a given NFT (`tokenId`) along with a standardized event for when an `consumer` has changed. The proposal depends on and extends the existing [EIP-721](./eip-721.md).

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Every contract compliant to the `EIP721Consumable` extension MUST implement the `IEIP721Consumable` interface. The **consumer extension** is OPTIONAL for EIP-721 contracts. ```solidity

MOTIVATION:
Many [EIP-721](./eip-721.md) contracts introduce their own custom role that grants permissions for utilising/consuming a given NFT instance. The need for that role stems from the fact that other than owning the NFT instance, there are other actions that can be performed on an NFT. For example, various metaverses use

RATIONALE:
Key factors influencing the standard: - Keeping the number of functions in the interfaces to a minimum to prevent contract bloat - Simplicity - Gas Efficiency - Not reusing or overloading other already existing roles (e.g. owners, operators, approved addresses) ### Name The chosen name resonates with the purpose


=== ERC-7015 ===
TITLE: NFT Creator Attribution
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-05-11
REQUIRES: 5, 5, ,,  , 1, 5, 5, ,,  , 7, 1, 2, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This Ethereum Improvement Proposal aims to solve the issue of creator attribution for Non-Fungible Token (NFT) standards ([ERC-721](./eip-721.md), [ERC-1155](./eip-1155.md)). To achieve this, this EIP proposes a mechanism where the NFT creator signs the required parameters for the NFT creation, including the NFT metadata in a hash along with any

SPECIFICATION:
The keywords “MUST,” “MUST NOT,” “REQUIRED,” “SHALL,” “SHALL NOT,” “SHOULD,” “SHOULD NOT,” “RECOMMENDED,” “MAY,” and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ERC-721 and ERC-1155 compliant contracts MAY implement this NFT Creator Attribution extension to provide a standard event to be emitted that

MOTIVATION:
Current NFT platforms assume that the wallet deploying the smart contract is the creator of the NFT, leading to a misattribution in cases where a different wallet sends the deployment transaction. This happens often when working with smart wallet accounts, and new contract deployment strategies such as the first

RATIONALE:
By standardizing the `CreatorAttribution` event, this EIP enables platforms to ascertain creator attribution without relying on implicit assumptions. Establishing a standard for creator attribution empowers platforms to manage the complex aspects of deploying contracts while preserving accurate onchain creator information. This approach ensures a more reliable and transparent method


=== ERC-1056 ===
TITLE: Ethereum Lightweight Identity
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-03
REQUIRES: 

SUMMARY:
This ERC describes a standard for creating and updating identities with a limited use of blockchain resources. An identity can have an unlimited number of `delegates` and `attributes` associated with it. Identity creation is as simple as creating a regular key pair ethereum account, which means that it's free

SPECIFICATION:
This ERC specifies a contract called `EthereumDIDRegistry` that is deployed once and can then be commonly used by everyone. ### Identity ownership By default an identity is owned by itself, meaning whoever controls the ethereum account with that address. The owner can be updated to a new key pair

MOTIVATION:
As we have been developing identity systems for the last couple of years at uPort it has become apparent that the cost of identity creation is a large issue. The previous Identity proposal [ERC-725](./eip-725.md) faces this exact issue. Our requirements when creating this ERC is that identity creation should

RATIONALE:
For on-chain interactions Ethereum has a built in account abstraction that can be used regardless of whether the account is a smart contract or a key pair. Any transaction has a `msg.sender` as the verified send of the transaction. Since each Ethereum transaction has to be funded, there is


=== ERC-7682 ===
TITLE: Auxiliary Funds Capability
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-09
REQUIRES: 5792

SUMMARY:
An [EIP-5792](./eip-5792.md) compliant capability that allows wallets to indicate to apps that they have access to funds beyond those that can be accounted for by looking up balances onchain given the wallet's address. A wallet's ability to access auxiliary funds is communicated to apps as part of its response

SPECIFICATION:
One new [EIP-5792](./eip-5792.md) wallet capability is defined. ### Wallet Implementation To conform to this specification, wallets that wish to indicate that they have access to auxiliary funds MUST, for each chain they have access to auxiliary funds on, respond to `wallet_getCapabilities` calls with an `auxiliaryFunds` object with a `supported`

MOTIVATION:
Many applications check users' balances before letting them complete some action. For example, if a user wants to swap some amount of tokens on a dex, the dex will commonly block the user from doing so if it sees that the user does not have that amount of tokens

RATIONALE:
### Alternatives #### Advanced Balance Fetching An alternative we considered is defining a way for apps to fetch available auxiliary balances. This could be done, for example, by providing a URL as part of the `auxiliaryFunds` capability that apps could use to fetch auxiliary balance information. However, we ultimately


=== ERC-6809 ===
TITLE: Non-Fungible Key Bound Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-03-31
REQUIRES: 721

SUMMARY:
A standard interface for Non-Fungible Key Bound Tokens (**NFKBT/s**), a subset of the more general Key Bound Tokens (**KBT/s**). The following standardizes an API for tokens within smart contracts and provides basic functionality to the [addBindings](#addbindings-function) function. This function designates **Key Wallets**[^1], which are responsible for conducting a **Safe

SPECIFICATION:
### `IKBT721` (Token Contract) **NOTES**: - The following specifications use syntax from Solidity `0.8.17` (or above) - Callers MUST handle `false` from `returns (bool success)`. Callers MUST NOT assume that `false` is never returned! ```solidity interface IKBT721 { event AccountSecured(address indexed _account, uint256 _noOfTokens); event AccountResetBinding(address indexed _account); event

MOTIVATION:
In this fast-paced technologically advancing world, people learn and mature at different speeds. The goal of global adoption must take into consideration the target demographic is of all ages and backgrounds. Unfortunately for self-custodial assets, one of the greatest pros is also one of its greatest cons. The individual

RATIONALE:
The intent from individual technical decisions made during the development of **NFKBTs** focused on maintaining consistency and backward compatibility with ERC-721s, all the while offering self-custodial security features to the user. It was important that **NFKBT's** inherited all of ERC-721s characteristics to comply with requirements found in dApps which


=== ERC-7208 ===
TITLE: On-Chain Data Containers
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-06-09
REQUIRES: 165

SUMMARY:
This ERC defines a series of interfaces for the abstraction of storage of on-chain data by implementing the logic functions that govern such data on independent smart contracts. "On-chain Data Containers" (ODCs) refer to the separation and indexing of data storage away from data management. We propose that on-chain

SPECIFICATION:
### Terms **Data Point**: A uniquely identifiable reference to an on-chain data structure stored within one or many **Data Objects** and managed by one or many **Data Managers**. **Data Points** are issued by a **Data Point Registry**. **Data Object**: A Smart Contract implementing the low-level storage management of information

MOTIVATION:
As the Ethereum ecosystem grows, so does the demand for on-chain functionalities. The market encourages a desire for broader adoption through more complex systems and there is a constant need for improved efficiency. We have seen times when an explosion of new standard token proposals was solely driven by

RATIONALE:
The decision to encode **Data Points** as `bytes32` data pointers is primarily driven by flexibility and future-proofing. The use `bytes32` allows for a wide range of data encodings. This provides the developer with many options to accommodate diverse use cases. Furthermore, as Ethereum and its standards continue to evolve,


=== ERC-1203 ===
TITLE: ERC-1203 Multi-Class Token Standard (ERC-20 Extension)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-07-01
REQUIRES: 

SUMMARY:
The following standard allows for the implementation of a standard API for MCTs within smart contracts. This standard provides basic functionality to track, transfer, and convert MCTs.

SPECIFICATION:
```solidity contract ERC20 { function totalSupply() public view returns (uint256); function balanceOf(address _owner) public view returns (uint256); function transfer(address _to, uint256 _value) public returns (bool); function approve(address _spender, uint256 _value) public returns (bool); function allowance(address _owner, address _spender) public view returns (uint256); function transferFrom(address _from, address _to, uint256 _value)

MOTIVATION:
This standard is heavily inspired by ERC-20 Token Standard and ERC-721 Non-Fungible Token Standard. However, whereas these standards are chiefly concerned with representation of items/value in a single class, fungible or note, this proposed standard focus on that of a more complexed, multi-class system. It is fair to think

RATIONALE:
This standard purposely extends ERC-20 Token Standard so that new MCTs following or existing ERC-20 tokens extending this standard are fully compatible with current wallets and exchanges. In addition, new methods and events are kept as closely to ERC-20 conventions as possible for ease of adoption. We have considered


=== ERC-5094 ===
TITLE: URL Format for Ethereum Network Switching
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-05-13
REQUIRES: 6, 8, 1, ,,  , 8, 3, 1

SUMMARY:
This standard includes all needed information for adding a network to a wallet via URL, by including parameters such as `chainId`, `rpc_url`, `chain_name` and others, such that the network configuration is provided through the URL itself.

SPECIFICATION:
### Syntax Network Switching URLs contain "ethereum" in their schema (protocol) part and are constructed as follows: network_add = erc831_part "add" "@" chain_id [ "/" ] "?" parameters erc831_part = "ethereum:network-" chain_id = 1*DIGIT parameters = parameter *( "&" parameter ) parameter = key "=" value key = required_keys

MOTIVATION:
As observed with the use of [EIP-681](./eip-681.md) and its implementation in current mobile wallets, transactions can be made, approved, viewed, and used. However, if the wallet is instructed to perform a transaction on a chain they have not yet been configured before, the operation tends to fail. This is

RATIONALE:
In furtherance of the Ethereum URL saga, network configuration is a needed addition to the possibility of Ethereum URLs. This would improve functionality for URLs, and offer non-mainnet users a way to connect without needing to configure their wallet by hand. The URL follows [EIP-831](./eip-831.md) with the `PREFIX` being


=== ERC-4931 ===
TITLE: Generic Token Upgrade Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-11-02
REQUIRES: 20

SUMMARY:
The following standard allows for the implementation of a standard API for [ERC-20](./eip-20.md) token upgrades. This standard specifies an interface that supports the conversion of tokens from one contract (called the "source token") to those from another (called the "destination token"), as well as several helper methods to provide

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Please Note: Methods marked with (Optional Ext.) are a part of the optional extension for downgrade functionality and may remain

MOTIVATION:
Token contract upgrades typically require each asset holder to exchange their old tokens for new ones using a bespoke interface provided by the developers. This standard interface will allow asset holders as well as centralized and decentralized exchanges to conduct token upgrades more efficiently since token contract upgrade scripts

RATIONALE:
There have been several notable ERC20 upgrades (Ex. Golem: GNT -> GLM) where the upgrade functionality is written directly into the token contracts. We view this as a suboptimal approach to upgrades since it tightly couples the upgrade with the existing tokens. This EIP promotes the use of a


=== ERC-2021 ===
TITLE: Payoutable Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-05-10
REQUIRES: 2, 0, ,,  , 1, 0, 6, 6, ,,  , 1, 9, 9, 6

SUMMARY:
Token wallet owners (or approved addresses) can order payout requests through blockchain. This is done by calling the ```orderPayoutFrom``` or ```orderPayoutFrom``` methods, which initiate the workflow for the token contract operator to either honor or reject the payout request. In this case, payout instructions are provided when submitting the

SPECIFICATION:
```solidity interface IPayoutable /* is ERC-20 */ { enum PayoutStatusCode { Nonexistent, Ordered, InProcess, FundsInSuspense, Executed, Rejected, Cancelled } function authorizePayoutOperator(address orderer) external returns (bool); function revokePayoutOperator(address orderer) external returns (bool); function orderPayout(string calldata operationId, uint256 value, string calldata instructions) external returns (bool); function orderPayoutFrom(string calldata operationId, address walletToBePaidOut,

MOTIVATION:
Nowadays most of the token payout requests, need a previous centralized transaction, to be able to define the payout destination to be able to execute the payout (burn transaction). In the aim of trying to bring all the needed steps into decentralization, exposing all the needed steps of token

RATIONALE:
This standards provides a functionality to allow token holders to start payout requests in a decentralized way. It's important to highlight that the token operator, need to process all payout request, updating the payout status based on the linked payment that will be done. Payout instruction format is open.


=== ERC-1761 ===
TITLE: Scoped Approval Interface
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-02-18
REQUIRES: 165

SUMMARY:
This interface is designed for use with token contracts that have an "ID" domain, such as ERC-1155 or ERC-721. This enables restricted approval of one or more Token IDs to a specific "scope". When considering a smart contract managing tokens from multiple different domains, it makes sense to limit

MOTIVATION:
It may be desired to restrict approval in some applications. Restricted approval can prevent losses in cases where users do not audit the contracts they're approving. No standard API is supplied to manage scopes as this is implementation specific. Some implementations may opt to offer a fixed number of

RATIONALE:
The initial design was proposed as an extension to ERC-1155: [Discussion Thread - Comment 1](https://github.com/ethereum/EIPs/issues/1155#issuecomment-459505728). After some discussion: [Comment 2](https://github.com/ethereum/EIPs/issues/1155#issuecomment-460603439) and suggestions by the community to implement this approval mechanism in an external contract [Comment 3](https://github.com/ethereum/EIPs/issues/1155#issuecomment-461758755), it was decided that as an interface standard, this design would allow many


=== ERC-900 ===
TITLE: Simple Staking Interface
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-02-22
REQUIRES: 

SUMMARY:
The following standard describes a common staking interface allowing for easy to use staking systems. The interface is kept simple allowing for various use cases to be implemented. This standard describes the common functionality for staking as well as providing information on stakes.

SPECIFICATION:
```solidity interface Staking { event Staked(address indexed user, uint256 amount, uint256 total, bytes data); event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data); function stake(uint256 amount, bytes data) public; function stakeFor(address user, uint256 amount, bytes data) public; function unstake(uint256 amount, bytes data) public; function totalStakedFor(address addr) public view

MOTIVATION:
As we move to more token models, having a common staking interface which is familiar to users can be useful. The common interface can be used by a variety of applications, this common interface could be beneficial especially to things like Token curated registries which have recently gained popularity.


=== ERC-7662 ===
TITLE: AI Agent NFTs
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-03-26
REQUIRES: 721

SUMMARY:
This proposal introduces a standard for AI agent NFTs. When AI Agents are created and traded as NFTs, it doesn't make sense to put the prompts in the token metadata, therefore it requires a standard custom struct. It also doesn't make sense to store the prompts directly onchain as

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. All ERC-XXXX compliant contracts MUST implement the standard [ERC-721](./eip-721.md) functionality for minting and transferring NFTs,

MOTIVATION:
The creation and trading of AI Agent NFTs are a natural fit and offer the potential for an entirely new onchain market. This requires some custom data to be embedded in the NFT through a custom struct and this needs to be standardized so that any marketplace or AI

RATIONALE:
This standard provides a unified way to create and parse AI Agent NFTs. This standard codifies the necessary parameters of Name, Description, Model, User Prompt, and System Prompt for creating and using AI Agent NFTs. It doesn't make practical sense to store the user and system prompts in an


=== ERC-5501 ===
TITLE: Rental & Delegation NFT - EIP-721 Extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-18
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 4, 4, 0, 0, ,,  , 4, 9, 0, 7

SUMMARY:
The following standard proposes an additional `user` role for [EIP-721](./eip-721.md). This role grants the permission to use the NFT with no ability to transfer or set users. It has an expiry and a flag if the token is borrowed or not. `Owner` can delegate the NFT for usage to

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. **Every compliant contract MUST implement the `IERC5501` interface. This extension is OPTIONAL for [EIP-721](./eip-721.md) contracts.** ```solidity /** * @title IERC5501:

MOTIVATION:
Collectibles, gaming assets, metaverse, event tickets, music, video, domains, real item representation are several among many NFT use cases. With [EIP-721](./eip-721.md) only the owner can reap the benefits. However, with most of the utilities it would be beneficial to distinguish between the token owner and its user. For instance

RATIONALE:
The main factors influencing this standard are: * **[EIP-4400](./eip-4400.md) and [EIP-4907](./eip-4907.md)** * **Allow lending and borrowing without the necessary stake or overcollateralization while owner retains ownership** * **Leave the delegation option available** * **Keep the number of functions in the interfaces to a minimum while achieving desired functionality** *


=== ERC-4353 ===
TITLE: Interface for Staked Tokens in NFTs
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-10-08
REQUIRES: 165

SUMMARY:
[EIP-721](./eip-721.md) tokens can be deposited or staked in NFTs for a variety of reasons including escrow, rewards, benefits, and others. There is currently no means of retrieving the number of tokens staked and/or bound to an NFT. This proposal outlines a standard that may be implemented by all wallets

SPECIFICATION:
```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity ^0.8.0; /** * @dev Interface of the ERC4353 standard, as defined in the * https://eips.ethereum.org/EIPS/eip-4353. * * Implementers can declare support of contract interfaces, which can then be * queried by others. * * Note: The ERC-165 identifier for this interface is 0x3a3d855f.

MOTIVATION:
Without staked token data, the actual amount of staked tokens cannot be conveyed from token owners to other users, and cannot be displayed in wallets, marketplaces, or block explorers. The ability to identify and verify an exogenous value derived from the staking process may be critical to the aims

RATIONALE:
This standard is completely agnostic to how tokens are deposited or handled by the NFT. It is, therefore, the choice and responsibility of the author to encode and communicate the encoding of their tokenomics to purchasees of their token and/or to make their contracts viewable by purchasees. Although the


=== ERC-1900 ===
TITLE: dType - Decentralized Type System for EVM
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-03-28
REQUIRES: 

SUMMARY:
We are proposing a decentralized Type System for Ethereum, to introduce data definition (and therefore ABI) consistency. This ERC focuses on defining an on-chain Type Registry (named `dType`) and a common interface for creating types, based on `struct`s.

SPECIFICATION:
The Type Registry can have a governance protocol for its CRUD operations. However, this, and other permission guards are not covered in this proposal. ### Type Definition and Metadata The dType registry should support the registration of Solidity's elementary and complex types. In addition, it should also support contract

MOTIVATION:
In order to build a network of interoperable protocols on Ethereum, we need data standardization, to ensure a smooth flow of on-chain information. Off-chain, the Type Registry will allow a better analysis of blockchain data (e.g. for blockchain explorers) and creation of smart contract development tools for easily using

RATIONALE:
The Type Registry must store the minimum amount of information for rebuilding the type ABI definition. This allows us to: * support on-chain interoperability * decode blockchain side effects off-chain (useful for block explorers) * allow off-chain tools to cache and search through the collection (e.g. editor plugin for


=== ERC-2746 ===
TITLE: Rules Engine Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-06-20
REQUIRES: 

SUMMARY:
This standard proposes an interface that will allow the creation of hierarchal sets of rules (i.e., RuleTrees) that can be invoked to evaluate and manipulate a registered data domain. At the time of this draft, all intentions to insert additional functionality onto the blockchain requires the coding and creation

SPECIFICATION:
For the clarification of terminology, an Attribute is a registered data point within the data domain, representing data that exists either in the rules engine contract or elsewhere. A Rule is an predefined action that occurs upon a single data point (i.e., Attribute) in the predefined data domain. For

MOTIVATION:
At the time of this draft, all development for Ethereum requires writing the code that forms smart contracts and then deploying those contracts to Ethereum. In order to create a proper contract, many considerations must be taken into account when designing and implementing the code, especially in terms of

RATIONALE:
### Attributes The data points are abstracted in order to let the implementation provide the mechanism for retrieving/populating the data. Data can be held by an internal data structure, another contract's method, or any number of other options. ### Events The events specified will help the caller of the


=== ERC-4885 ===
TITLE: Subscription NFTs and Multi Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-03-08
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
The following standard allows for the implementation of a standard API for subscribing to non-fungible and multi tokens. [EIP-20](./eip-20.md) tokens are deposited in exchange for subscription tokens that give the right to use said non-fungible and multi tokens for a specified time limited or unlimited period.

SPECIFICATION:
The subscriber deposits EIP-20 to receive an NFT and subscription. Subscription tokens balance automatically decreases linearly over the lifetime of usage of the NFT, and use of the NFT is disabled once the subscription token balance falls to zero. The subscriber can top up the balance to extend the

MOTIVATION:
This standard offers a flexible, general purpose way to subscribe to the use of assets or services offered by [EIP-721](./eip-721.md) or [EIP-1155](./eip-1155.md) contracts. From here on in, for the sake of simplicity, these contracts will be known as NFTs; the provider is the issuer of said NFTs and the

RATIONALE:
### Tokenisation of subscriptions The subscription itself has value when it is exchanged for a deposit. This proposal enables subscriptions to be 'tokenised' thus secondary markets can exist where the subscription tokens can be bought and sold. For example, a fan might want to sell their season ticket, that


=== ERC-1337 ===
TITLE: Subscriptions on the blockchain
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-08-01
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
To enable replay-able transactions users sign a concatenated bytes hash that is composed of the input data needed to execute the transaction. This data is stored off chain by the recipient of the payment and is transmitted to the customers smart contract for execution alongside a provided signature.

SPECIFICATION:
#### Enum Contract EIP-1337 Contracts should be compiled with a contract that references all the enumerations that are required for operation ```SOLIDITY /// @title Enum - Collection of enums /// Original concept from Richard Meissner - <richard@gnosis.pm> Gnosis safe contracts contract Enum { enum Operation { Call, DelegateCall, Create,

MOTIVATION:
Recurring payments are the bedrock of SaSS and countless other businesses, a robust specification for defining this interaction will enable a broad spectrum of revenue generation and business models.

RATIONALE:
Merchants who accept credit-cards do so by storing a token that is retrieved from a third party processor(stripe, paypal, etc), this token is used to grant access to pull payment from the cx's credit card provider and move funds to the merchant account. Having users sign input data acts


=== ERC-7417 ===
TITLE: Token Converter
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-07-27
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 2, 2, 3

SUMMARY:
There are multiple token standards on Ethereum chain currently. This EIP introduces a concept of cross-standard interoperability by creating a service that allows [ERC-20](./eip-20.md) tokens to be upgraded to [ERC-223](./eip-223.md) tokens anytime. [ERC-223](./eip-223.md) tokens can be converted back to [ERC-20](./eip-20.md) version without any restrictions to avoid any problems with

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The Token Converter system comprises two main components: - Converter contract. - Wrapper contracts. Each

MOTIVATION:
This proposal introduces a concept of a token standard upgrading procedure driven by a specialized smart-contract which can convert tokens of one standard to another at any time. Currently some tokens are available on different chains in different standards, for example most exchanges support [ERC-20](./eip-20.md) USDT, TRX USDT, BEP-20

RATIONALE:
### Support of [ERC-223](./eip-223.md) original tokens Two methods of implementing a Token Converter service were considered: (1) a converter that can only create [ERC-223](./eip-223.md) versions of the existing [ERC-20](./eip-20.md) tokens, and (2) a converter that can create both versions ([ERC-20](./eip-20.md) and [ERC-223](./eip-223.md)) of any original token. The first approach


=== ERC-2304 ===
TITLE: Multichain address resolution for ENS
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-09-09
REQUIRES: 137

SUMMARY:
This EIP introduces new overloads for the `addr` field for ENS resolvers, which permit resolution of addresses for other blockchains via ENS.

SPECIFICATION:
A new accessor function for resolvers is specified: ```solidity function addr(bytes32 node, uint coinType) external view returns(bytes memory); ``` The EIP165 interface ID for this function is 0xf1cb7e06. When called on a resolver, this function must return the cryptocurrency address for the specified namehash and coin type. A zero-length

MOTIVATION:
With the increasing uptake of ENS by multi-coin wallets, wallet authors have requested the ability to resolve addresses for non-Ethereum chains inside ENS. This specification standardises a way to enter and retrieve these addresses in a cross-client fashion.


=== ERC-173 ===
TITLE: Contract Ownership Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-06-07
REQUIRES: 

SUMMARY:
This specification defines standard functions for owning or controlling a contract. An implementation allows reading the current owner (`owner() returns (address)`) and transferring ownership (`transferOwnership(address newOwner)`) along with a standardized event for when ownership is changed (`OwnershipTransferred(address indexed previousOwner, address indexed newOwner)`).

SPECIFICATION:
Every ERC-173 compliant contract must implement the `ERC173` interface. Contracts should also implement `ERC165` for the ERC-173 interface. ```solidity /// @title ERC-173 Contract Ownership Standard /// Note: the ERC-165 identifier for this interface is 0x7f5828d0 interface ERC173 /* is ERC165 */ { /// @dev This emits when ownership of

MOTIVATION:
Many smart contracts require that they be owned or controlled in some way. For example to withdraw funds or perform administrative actions. It is so common that the contract interface used to handle contract ownership should be standardized to allow compatibility with user interfaces and contracts that manage contracts.

RATIONALE:
Key factors influencing the standard: - Keeping the number of functions in the interface to a minimum to prevent contract bloat. - Backwards compatibility with existing contracts. - Simplicity - Gas efficient Several ownership schemes were considered. The scheme chosen in this standard was chosen because of its simplicity,


=== ERC-5732 ===
TITLE: Commit Interface
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-29
REQUIRES: 1, 6, 5, ,,  , 1, 2, 7, 1

SUMMARY:
A simple commit interface to support commit-reveal scheme which provides **only** a commit method but no reveal method, allowing implementations to integrate this interface with arbitrary reveal methods such as `vote` or `transfer`.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Interfaces referenced in this specification are as follows: ```solidity pragma solidity >=0.7.0 <0.9.0; // The EIP-165 identifier of this interface

MOTIVATION:
1. support commit-reveal privacy for applications such as voting. 2. make it harder for attackers for front-running, back-running or sandwich attacks.

RATIONALE:
1. One design options is that we can attach a Commit Interface to any individual ERCs such as voting standards or token standards. We choose to have a simple and generalize commit interface so all ERCs can be extended to support commit-reveal without changing their basic method signatures. 2.


=== ERC-5192 ===
TITLE: Minimal Soulbound NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-07-01
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [EIP-721](./eip-721.md). It proposes a minimal interface to make tokens soulbound using the feature detection functionality of [EIP-165](./eip-165.md). A soulbound token is a non-fungible token bound to a single account.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### Contract Interface A token with a `uint256 tokenId` may be bound to a receiving account with `function locked(...)` returning `true`.

MOTIVATION:
The Ethereum community has expressed a need for non-transferrable, non-fungible, and socially-priced tokens similar to World of Warcraft’s soulbound items. But the lack of a token standard leads many developers to simply throw errors upon a user's invocation of transfer functionalities. Over the long term, this will lead to

RATIONALE:
The above model is the simplest possible path towards a canonical interface for Soulbound tokens. It reflects upon the numerous Soulbound token implementations that simply revert upon transfers.


=== ERC-2678 ===
TITLE: Revised Ethereum Smart Contract Packaging Standard (EthPM v3)
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-05-26
REQUIRES: 

SUMMARY:
This EIP defines a data format for *package manifest* documents, representing a package of one or more smart contracts, optionally including source code and any/all deployed instances across multiple networks. Package manifests are minified JSON objects, to be distributed via content addressable storage networks, such as IPFS. Packages are

MOTIVATION:
This standard aims to encourage the Ethereum development ecosystem towards software best practices around code reuse. By defining an open, community-driven package data format standard, this effort seeks to provide support for package management tools development by offering a general-purpose solution that has been designed with observed common practices

RATIONALE:
### Minification EthPM packages are distributed as alphabetically-ordered & minified JSON to ensure consistency. Since packages are published on content-addressable filesystems (eg. IPFS), this restriction guarantees that any given set of contract assets will always resolve to the same content-addressed URI. ### Package Names Package names are restricted to


=== ERC-7796 ===
TITLE: Conditional send transaction RPC
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-16
REQUIRES: 

SUMMARY:
This EIP proposes a new JSON-RPC API method `eth_sendRawTransactionConditional` for block builders and sequencers, enhancing transaction integration by allowing users to express preconditions for transaction inclusion. This method aims to improve efficiency by reducing the need for transaction simulation, thereby improving the computational efficiency of transaction ordering.

SPECIFICATION:
* Method: `eth_sendRawTransactionConditional` * Parameters: 1. `transaction`: The raw, signed transaction data. Similar to `eth_sendRawTransaction`. 2. `options`: An object containing conditions under which the transaction must be included. * The `options` parameter may include any of the following optional members: * **knownAccounts**: a mapping of accounts with their expected

MOTIVATION:
Current private block builder APIs, such as the Flashbots API, require block builders to simulate transactions to determine eligibility for inclusion, a process that is CPU-intensive and inefficient. The proposed RPC method addresses this by enabling transactions to specify preconditions, thus reducing computational overhead and potentially lowering transaction costs.

RATIONALE:
The `knownAccounts` only allows specifying the exact values for storage slots. While in some cases specifying `minValue` or `maxValue` for a slot could be useful, it would significantly increase complexity of the proposed API. Additionally, determining the validity range for a slot value is a non-trivial task for the


=== ERC-1078 ===
TITLE: Universal login / signup using ENS subdomains
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-04
REQUIRES: 1, 9, 1, ,,  , 6, 8, 1, ,,  , 7, 2, 5, ,,  , 1, 0, 7, 7

SUMMARY:
This presents a method to replace the usual signup/login design pattern with a minimal ethereum native scheme, that doesn’t require passwords, backing up private keys nor typing seed phrases. From the user's point of view it will be very similar to patterns they’re already used to with second factor


=== ERC-6960 ===
TITLE: Dual Layer Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-30
REQUIRES: 

SUMMARY:
The dual-layer token combines the functionalities of [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), and [ERC-1155](./eip-1155.md) while adding a classification layer that uses `mainId` as the main asset type identifier and `subId` as the unique attributes or variations of the main asset. ![Dual Layer Token](../assets/eip-6960/eip-6960-dual-layer-token-dlt.png) The proposed token aims to offer more granularity in

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### DLT Interface ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity 0.8.17; /** * @title DLT token

MOTIVATION:
The [ERC-1155](./eip-1155.md) standard has experienced considerable adoption within the Ethereum ecosystem; however, its design exhibits constraints when handling tokens with multiple classifications, particularly in relation to Real World Assets (RWAs) and fractionalization of assets. This EIP strives to overcome this limitation by proposing a token standard incorporating a dual-layer

RATIONALE:
The two-level classification system introduced in this EIP allows for a more organized token ecosystem, enabling users to manage and track tokens with greater granularity. It is particularly useful for projects that require token classifications beyond the capabilities of the current ERC-1155 standard. As assets can have various properties


=== ERC-7758 ===
TITLE: Transfer With Authorization
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2020-09-28
REQUIRES: 2, 0, ,,  , 7, 1, 2

SUMMARY:
A set of functions to enable meta-transactions and atomic interactions with [ERC-20](./eip-20.md) token contracts via signatures conforming to the [EIP-712](./eip-712.md) typed message signing specification. This enables the user to: - delegate the gas payment to someone else, - pay for gas in the token itself rather than in ETH,

SPECIFICATION:
### Event ```solidity event AuthorizationUsed( address indexed authorizer, bytes32 indexed nonce ); // keccak256("TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)") bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267; // keccak256("ReceiveWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)") bytes32 public constant RECEIVE_WITH_AUTHORIZATION_TYPEHASH = 0xd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8; /** * @notice Returns the state of an authorization

MOTIVATION:
There is an existing spec, [EIP-2612](./eip-2612), that also allows meta-transactions, and it is encouraged that a contract implements both for maximum compatibility. The two primary differences between this spec and EIP-2612 are that: - EIP-2612 uses sequential nonces, but this uses random 32-byte nonces, and that - EIP-2612 relies

RATIONALE:
### Unique Random Nonce, Instead of Sequential Nonce One might say transaction ordering is one reason why sequential nonces are preferred. However, sequential nonces do not actually help achieve transaction ordering for meta transactions in practice: - For native Ethereum transactions, when a transaction with a nonce value that


=== ERC-7739 ===
TITLE: Readable Typed Signatures for Smart Accounts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-05-28
REQUIRES: 1, 9, 1, ,,  , 7, 1, 2, ,,  , 1, 2, 7, 1, ,,  , 5, 2, 6, 7

SUMMARY:
This proposal defines a standard to prevent signature replays across multiple smart accounts when they are owned by a single Externally Owned Account (EOA). This is achieved through a defensive rehashing scheme for [ERC-1271](./eip-1271.md) verification using specific nested [EIP-712](./eip-712.md) typed structures, which preserves the readability of the signed contents

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Overview The following dependencies are REQUIRED: - [EIP-712](./eip-712.md) Typed structured data hashing and signing.

MOTIVATION:
Smart accounts can verify signatures with via [ERC-1271](./eip-1271.md) using the `isValidSignature` function. A straightforward implementation as shown below, is vulnerable to signature replay attacks. ```solidity /// @dev This implementation is NOT safe. function isValidSignature( bytes32 hash, bytes calldata signature ) external override view returns (bytes4) { uint8 v =

RATIONALE:
### `TypedDataSign` structure The `typedDataSignTypehash` must be constructed on-the-fly on-chain. This is to enforce that the signed contents will be visible in the signature request, by requiring that `contents` be a user defined type. The fields of `eip712Domain` are flattened into the `TypedDataSign` structure instead of being included as


=== ERC-6454 ===
TITLE: Minimal Transferable NFT detection interface
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-01-31
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The Minimalistic Transferable interface for Non-Fungible Tokens standard extends [ERC-721](./eip-721.md) by introducing the ability to identify whether an NFT can be transferred or not. This proposal introduces the ability to prevent a token from being transferred from their owner, making them bound to the externally owned account, abstracted account,

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity /// @title EIP-6454 Minimalistic Non-Transferable interface for NFTs /// @dev See https://eips.ethereum.org/EIPS/eip-6454 /// @dev Note: the ERC-165 identifier for

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time to standardize additional utility for them. Having the ability to prevent the tokens from being transferred introduces new possibilities of NFT utility and evolution. This

RATIONALE:
Designing the proposal, we considered the following questions: 1. **Should we propose another (Non-)Transferable NFT proposal given the existence of existing ones, some even final, and how does this proposal compare to them?**\ This proposal aims to provide the minimum necessary specification for the implementation of non-transferable NFTs, we


=== ERC-7303 ===
TITLE: Token-Controlled Token Circulation
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-09
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 5, 6, 7, 9

SUMMARY:
This ERC introduces an access control scheme termed Token-Controlled Token Circulation (TCTC). By representing the privileges associated with a role as an [ERC-721](./eip-721.md) or [ERC-1155](./eip-1155.md) token (referred to as a `control token`), the processes of granting or revoking a role can be facilitated through the minting or burning of

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. 1. Smart contracts implementing the [ERC-7303](./eip-7303.md) standard MUST represent the privilege required by the role

MOTIVATION:
There are numerous methods to implement access control for privileged actions. A commonly utilized pattern is "role-based" access control as specified in [ERC-5982](./eip-5982.md). This method, however, necessitates the use of an off-chain management tool to grant or revoke required roles through its interface. Additionally, as many wallets lack a

RATIONALE:
The choice to utilize ERC-721 or ERC-1155 token as the control token for privileges enhances visibility of such privileges within wallets, thus simplifying privilege management for users. Generally, when realizing privileges as tokens, specifications like Soulbound Token (e.g., [ERC-5192](./eip-5192.md)) are used. Given that ERC-5192 inherits from ERC-721, this ERC


=== ERC-5023 ===
TITLE: Shareable Non-Fungible Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-01-28
REQUIRES: 165

SUMMARY:
This EIP standardizes an interface for non-fungible value-holding shareable tokens. Shareability is accomplished by minting copies of existing tokens for new recipients. Sharing and associated events allow the construction of a graph describing who has shared what to which party.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity /// Note: the ERC-165 identifier for this interface is 0xded6338b interface IERC5023 is IERC165 { /// @dev This emits

MOTIVATION:
NFT standards such as [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md) have been developed to standardize scarce digital resources. However, many non-fungible digital resources need not be scarce. We have attempted to capture positive externalities in ecosystems with new types of incentive mechanisms that exhibit anti-rival logic, serve as an unit of accounting

RATIONALE:
Current NFT standards define transferable non-fungible tokens, but not shareable non-fungible tokens. To be able to create shareable NFTs we see that existing NFT contracts could be extended with an interface which defines the basic principles of sharing, namely the Event of sharing and the function method of sharing.


=== ERC-7699 ===
TITLE: ERC-20 Transfer Reference Extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-26
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
The [ERC-20](./eip-20.md) token standard does not provide a built-in mechanism for including a payment transfer reference (message for recipient) in token transfers. This proposal extends the existing ERC-20 token standard by adding minimal methods to include a transfer reference in token transfers and transferFrom operations. The addition of a

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Any contract complying with ERC-20 when extended with this ERC, MUST implement the following interface: ``` // The EIP-165 identifier

MOTIVATION:
The primary motivation for this proposal is to improve the functionality of the ERC-20 token standard by providing a mechanism for including a payment reference in token transfers, similar to the traditional finance systems where payment references are commonly used to associate and reconcile transactions with specific orders, invoices

RATIONALE:
### Parameter name The choice to name the added parameter `transferReference` was made to align with traditional banking terminology, where payment references are widely used to associate and reconcile transactions with specific orders, invoices or other financial records. The `transferReference` parameter name also helps to clearly communicate the purpose


=== ERC-3772 ===
TITLE: Compressed Integers
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-08-27
REQUIRES: 

SUMMARY:
This document specifies compression of `uint256` to smaller data structures like `uint64`, `uint96`, `uint128`, for optimizing costs for storage. The smaller data structure (represented as `cintx`) is divided into two parts, in the first one we store `significant` bits and in the other number of left `shift`s needed on

SPECIFICATION:
In this specification, the structure for representing a compressed value is represented using `cintx`, where x is the number of bits taken by the entire compressed value. On the implementation level, an `uintx` can be used for storing a `cintx` value. ### Compression #### uint256 into cint64 (up to

MOTIVATION:
- Storage is costly, each storage slot costs almost $0.8 to initialize and $0.2 to update (20 gwei, 2000 ETHUSD). - Usually, we store money amounts in `uint256` which takes up one entire slot. - If it's DAI value, the range we work with most is 0.001 DAI to

RATIONALE:
- The `significant` bits are stored in the most significant part of `cintx` while `shift` bits in the least significant part, to help prevent obvious dev mistakes. For e.g. a number smaller than 2<sup>56</sup>-1 its compressed `cint64` value would be itself if the arrangement were to be opposite than


=== ERC-7507 ===
TITLE: Multi-User NFT Extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-08-24
REQUIRES: 721

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It proposes a new role `user` in addition to `owner` for a token. A token can have multiple users under separate expiration time. It allows the subscription model where an NFT can be subscribed non-exclusively by different users.

SPECIFICATION:
Solidity interface available at [`IERC7507.sol`](../assets/eip-7507/contracts/IERC7507.sol): ```solidity interface IERC7507 { /// @notice Emitted when the expires of a user for an NFT is changed event UpdateUser(uint256 indexed tokenId, address indexed user, uint64 expires); /// @notice Get the user expires of an NFT /// @param tokenId The NFT to get the

MOTIVATION:
Some NFTs represent IP assets, and IP assets have the need to be licensed for access without transferring ownership. The subscription model is a very common practice for IP licensing where multiple users can subscribe to an NFT to obtain access. Each subscription is usually time limited and will

RATIONALE:
This standard complements [ERC-4907](./eip-4907.md) to support multi-user feature. Therefore the proposed interface tries to keep consistent using the same naming for functions and parameters. However, we didn't include the corresponding `usersOf(uint256 tokenId)` function as that would imply the implemention has to support enumerability over multiple users. It is not


=== ERC-2470 ===
TITLE: Singleton Factory
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-01-15
REQUIRES: 1014

SUMMARY:
Some contracts are designed to be Singletons which have the same address no matter what chain they are, which means that should exist one instance for all, such as [EIP-1820] and [EIP-2429]. These contracts are usually deployed using a method known as [Nick]'s method, so anyone can deploy those

SPECIFICATION:
### [ERC-2470] Singleton Factory > This is an exact copy of the code of the [ERC2470 factory smart contract]. ```solidity pragma solidity 0.6.2; /** * @title Singleton Factory (EIP-2470) * @notice Exposes CREATE2 (EIP-1014) to deploy bytecode on deterministic addresses based on initialization code and salt. * @author Ricardo

MOTIVATION:
Code reuse, using the factory becomes easier to deploy singletons.

RATIONALE:
SingletonFactory does not allow sending value on create2, this was done to prevent different results on the created object. SingletonFactory allows user defined salt to facilitate the creation of vanity addresses for other projects. If vanity address is not necessary, salt `bytes(0)` should be used. Contracts that are constructed


=== ERC-4944 ===
TITLE: Contract with Exactly One Non-fungible Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-03-25
REQUIRES: 721

SUMMARY:
The following describes standard functions for an [ERC-721](./eip-721.md) compatible contract with a total supply of one. This allows an NFT to be associated uniquely with a single contract address.

SPECIFICATION:
The constructor should mint the unique token of the contract, and then the mint function should add a restriction to avoid further minting. Also, a `tokenTransfer` function should be added in order to allow the contract owner to transact with the ERC-20 tokens owned by the contract/NFT itself. So

MOTIVATION:
If the ERC-721 was modified to mint only 1 token (per contract), then the contract address could be identified uniquely with that minted token (instead of the tuple contract address + token id, as ERC-721 requires). This change would enable automatically all the capabilities of composable tokens [ERC-998](./eip-998.md) (own

RATIONALE:
The main motivation is to keep the contract compatible with current ERC-721 platforms.


=== ERC-5484 ===
TITLE: Consensual Soulbound Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-17
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This EIP defines an interface extending [EIP-721](./eip-721.md) to create soulbound tokens. Before issuance, both parties (the issuer and the receiver), have to agree on who has the authorization to burn this token. Burn authorization is immutable after declaration. After its issuance, a soulbound token can't be transferred, but can

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. - The token MUST implement the following interfaces: 1. [EIP-165](./eip-165.md)’s `ERC165` (`0x01ffc9a7`) 1. [EIP-721](./eip-721.md)’s `ERC721` (`0x80ac58cd`) - `burnAuth` SHALL be

MOTIVATION:
The idea of soulbound tokens has gathered significant attention since its publishing. Without a standard interface, however, soulbound tokens are incompatible. It is hard to develop universal services targeting at soulbound tokens without minimal consensus on the implementation of the tokens. This EIP envisions soulbound tokens as specialized NFTs

RATIONALE:
### Soulbound Token (SBTs) as an extension to EIP-721 We believe that soulbound token serves as a specialized subset of the existing EIP-721 tokens. The advantage of such design is seamless compatibility of soulbound token with existing NFT services. Service providers can treat SBTs like NFTs and do not


=== ERC-1523 ===
TITLE: Standard for Insurance Policies as ERC-721 Non Fungible Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-10-10
REQUIRES: 721

SUMMARY:
The following standard allows for the implementation of a standard API for insurance policies within smart contracts. Insurance policies are financial assets which are unique in some aspects, as they are connected to a customer, a specific risk, or have other unique properties like premium, period, carrier, underwriter etc.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. An ERC-1523 compliant insurance policy is a non-fungible token which **MUST adhere to the ERC-721 token standard** and **MUST implement

MOTIVATION:
For a decentralized insurance protocol, a standard for insurance policies is crucial for interoperability of the involved services and application. It allows policies to be bundled, securitized, traded in a uniform and flexible way by many independent actors like syndicates, brokers, and insurance companies.

RATIONALE:
Insurance policies form an important class of financial assets, and it is natural to express those assets as a class of non-fungible tokens which adhere to the established ERC-721 standard. We propose a standard for the accompanying metadata structures which are needed to uniquely define an insurance policy. Standardization


=== ERC-2019 ===
TITLE: Fundable Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-05-10
REQUIRES: 20

SUMMARY:
Token wallet owners (or approved addresses) can order tokenization requests through blockchain. This is done by calling the ```orderFund``` or ```orderFundFrom``` methods, which initiate the workflow for the token contract operator to either honor or reject the fund request. In this case, fund instructions are provided when submitting the

SPECIFICATION:
```solidity interface IFundable /* is ERC-20 */ { enum FundStatusCode { Nonexistent, Ordered, InProcess, Executed, Rejected, Cancelled } function authorizeFundOperator(address orderer) external returns (bool); function revokeFundOperator(address orderer) external returns (bool) ; function orderFund(string calldata operationId, uint256 value, string calldata instructions) external returns (bool); function orderFundFrom(string calldata operationId, address walletToFund,

MOTIVATION:
Nowadays most of the token issuing/funding request, based on any fiat based payment method need a previous centralized transaction, to be able to get the desired tokens issued on requester's wallet. In the aim of trying to bring all the needed steps into decentralization, exposing all the needed steps

RATIONALE:
This standards provides a functionality to allow token holders to start funding requests in a decentralized way. It's important to highlight that the token operator, need to process all funding request, updating the fund status based on the linked payment that will be done. Funding instruction format is open.


=== ERC-1922 ===
TITLE: zk-SNARK Verifier Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-14
REQUIRES: 1, 6, 5, ,,  , 1, 9, 6, ,,  , 1, 9, 7

SUMMARY:
The following standard allows for the implementation of a standard contract API for the verification of zk-SNARKs ("Zero-Knowledge Succinct Non-Interactive Arguments of Knowledge"), also known as "proofs", "arguments", or "commitments". This standard provides basic functionality to load all necessary parameters for the verification of any zk-SNARK into a verifier

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. Terminology in this specification is used consistently with libsnark, as provided in that project's README. * Adhering Contract — A

MOTIVATION:
zk-SNARKs are a promising area of interest for the Ethereum community. Key applications of zk-SNARKs include: - Private transactions - Private computations - Improved transaction scaling through proofs of "bundled" transactions A standard interface for verifying all zk-SNARKs will allow applications to more easily implement private transactions, private contracts,

RATIONALE:
### Taxonomy ⚠️ TODO: Add a specific reference to libsnark here, explaining the choice of variable names. :warning: TODO: Explain how _C_ may not necessarily be a satisfiable arithmetic circuit of logical statements. As current, this is a limitation to certain kinds of SNARKS. Whereas the source references also


=== ERC-1710 ===
TITLE: URL Format for Web3 Browsers
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-01-13
REQUIRES: 155

SUMMARY:
Since most normal web browsers (specifically on mobile devices) can not run decentralized applications correctly because of the lack of web3 support, it is necessary to differentiate them from normal urls, so they can be opened in web3 browsers if available.

SPECIFICATION:
### Syntax Web3 browser URLs contain "dapp" in their schema (protocol) part and are constructed as follows: request = "dapp" ":" [chain_id "@"] dapp_url chain_id = 1*DIGIT dapp_url = URI ### Semantics `chain_id` is optional and it is a parameter for the browser to automatically select the corresponding chain

MOTIVATION:
Lots of dApps that are trying to improve their mobile experience are currently (deep)linking to specific mobile web3 browsers which are currently using their own url scheme. In order to make the experience more seamless, dApps should still be able to recommend a specific mobile web3 browser via [deferred

RATIONALE:
The proposed format attempts to solve the problem of vendor specific protocols for web3 browsers, avoiding conflicts with the existing 'ethereum:' URL scheme while also adding an extra feature: `chain_id` which will help dApps to be accessed with the right network preselected, optionally extracting away that complexity from end


=== ERC-2135 ===
TITLE: Consumable Interface (Tickets, etc)
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2019-06-23
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP defines an interface to mark a digital asset as "consumable" and to react to its "consumption."

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. 1. Any compliant contract **MUST** implement the following interface: ```solidity pragma solidity >=0.7.0 <0.9.0; /// The ERC-165 identifier of this

MOTIVATION:
Digital assets sometimes need to be consumed. One of the most common examples is a concert ticket. It is "consumed" when the ticket-holder enters the concert hall. Having a standard interface enables interoperability for services, clients, UI, and inter-contract functionalities on top of this use-case.

RATIONALE:
1. The function `consume` performs the consume action. This EIP does not assume: - who has the power to perform consumption - under what condition consumption can occur It does, however, assume the asset can be identified in a `uint256` asset id as in the parameter. A design convention


=== ERC-55 ===
TITLE: Mixed-case checksum address encoding
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2016-01-14
REQUIRES: 


=== ERC-1613 ===
TITLE: Gas stations network
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-18
REQUIRES: 1077

SUMMARY:
Communicating with dapps currently requires paying ETH for gas, which limits dapp adoption to ether users. Therefore, contract owners may wish to pay for the gas to increase user acquisition, or let their users pay for gas with fiat money. Alternatively, a 3rd party may wish to subsidize the

SPECIFICATION:
The system consists of a `RelayHub` singleton contract, participating contracts inheriting the `RelayRecipient` contract, a decentralized network of `Relay` nodes, a.k.a. Gas Stations, and user applications (e.g. mobile or web) interacting with contracts via relays. Roles of the `RelayHub`: * Maintain a list of active relays. Senders select a

MOTIVATION:
* Increase user adoption of smart contracts by: * Removing the user hassle of acquiring ETH. Transactions are still paid by ETH but costs can be borne by the dapp or paid by the user through other means. * Removing the need to interact directly with the blockchain, while

RATIONALE:
The rationale for the gas stations network design is a combination of two sets of requirements: Easy adoption, and robustness. For easy adoption, the design goals are: * No network changes. * Minimal changes to contracts, apps and frameworks. The robustness requirement translates to decentralization and attack resistance. The


=== ERC-1538 ===
TITLE: Transparent Contract Standard
TYPE: Standards Track ERC
STATUS: Withdrawn
CREATED: 2018-10-31
REQUIRES: 

SUMMARY:
A transparent contract is a proxy contract design pattern that provides the following: 1. A way to add, replace and remove multiple functions of a contract atomically (at the same time). 1. Standard events to show what functions are added, replaced and removed from a contract, and why the

SPECIFICATION:
> **Note:** The solidity `delegatecall` opcode enables a contract to execute a function from another contract, but it is executed as if the function was from the calling contract. Essentially `delegatecall` enables a contract to "borrow" another contract's function. Functions executed with `delegatecall` affect the storage variables of the

MOTIVATION:
A fundamental benefit of Ethereum contracts is that their code is immutable, thereby acquiring trust by trustlessness. People do not have to trust others if it is not possible for a contract to be changed. However, a fundamental problem with trustless contracts that cannot be changed is that they

RATIONALE:
### String of Function Signatures Instead of bytes4[] Array of Function Selectors The `updateContract` function takes a `string` list of functions signatures as an argument instead of a `bytes4[]` array of function selectors for three reasons: 1. Passing in function signatures enables the implementation of `updateContract` to prevent selector


=== ERC-5375 ===
TITLE: NFT Author Information and Consent
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-07-30
REQUIRES: 5, 5, ,,  , 1, 5, 5, ,,  , 7, 1, 2, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP standardizes a JSON format for storing off-chain information about NFT authors. Specifically, it adds a new field which provides a list of author names, addresses, and proofs of _authorship consent_: proofs that the authors have agreed to be named as authors. Note that a proof of authorship

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. All addresses used in this standard MUST follow the casing rules described in [EIP-55](./eip-55.md). ### Definitions - **Authors**: creators of

MOTIVATION:
There is currently no standard to identify authors of an NFT, and existing techniques have issues: - Using the mint `tx.origin` or `msg.sender` - Assumes that the minter and the author are the same - Does not support multiple authors - Using the first Transfer event for a given

RATIONALE:
### Why provide only an author consent proof? Adding support for full authorship proofs (i.e. Alice is the author and no one else is the author) requires a protocol to prove that someone is the only author of an NFT. In other words, we need to answer the question:


=== ERC-5604 ===
TITLE: NFT Lien
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-09-05
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This ERC introduces NFT liens, a form of security interest over an item of property to secure the recovery of liability or performance of some other obligation. It introduces an interface to place and removes a lien, plus an event.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. 1. Any compliant contract MUST implement `ERC-721`, and `ERC-165`. 2. Any compliant contract MUST implement the following interface: ```solidity interface

MOTIVATION:
Liens are widely used for finance use cases, such as car and property liens. An example use case for an NFT lien is for a deed. This ERC provides an interface to implement an interface that performs the lien holding relationships.

RATIONALE:
1. We only support `ERC-721` NFTs for simplicity and gas efficiency. We have not considered other ERCs, which can be left for future extensions. For example, `ERC-20` and `ERC-1155` were not considered. 2. We choose separate "addLienHolder" and "removeLienHolder" instead of use a single `changeLienholder` with amount because we


=== ERC-5564 ===
TITLE: Stealth Addresses
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-13
REQUIRES: 

SUMMARY:
This specification establishes a standardized method for interacting with stealth addresses, which allow senders of transactions or transfers to non-interactively generate private accounts exclusively accessible by their recipients. Moreover, this specification enables developers to create stealth address protocols based on the foundational implementation outlined in this ERC, utilizing a

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Definitions: - A "stealth meta-address" is a set of one or two public keys that can be used to compute

MOTIVATION:
The standardization of non-interactive stealth address generation presents the potential to significantly improve the privacy capabilities of the Ethereum network and other EVM-compatible chains by allowing recipients to remain private when receiving assets. This is accomplished through the sender generating a stealth address based on a shared secret known

RATIONALE:
This ERC emerged from the need for privacy-preserving ways to transfer ownership without disclosing any information about the recipients' identities. Token ownership can expose sensitive personal information. While individuals may wish to donate to a specific organization or country, they might prefer not to disclose a link between themselves


=== ERC-7654 ===
TITLE: Request Method Types
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-03-13
REQUIRES: 

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. It consists of four request method types: **GET**: Request the contract to retrieve records. **POST**:

RATIONALE:
### Type of request method In order to enable the client to operate the contract in a standardized and predictable way, three request method types ```GET```, ```POST```, and ```PUT``` are set. The functions of each need to be defined in these three types to facilitate the contract caller to


=== ERC-7231 ===
TITLE: Identity-aggregated NFT
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-06-25
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 2, 7, 1

SUMMARY:
This standard extends [ERC-721](./eip-721.md) by binding individuals' Web2 and Web3 identities to non-fungible tokens (NFTs) and soulbound tokens (SBTs). By binding multiple identities, aggregated and composible identity infomation can be verified, resulting in more beneficial onchain scenarios for individuals, such as self-authentication, social overlapping, commercial value generation from user

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY” and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Every compliant contract must implement the Interface ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity ^0.8.15; interface IERC7231 { /** * @notice

MOTIVATION:
One of the most interesting aspects of Web3 is the ability to bring an individual's own identity to different applications. Even more powerful is the fact that individuals truly own their accounts without relying on centralized gatekeepers, disclosing to different apps components necessary for authentication and approved by individuals.

RATIONALE:
Designing the proposal, we considered the following problems that are solved by this standard: ![EIP Flow Diagram](../assets/eip-7231/img/Identity-aggregated-NFT-flow.png) 1. Resolve the issue of multiple ID bindings for web2 and web3. By incorporating the MultiIdentities schema into the metadata file, an authorized bond is established between user identity information and NFTs.


=== ERC-897 ===
TITLE: DelegateProxy
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-02-21
REQUIRES: 

SUMMARY:
Using proxies that delegate their own logic to another contract is becoming an increasingly popular technique for both smart contract upgradeability and creating cheap clone contracts. We don't believe there is value in standardizing any particular implementation of a DelegateProxy, given its simplicity, but we believe there is a


=== ERC-6372 ===
TITLE: Contract clock
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-01-25
REQUIRES: 

SUMMARY:
Many contracts rely on some clock for enforcing delays and storing historical data. While some contracts rely on block numbers, others use timestamps. There is currently no easy way to discover which time-tracking function a contract internally uses. This EIP proposes to standardize an interface for contracts to expose

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Compliant contracts MUST implement the `clock` and `CLOCK_MODE` functions as specified below. ```solidity interface IERC6372 { function clock() external view

MOTIVATION:
Many contracts check or store time-related information. For example, timelock contracts enforce a delay before an operation can be executed. Similarly, DAOs enforce a voting period during which stakeholders can approve or reject a proposal. Last but not least, voting tokens often store the history of voting power using

RATIONALE:
`clock` returns `uint48` as it is largely sufficient for storing realistic values. In timestamp mode, `uint48` will be enough until the year 8921556. Even in block number mode, with 10,000 blocks per second, it would be enough until the year 2861. Using a type smaller than `uint256` allows storage


=== ERC-7615 ===
TITLE: Atomic Push-based Data Feed Among Contracts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-03
REQUIRES: 

SUMMARY:
This ERC proposes a push-based mechanism for sending data, allowing publisher contract to automatically push certain data to subscriber contracts during a call. The specific implementation relies on two interfaces: one for publisher contract to push data, and another for the subscriber contract to receive data. When the publisher

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Overview The push mechanism can be divided into the following four steps: 1. The publisher contract is called. 2.

MOTIVATION:
Currently, there are many keepers rely on off-chain data or seperate data collection process to monitor the events on chain. This proposal aims to establish a system where the publisher contract can atomicly push data to inform subscriber contracts about the updates. The direct on-chain interaction bewteen the publisher

RATIONALE:
### Unconditional and Conditional Configuration When the sending contract is called, it is possible to trigger a push, requiring the caller to pay the resulting gas fees. In some cases, an Unconditional Push is necessary, such as pushing price changes to a lending protocol. While, Conditional Push will reduce


=== ERC-7700 ===
TITLE: Cross-chain Storage Router Protocol
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-30
REQUIRES: 155

SUMMARY:
The following standard provides a mechanism by which smart contracts can route storage to external providers. In particular, protocols can reduce the gas fees associated with storing data on mainnet by routing the handling of storage operations to another system or network. These storage routers act as an extension

SPECIFICATION:
### Overview The following specification revolves around the structure and description of a cross-chain storage router tasked with the responsibility of writing to an L2 or database storage. This document introduces `StorageRoutedToL2()` and `StorageRoutedToDatabase()` storage routers, along with the trivial `StorageRoutedToL1()` router, and proposes that new `StorageRoutedTo__()` reverts be

MOTIVATION:
[EIP-3668](./eip-3668), aka 'CCIP-Read', has been key to retrieving cross-chain data for a variety of contracts on Ethereum blockchain, ranging from price feeds for DeFi contracts, to more recently records for ENS users. The latter case dedicatedly uses cross-chain storage to bypass the usually high gas fees associated with on-chain

RATIONALE:
Technically, the cases of L2s and databases are similar; routing to an L2 involves routing the `eth_call` to another EVM, while routing to a database can be made by extracting `eth_sign` from `eth_call` and posting the resulting signature explicitly along with the data for later verification. Methods in this


=== ERC-20 ===
TITLE: Token Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2015-11-19
REQUIRES: 

SUMMARY:
The following standard allows for the implementation of a standard API for tokens within smart contracts. This standard provides basic functionality to transfer tokens, as well as allow tokens to be approved so they can be spent by another on-chain third party.

MOTIVATION:
A standard interface allows any tokens on Ethereum to be re-used by other applications: from wallets to decentralized exchanges.


=== ERC-1363 ===
TITLE: Payable Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-08-30
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
Standard functions a token contract and contracts working with tokens can implement to make a token Payable. `transferAndCall` and `transferFromAndCall` will call an `onTransferReceived` on a `ERC1363Receiver` contract. `approveAndCall` will call an `onApprovalReceived` on a `ERC1363Spender` contract.

SPECIFICATION:
Implementing contracts **MUST** implement the [ERC-1363](./eip-1363.md) interface as well as the [ERC-20](./eip-20.md) and [ERC-165](./eip-165.md) interfaces. ```solidity pragma solidity ^0.8.0; interface ERC1363 /* is ERC20, ERC165 */ { /* * Note: the ERC-165 identifier for this interface is 0xb0202a11. * 0xb0202a11 === * bytes4(keccak256('transferAndCall(address,uint256)')) ^ * bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^ * bytes4(keccak256('transferFromAndCall(address,address,uint256)'))

MOTIVATION:
There is no way to execute code after a [ERC-20](./eip-20.md) transfer or approval (i.e. making a payment), so to make an action it is required to send another transaction and pay GAS twice. This proposal wants to make token payments easier and working without the use of any other

RATIONALE:
The choice to use `transferAndCall`, `transferFromAndCall` and `approveAndCall` derives from the [ERC-20](./eip-20.md) naming. They want to highlight that they have the same behaviours of `transfer`, `transferFrom` and `approve` with the addition of a callback on receiver or spender.


=== ERC-7679 ===
TITLE: UserOperation Builder
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-05
REQUIRES: 4337

SUMMARY:
Different [ERC-4337](./eip-4337.md) smart account implementations encode their signature, nonce, and calldata differently. This makes it difficult for DApps, wallets, and smart account toolings to integrate with smart accounts without integrating with account-specific SDKs, which introduces vendor lock-in and hurts smart account adoption. We propose a standard way for smart

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### UserOp builder To conform to this standard, a smart account implementation MUST provide a “UserOp builder” contract that implements

MOTIVATION:
At the moment, to build a [ERC-4337](./eip-4337.md) UserOperation (UserOp for short) for a smart account requires detailed knowledge of how the smart account implementation works, since each implementation is free to encode its nonce, calldata, and signature differently. As a simple example, one account might use an execution function

RATIONALE:
### Context The `context` is an array of bytes that encodes whatever data the UserOp builder needs in order to correctly determine the nonce, calldata, and signature. Presumably, the `context` is constructed by the account owner, with the help of a wallet software. Here we outline one possible use


=== ERC-7694 ===
TITLE: Solana Storage Router
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-18
REQUIRES: 3, 6, 6, 8, ,,  , 7, 7, 0, 0

SUMMARY:
The following standard is an extension to the cross-chain storage router protocol introducing the storage router for Solana blockchain. With this specification, any Ethereum L1 contract can defer a call to Solana blockchain as part of its core functionality, provided that the client is equipped to handle Solana transactions.

SPECIFICATION:
A Solana storage router `StorageRoutedToSolana()` requires the hex-encoded `programId` and the manager `account` on the Solana blockchain. `programId` is equivalent to a contract address on Solana while `account` is the manager wallet on Solana handling storage on behalf of `msg.sender`. ```solidity // Revert handling Solana storage router error StorageRoutedToSolana(

MOTIVATION:
Cross-Chain Storage Router Protocol (CCIP-Store) introduced in [EIP-7700](./eip-7700), describes three external routers for routing storage to L1 contracts, L2s and databases. This document extends that specification by introducing a fourth storage router targeting Solana as the storage provider. L2s and databases both have centralising catalysts in their stack. For

RATIONALE:
`StorageRoutedToSolana()` works in a similar fashion to `StorageRoutedToL2()` in CCIP-Store in the sense that the client needs to be pointed to a certain contract on another chain by the revert event. Other than that, the only technical difference is casting between EVM and SVM data types. ![Fig.2 Solana Call


=== ERC-5409 ===
TITLE: EIP-1155 Non-Fungible Token extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-23
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This standard is an extension of [EIP-1155](./eip-1155.md). It proposes an additional function, `ownerOf`, which allows EIP-1155 tokens to support Non-Fungibility (unique owners). By implementing this extra function, EIP-1155 tokens can benefit from [EIP-721](./eip-721.md)'s core functionality without implementing the (less efficient) EIP-721 specification in the same contract.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### Contract Interface ```solidity interface IERC1155OwnerOf { /// @notice Find the owner of an NFT /// @dev The zero address indicates

MOTIVATION:
Currently, EIP-1155 does not allow an external caller to detect whether a token is truly unique (can have only one owner) or fungible. This is because EIP-1155 do not expose a mechanism to detect whether a token will have its supply remain to be "1". Furthermore, it does not

RATIONALE:
`ownerOf` does not throw when a token does not exist (or does not have an owner). This simplifies the handling of such a case. Since it would be a security risk to assume all EIP-721 implementation would throw, it should not break compatibility with contract handling EIP-721 when dealing


=== ERC-1491 ===
TITLE: Human Cost Accounting Standard (Like Gas but for humans)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-10-12
REQUIRES: 

SUMMARY:
The following standard allows for the implementation of a standard API for HUCAP tokens within smart contracts. This standard provides basic functionality to discover, track and transfer the motivational hierarchy of human resources. While blockchain architecture has succeeded in the financialisation of integrity by way of transparency; correspondingly real

SPECIFICATION:
#### Main Interface ```solidity pragma solidity ^0.4.25; pragma experimental ABIEncoderV2; /** @title ERC-**** Human Capital Accounting Standard @dev See https://github.com/freeworkculture/kazini/issues/11 Note: the ERC-165 identifier for this interface is 0xf23a6e61. */ interface IERC_HUCAP { /** @notice Compute the index value of an Agents BDI in the ecosystem. @param _address Set

MOTIVATION:
The Ethereum protocol architecture has a deterministic world-view bounded to the random reality of the human domain that supplies the intentions and logic. The yellow paper formally defines the EVM as a state machine with only deterministic parameters and state transition operators. Oracle requests to another on-chain contract, and/or

RATIONALE:
[WIP]


=== ERC-777 ===
TITLE: Token Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2017-11-20
REQUIRES: 1820

SUMMARY:
This standard defines a new way to interact with a token contract while remaining backward compatible with [ERC-20]. It defines advanced features to interact with tokens. Namely, *operators* to send tokens on behalf of another address&mdash;contract or regular account&mdash;and send/receive *hooks* to offer token holders more control over their

SPECIFICATION:
### ERC777Token (Token Contract) ``` solidity interface ERC777Token { function name() external view returns (string memory); function symbol() external view returns (string memory); function totalSupply() external view returns (uint256); function balanceOf(address holder) external view returns (uint256); function granularity() external view returns (uint256); function defaultOperators() external view returns (address[] memory);

MOTIVATION:
This standard tries to improve upon the widely used [ERC-20] token standard. The main advantages of this standard are: 1. Uses the same philosophy as Ether in that tokens are sent with `send(dest, value, data)`. 2. Both contracts and regular addresses can control and reject which token they send

RATIONALE:
The principal intent for this standard is to solve some of the shortcomings of [ERC-20] while maintaining backward compatibility with [ERC-20], and avoiding the problems and vulnerabilities of [EIP-223]. Below are the rationales for the decisions regarding the main aspects of the standards. *NOTE*: Jacques Dafflon ([0xjac]), one of


=== ERC-5173 ===
TITLE: NFT Future Rewards (nFR)
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-05-08
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal introduces the Non-Fungible Future Rewards (nFR) framework, extending [ERC-721](./eip-721.md) tokens (NFTs) features to let token holders benefit from value appreciation after transferring ownership. By integrating cooperative game theory, it aligns stakeholder incentives, addressing inefficiencies in asset transactions. The framework fosters collaboration, transparency, and equitable profit sharing. It

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. The following is an extension of the [ERC-721](./eip-721.md) standard. [ERC-721](./eip-721.md)-compliant contracts MAY implement this EIP for rewards to provide a

MOTIVATION:
Traditional financial markets are often characterized by inefficiencies, opaque practices, and systemic imbalances, resulting in significant disadvantages for the majority of participants. Although blockchain technology offers transaction transparency, current implementations do not adequately facilitate equitable value sharing or participant alignment. This proposal addresses these gaps by introducing structured collaboration

RATIONALE:
### Fixed Percentage to 10^18 Considering Fixed-Point Arithmetic is to be enforced, it is logical to have 1e18 represent 100% and 1e16 represent 1% for Fixed-Point operations. This method of handling percents is also commonly seen in many Solidity libraries for Fixed-Point operations. ### Emitting Event for Payment Since


=== ERC-2680 ===
TITLE: Ethereum 2 wallet layout
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-05-29
REQUIRES: 

SUMMARY:
Ethereum wallets have no standards for their layout in persistent storage, making different wallet implementations incompatible. This defines a standard for the placement of Ethereum walletstores and keystores, making it possible for different software to work with the same wallets and keys.

SPECIFICATION:
There are four elements for a wallet that need to be addressed. These are defined below. ### Base location The base location is required to be well-known, either pre-defined or defined by the storage system's connection parameters. For filesystems the pre-defined base location for different operating systems is as

MOTIVATION:
A standard layout for wallets and accounts allows interoperability between validators. This benefits users, as they can move from one validator software to another (and back) without requiring movement of files. This is important because any movement of files containing keys involves danger of either deleting them or duplicating

RATIONALE:
A standard for walletstores, similar to that for keystores, provides a higher level of compatibility between wallets and allows for simpler wallet and key interchange between them.


=== ERC-2848 ===
TITLE: My Own Messages (MOM)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-08-02
REQUIRES: 

SUMMARY:
My Own Messages (MOM) use Ethereum as a certification layer for commands and multihash of your messages. It don't use smart contracts but simple self-send transactions with specific payload attached. To ge more insights, you can test a [live client](http://internetofpeers.org/mom-client/), watch a [full video overview and demo](https://www.youtube.com/watch?v=z1SnoQkQYkU) and read

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC 2119](https://www.ietf.org/rfc/rfc2119.txt) when, and only when, they appear in all capitals as shown here. Clients following MOM standard **MUST** allow users to

MOTIVATION:
As a _developer_ or _pool's owner_, I'd like to send messages to my users in a decentralized way. They must be able to easily verify my role in the smart contract context (owner, user, and so on) and they must be able to do it without relying on external,

RATIONALE:
Ethereum is _account based_, so it's good to be identified as a single source of information. It is also able of doing notarization very well and to impose some restrictions on transaction's structure, so it's good for commands. IPFS, Swarm or other CANs (Content Addressable Networks) or storage methods


=== ERC-4494 ===
TITLE: Permit for ERC-721 NFTs
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-11-25
REQUIRES: 1, 6, 5, ,,  , 7, 1, 2, ,,  , 7, 2, 1

SUMMARY:
The "Permit" approval flow outlined in [ERC-2612](./eip-2612.md) has proven a very valuable advancement in UX by creating gasless approvals for ERC20 tokens. This EIP extends the pattern to ERC-721 NFTs. This EIP borrows heavily from ERC-2612. This requires a separate EIP due to the difference in structure between ERC-20

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Three new functions MUST be added to [ERC-721](./eip-721.md): ```solidity pragma solidity 0.8.10; import "./IERC165.sol"; /// /// @dev Interface for token

MOTIVATION:
The permit structure outlined in [ERC-2612](./eip-2612.md) allows for a signed message (structured as outlined in [ERC-712](./eip-712.md)) to be used in order to create an approval. Whereas the normal approval-based pull flow generally involves two transactions, one to approve a contract and a second for the contract to pull the

RATIONALE:
The `permit` function is sufficient for enabling a `safeTransferFrom` transaction to be made without the need for an additional transaction. The format avoids any calls to unknown code. The `nonces` mapping is given for replay protection. A common use case of permit has a relayer submit a Permit on


=== ERC-7540 ===
TITLE: Asynchronous ERC-4626 Tokenized Vaults
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-10-18
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 4, 6, 2, 6, ,,  , 7, 5, 7, 5

SUMMARY:
The following standard extends [ERC-4626](./eip-4626.md) by adding support for asynchronous deposit and redemption flows. The async flows are called Requests. New methods are added to asynchronously Request a deposit or redemption, and view the status of the Request. The existing `deposit`, `mint`, `withdraw`, and `redeem` ERC-4626 methods are used

SPECIFICATION:
### Definitions: The existing definitions from [ERC-4626](./eip-4626.md) apply. In addition, this spec defines: - Request: a request to enter (`requestDeposit`) or exit (`requestRedeem`) the Vault - Pending: the state where a Request has been made but is not yet Claimable - Claimable: the state where a Request is processed

MOTIVATION:
The ERC-4626 Tokenized Vaults standard has helped to make yield-bearing tokens more composable across decentralized finance. The standard is optimized for atomic deposits and redemptions up to a limit. If the limit is reached, no new deposits or redemptions can be submitted. This limitation does not work well for

RATIONALE:
### Including Request IDs but not including a Claim by ID method Requests in an Asynchronous Vault have properties of NFTs or Semi-Fungible tokens due to their asynchronicity. However, trying to pigeonhole all ERC-7540 Vaults into supporting [ERC-721](./eip-721) or [ERC-1155](./eip-1155) for Requests would create too much interface bloat. Using


=== ERC-2767 ===
TITLE: Contract Ownership Governance
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-07-04
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 1, 7, 3

SUMMARY:
The following standard defines the implementation of a standard API for a Governance smart contract based on `ERC-20`. Existing `ERC-173` compatible contracts can upgrade from private key wallet ownership to a Governance smart contract. Adhering to a standard API enables general tools to populate governance information of various projects,

SPECIFICATION:
A Governance contract that is compliant with `ERC-2767` shall implement the following interfaces: ```solidity /// @title ERC-2767 Governance /// @dev ERC-165 InterfaceID: 0xd8b04e0e interface ERC2767 is ERC165 { /// @notice Gets number votes required for achieving consensus /// @dev Should cost less than 30000 gas /// @return Required number

MOTIVATION:
Traditionally, many contracts that require that they be owned or controlled in some way use `ERC-173` which standardized the use of ownership in the smart contracts. For example to withdraw funds or perform administrative actions. ```solidity contract dApp { function doSomethingAdministrative() external onlyOwner { // admin logic that can

RATIONALE:
The goals of this EIP have been the following: - Standardize API of Governance contracts to make it easy for analysis tools to be built. - Encourage use of `ERC-20` based weighted governance over existing multi-sig (_generally limited to 50 max owners_) for big projects. - Encourage existing `ERC-173`


=== ERC-6170 ===
TITLE: Cross-Chain Messaging Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-12-19
REQUIRES: 

SUMMARY:
This EIP introduces a common interface for cross-chain arbitrary message bridges (AMBs) to send and receive a cross-chain message (state).

SPECIFICATION:
The keywords "MUST," "MUST NOT," "REQUIRED," "SHALL," "SHALL NOT," "SHOULD," "SHOULD NOT," "RECOMMENDED," "MAY," and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. Every compliant cross-chain arbitrary message bridge must implement the following interface. ``` solidity // SPDX-License-Identifier: Apache-3.0 pragma solidity >=0.8.0; /// @title

MOTIVATION:
Currently, cross-chain arbitrary message bridges lack standardization, resulting in complex competing implementations: Layerzero, Hyperlane, Axelar, Wormhole, Matic State Tunnel and others. Either chain native (or) seperate message bridge, the problem prevails. Adding a common standardized interface to the arbitrary message bridges provides these benefits: - **Ease Of Development:** A

RATIONALE:
The cross-chain arbitrary messaging interface will optimize the interoperability layer between blockchains with a feature-complete yet minimal interface. The light-weighted approach also provides arbitrary message bridges, and the freedom of innovating at the relayer level, to show their technical might. The EIP will make blockchains more usable and scalable.


=== ERC-7604 ===
TITLE: ERC-1155 Permit Approvals
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-01-27
REQUIRES: 1, 6, 5, ,,  , 7, 1, 2, ,,  , 1, 1, 5, 5, ,,  , 1, 2, 7, 1, ,,  , 2, 0, 9, 8, ,,  , 5, 2, 1, 6

SUMMARY:
The "permit" approval flow for both [ERC-20](./eip-20.md) and [ERC-721](./eip-721.md) are large improvements for the existing UX of the token underlying each ERC. This ERC extends the "permit" pattern to [ERC-1155](./eip-20.md) tokens, borrowing heavily upon both [ERC-4494](./eip-4494.md) and [ERC-2612](./eip-2612.md). The structure of [ERC-1155](./eip-1155.md) tokens requires a new ERC to account

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Three new functions must be added to ERC-1155 and ERC-5216. ```solidity interface IERC1155Permit { function

MOTIVATION:
The permit structures outlined in both [ERC-4494](./eip-4494) and [ERC-2612](./eip-2612) allows a signed message to create an approval, but are only applicable to their respective underlying tokens ([ERC-721](./eip-721) and [ERC-20](./eip-20)).

RATIONALE:
The `permit` function is sufficient for enabling a `safeTransferFrom` transaction to be made without the need for an additional transaction. The format avoids any calls to unknown code. The `nonces` mapping is given for replay protection. A common use case of permit has a relayer submit a Permit on


=== ERC-2525 ===
TITLE: ENSLogin
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-02-19
REQUIRES: 1, 3, 7, ,,  , 6, 3, 4, ,,  , 1, 1, 9, 3, ,,  , 2, 3, 0, 4


=== ERC-6806 ===
TITLE: ERC-721 Holding Time Tracking
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-30
REQUIRES: 721

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It adds an interface that tracks and describes the holding time of a Non-Fungible Token (NFT) by an account.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. **Interface** The following interface extends the existing ERC-721 standard: ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity ^0.8.0 interface IERC6806 { function

MOTIVATION:
In some use cases, it is valuable to know the duration for which a NFT has been held by an account. This information can be useful for rewarding long-term holders, determining access to exclusive content, or even implementing specific business logic based on holding time. However, the current ERC-721

RATIONALE:
The addition of the `getHoldingInfo` function to an extension of the ERC-721 standard enables developers to implement NFT-based applications that require holding time information. This extension maintains compatibility with existing ERC-721 implementations while offering additional functionality for new use cases. The `getHoldingInfo` function provides a straightforward method for retrieving


=== ERC-1328 ===
TITLE: WalletConnect URI Format
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-08-15
REQUIRES: 

SUMMARY:
This standard defines how the data to connect some application and a wallet can be encoded with a URI. This URI can then be shown either as a QR code or as a link.

SPECIFICATION:
### Syntax WalletConnect request URI with the following parameters: request = "wc" ":" topic [ "@" version ][ "?" parameters ] topic = STRING version = 1*DIGIT parameters = parameter *( "&" parameter ) parameter = key "=" value key = STRING value = STRING ### Semantics Required parameters

RATIONALE:
This proposal moves away from the JSON format used in the alpha version of the WalletConnect protocol because it suffered from very inefficient parsing of the intent of the QR code, thereby making it easier to create better QR code parsers APIs for wallets to implement. Also by using


=== ERC-1387 ===
TITLE: Merkle Tree Attestations with Privacy enabled
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-08
REQUIRES: 


=== ERC-1438 ===
TITLE: dApp Components (avatar) & Universal Wallet
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-21
REQUIRES: 

SUMMARY:
There have been suggestions for modified tokens based on erc20, but since many tokens have already been built on erc20, it is necessary to increase the utilization of already developed erc20 tokens. Therefore, we propose a universal wallet that can use erc20 tokens universally. We also propose a component

SPECIFICATION:
### 1. Avatar #### 1.1. Avatar Shop - The avatar store is created after ERC20 currency is set. - You can customize asset category & viewer script. #### 1.2. Upload asset & user data The avatar's information & assets are stored in the event log part of the block

MOTIVATION:
While many projects are under development in an open source way, they are simply adding and deploy with open sources to their projects. This means that you are developing a centralized service that uses your own dApp-generated information on your own. In order to improve the block chain ecosystem,


=== ERC-5008 ===
TITLE: ERC-721 Nonce Extension
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-04-10
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It proposes adding a `nonce` function to ERC-721 tokens.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ```solidity /// @dev the ERC-165 identifier for this interface is 0xce03fdab. interface IERC5008 /* is IERC165 */ { /// @notice Emitted

MOTIVATION:
Some orders of NFT marketplaces have been attacked and the NFTs sold at a lower price than the current market floor price. This can happen when users transfer an NFT to another wallet and, later, back to the original wallet. This reactivates the order, which may list the token

RATIONALE:
At first `transferCount` was considered as function name, but there may some case to change the `nonce` besides transfer, such as important properties changed, then we changed `transferCount` to `nonce`.


=== ERC-5753 ===
TITLE: Lockable Extension for EIP-721
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-10-05
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [EIP-721](./eip-721.md). It introduces lockable NFTs. The locked asset can be used in any way except by selling and/or transferring it. The owner or operator can lock the token. When a token is locked, the unlocker address (an EOA or a contract) is set.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. EIP-721 compliant contracts MAY implement this EIP to provide standard methods of locking and unlocking the token at its current

MOTIVATION:
With NFTs, digital objects become digital goods, which are verifiably ownable, easily tradable, and immutably stored on the blockchain. That's why it's very important to continuously improve UX for non-fungible tokens, not just inherit it from one of the fungible tokens. In DeFi there is an UX pattern when

RATIONALE:
This approach proposes a solution that is designed to be as minimal as possible. It only allows to lock the item (stating who will be able to unlock it) and unlock it when needed if a user has permission to do it. At the same time, it is a


=== ERC-4910 ===
TITLE: Royalty Bearing NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-03-14
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The proposal directly connects NFTs and royalties in a smart contract architecture extending the [ERC-721](./eip-721.md) standard, with the aim of precluding central authorities from manipulating or circumventing payments to those who are legally entitled to them. The proposal builds upon the OpenZeppelin Smart Contract Toolbox architecture, and extends it

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ### Outline This proposal introduces several new concepts as extensions to the ERC-721 standard that warrant explanation: * **Royalty Account

MOTIVATION:
The management of royalties is an age-old problem characterized by complex contracts, opaque management, plenty of cheating and fraud. The above is especially true for a hierarchy of royalties, where one or more assets is derived from an original asset such as a print from an original painting, or

RATIONALE:
Royalties for NFTs is at its core a distribution licensing problem. A buyer obtains the right to an asset/content which might or might not be reproducible, alterable etc. by the buyer or agents of the buyer. Therefore, a comprehensive specification must address a hierarchy of royalties, where one or


=== ERC-5606 ===
TITLE: Multiverse NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-06
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This specification defines a minimal interface to create a multiverse NFT standard for digital assets such as wearables and in-game items that, in turn, index the delegate NFTs on each platform where this asset exists. These platforms could be metaverses, play-to-earn games or NFT marketplaces. This proposal depends on

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. A multiverse NFT contract represents a digital asset across multiple platforms. This contract can own one or more delegate NFT

MOTIVATION:
Several metaverses and blockchain games ("platforms") exist that use NFT standards such as ERC-721 and ERC-1155 for creating in-universe assets like avatar wearables, in-game items including weapons, shields, potions and much more. The biggest shortcoming while using these standards is that there is no interoperability between these platforms. As

RATIONALE:
The `delegateData` struct contains information about the delegate NFT tokens on each platform. It contains variables such as `contractAddress`, `tokenId`, `quantity` to differentiate the NFTs. These NFTs could be following either the ERC-721 standard or the ERC-1155 standard. The `bundle` and `unbundle` functions accept an array of DelegateData struct


=== ERC-7529 ===
TITLE: Contract Discovery and eTLD+1 Association
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-30
REQUIRES: 1191

SUMMARY:
The introduction of DNS over HTTPS (DoH) in [RFC 8484](https://www.rfc-editor.org/rfc/rfc8484) has enabled tamper-resistant client-side queries of DNS records directly from a web application. This proposal describes a simple standard leveraging DoH to fetch TXT records (from traditional DNS service providers) which are used for discovering and verifying the association

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. #### Definition: eTLD+1 The term TLD stands for *top-level domain* and is always the part

MOTIVATION:
As mainstream businesses begin to adopt public blockchain and digital asset technologies more rapidly, there is a growing need for a discovery/search mechanism (compatible with conventional web technologies) of smart contracts associated with a known business domain as well as reasonable assurance that the smart contract does indeed belong

RATIONALE:
In this specification, the TXT record `HOST` naming scheme is designed to mimic the DKIM naming convention. Additionally, this naming scheme makes it simple to programmatically ascertain if any smart contracts are associated with the domain on a given blockchain network. Prepending with `ERC-7529` will prevent naming collisions with


=== ERC-7531 ===
TITLE: Staked ERC-721 Ownership Recognition
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-10-01
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The ownership of [ERC-721](./eip-721.md) tokens when staked in a pool presents challenges, particularly when it involves older, non-lockable NFTs like, for example, Crypto Punks or Bored Ape Yacht Club (BAYC) tokens. This proposal introduces an interface to address these challenges by allowing staked NFTs to be recognized by their

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The interface is defined as follows: ```solidity interface IERC7531 { /** * @notice MUST be

MOTIVATION:
Recent solutions involve retaining NFT ownership while "locking" an NFT letting the owner keeping its ownership. However, this requires the NFT contract to implement lockable functionality. Early NFTs were not originally designed as lockable and so they must be staked transferring the ownership to the staking contract. This prevents

RATIONALE:
### Addressing Non-Lockable NFT Challenges: Non-lockable NFTs present a unique challenge in decentralized ecosystems, especially in scenarios involving staking or delegating usage rights. The standard [ERC-721](./eip-721.md) `ownerOf` function returns the current owner of the NFT, which, in the case of staking, would be the staking pool contract. This transfer


=== ERC-6900 ===
TITLE: Modular Smart Contract Accounts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-18
REQUIRES: 1, 6, 5, ,,  , 1, 2, 7, 1, ,,  , 4, 3, 3, 7

SUMMARY:
This proposal standardizes smart contract accounts and account modules, which are smart contracts that allow for composable logic within smart contract accounts. This proposal is compliant with [ERC-4337](./eip-4337.md). This standard emphasizes secure permissioning of modules, and maximal interoperability between all spec-compliant accounts and modules. This modular approach splits account

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Terms - An **account** (or **smart contract account, SCA**) is a smart contract that

MOTIVATION:
One of the goals that ERC-4337 accomplishes is abstracting the logic for execution and validation to each smart contract account. Many new features of accounts can be built by customizing the logic that goes into the validation and execution steps. Examples of such features include session keys, subscriptions, spending

RATIONALE:
ERC-4337 compatible accounts must implement the `IAccount` interface, which consists of only one method that bundles validation with execution: `validateUserOp`. A primary design rationale for this proposal is to extend the possible functions for a smart contract account beyond this single method by unbundling these and other functions, while


=== ERC-6596 ===
TITLE: Cultural and Historical Asset Token
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-02-28
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP proposes the establishment of a comprehensive metadata standard for Cultural and Historical Asset Tokens (CHATs) on the Ethereum platform. These tokens represent cultural and historical assets such as artwork, artifacts, collectibles, and rare items, providing crucial context and provenance to substantiate their significance and value. While existing

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. This EIP extends [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) with 48 additional properties to capture the cultural and

MOTIVATION:
**Preserving context and significance** - Provenance and context are crucial for cultural and historical assets. The CHAT standard captures and preserves the provenance and history of these assets, as well as the changing contexts that emerge from new knowledge and information. This context and provenance substantiate the significance and

RATIONALE:
### Choosing to Extend Off-Chain Metadata JSON Schema over On-Chain Interface Both the [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) provide natural extension points in the metadata JSON file associated with NFTs to supply enriched datasets about the underlying assets. Providing enriched datasets through off-chain metadata JSON files allows existing NFT contracts to


=== ERC-3000 ===
TITLE: Optimistic enactment governance standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-09-24
REQUIRES: 

SUMMARY:
ERC-3000 presents a basic on-chain spec for contracts to optimistically enact governance decisions made off-chain. The standard is opinionated in defining the 6 entrypoint functions to contracts supporting the standard. But it allows for any sort of resolver mechanism for the challenge/response games characteristic of optimistic contracts. While the

SPECIFICATION:
### Data structures Some data structures are defined which are later used in the standard interfaces: ```solidity library ERC3000Data { struct Container { Payload payload; Config config; } struct Payload { uint256 nonce; uint256 executionTime; address submitter; IERC3000Executor executor; Action[] actions; bytes proof; } struct Action { address to;

RATIONALE:
The authors believe that it is very important that this standard leaves the other open to any resolver mechanism to be implemented and adopted. That's why a lot of the function and variable names were left intentionally bogus to be compatible with future resolvers without changing the standard. ERC-3000


=== ERC-998 ===
TITLE: Composable Non-Fungible Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2018-07-07
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
An extension of the [ERC-721 standard](./eip-721.md) to enable ERC-721 tokens to own other ERC-721 tokens and [ERC-20](./eip-20.md) tokens. An extension of the [ERC-20](./eip-20.md) and `ERC-223 https://github.com/ethereum/EIPs/issues/223` standards to enable ERC-20 and `ERC-223` tokens to be owned by ERC-721 tokens. This specification covers four different kinds of composable tokens: 1.

SPECIFICATION:
### ERC-721 `ERC998ERC721` top-down, `ERC998ERC20` top-down, and `ERC998ERC721` bottom-up composable contracts must implement the [ERC-721 interface](./eip-721.md). ### ERC-20 `ERC998ERC20` bottom-up composable contracts must implement the [ERC-20 interface](./eip-20.md). ### [ERC-165](./eip-165.md) The [ERC-165 standard](./eip-165.md) must be applied to each [ERC-998](./eip-998.md) interface that is used. ### Authentication Authenticating whether a user or

RATIONALE:
Two different kinds of composable (top-down and bottom-up) exist to handle different use cases. A regular ERC-721 token cannot own a top-down composable, but it can own a bottom-up composable. A bottom-up composable cannot own a regular ERC-721 but a top-down composable can own a regular ERC-721 token. Having


=== ERC-5528 ===
TITLE: Refundable Fungible Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-16
REQUIRES: 20

SUMMARY:
This standard is an extension of [EIP-20](./eip-20.md). This specification defines a type of escrow service with the following flow: - The seller issues tokens. - The seller creates an escrow smart contract with detailed escrow information like contract addresses, lock period, exchange rate, additional escrow success conditions, etc. -

SPECIFICATION:
There are two types of contract for the escrow process: - *Payable Contract*: The sellers and buyers use this token to fund the *Escrow Contract*. This contract MUST override [EIP-20](./eip-20.md) interfaces. - *Escrow Contract*: Defines the escrow policies and holds *Payable Contract*'s token for a certain period. This contract

MOTIVATION:
Because of the pseudonymous nature of cryptocurrencies, there is no automatic recourse to recover funds that have already been paid. In traditional finance, trusted escrow services solve this problem. In the world of decentralized cryptocurrency, however, it is possible to implement an escrow service without a third-party arbitrator. This

RATIONALE:
The interfaces cover the escrow operation's refundable issue. The suggested 3 functions (`escrowFund`, `escrowRefund` and `escrowWithdraw`) are based on `transfer` function in EIP-20. `escrowFund` send tokens to the *Escrow Contract*. The *Escrow Contract* can hold the contract in the escrow process or reject tokens if the policy does not


=== ERC-7291 ===
TITLE: Purpose bound money
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-24
REQUIRES: 1, 6, 5, ,,  , 1, 7, 3, ,,  , 1, 1, 5, 5

SUMMARY:
This proposal outlines a smart contract interface that builds upon the [ERC-1155](./eip-1155.md) standard to implement the purpose bound money (PBM) concept: - PBMs is comprised of a PBM wrapper and a digital money token that it wraps. A digital money token (e.g. stablecoins, central bank digital currency, tokenised bank

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Definitions - **sovToken** - an ERC-20 or ERC-20 compatible digital currency (e.g. [ERC-777](./eip-777.md), [ERC-1363](./eip-1363.md))

MOTIVATION:
This proposal intends to forestall technology fragmentation and consequently a lack of interoperability. By making the PBM specification open, it gives new participants easy and free access to the pre-existing market standards, enabling interoperability across different platforms, wallets, payment systems and rails. This would lower cost of entry for

RATIONALE:
### Why sovToken **MUST** be ERC-20 compatible? As PBM is envisioned to have functionality of money, it has to be a fungible token with stable value. Currently, the major stablecoins in the market are mainly based on the ERC-20 interface. ERC-20 or ERC-20 compatible tokens are the most widely


=== ERC-223 ===
TITLE: Token with transaction handling model
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2017-05-03
REQUIRES: 

SUMMARY:
The following describes an interface and logic for fungible tokens that supports a `tokenReceived` callback to notify contract recipients when tokens are received. This makes tokens behave identical to ether.

SPECIFICATION:
Contracts intending to receive these tokens MUST implement `tokenReceived`. Token transfers to contracts not implementing `tokenReceived` as described below MUST revert. ### Token contract #### Token Methods ##### `totalSupply` ```solidity function totalSupply() view returns (uint256) ``` Returns the total supply of the token. The functionality of this method is

MOTIVATION:
This token introduces a communication model for contracts that can be utilized to straighten the behavior of contracts that interact with such tokens. Specifically, this proposal: 1. Informs receiving contracts of incoming token transfers, as opposed to [ERC-20](./eip-20.md) where the recipient of a token transfer gets no notification. 2.

RATIONALE:
This standard introduces a communication model by enforcing the `transfer` to execute a handler function in the destination address. This is an important security consideration as it is required that the receiver explicitly implements the token handling function. In cases where the receiver does not implements such function the


=== ERC-5247 ===
TITLE: Smart Contract Executable Proposal Interface
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-07-13
REQUIRES: 

SUMMARY:
This EIP presents an interface for "smart contract executable proposals": proposals that are submitted to, recorded on, and possibly executed on-chain. Such proposals include a series of information about function calls including the target contract address, ether value to be transmitted, gas limits and calldatas.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity // SPDX-License-Identifier: MIT pragma solidity ^0.8.17; interface IERC5247 { event ProposalCreated( address indexed proposer, uint256 indexed proposalId, address[] targets,

MOTIVATION:
It is oftentimes necessary to separate the code that is to be executed from the actual execution of the code. A typical use case for this EIP is in a Decentralized Autonomous Organization (DAO). A proposer will create a smart proposal and advocate for it. Members will then choose

RATIONALE:
* Originally, this interface was part of part of `ERC-1202`. However, the proposal itself can potentially have many use cases outside of voting. It is possible that voting may not need to be upon a proposal in any particular format. Hence, we decide to *decouple the voting interface and


=== ERC-1154 ===
TITLE: Oracle Interface
TYPE: Standards Track ERC
STATUS: Withdrawn
CREATED: 2018-06-13
REQUIRES: 

SUMMARY:
In order for ethereum smart contracts to interact with off-chain systems, oracles must be used. These oracles report values which are normally off-chain, allowing smart contracts to react to the state of off-chain systems. A distinction and a choice is made between push and pull based oracle systems. Furthermore,

SPECIFICATION:
<dl> <dt>Oracle</dt> <dd>An entity which reports data to the blockchain.</dd> <dt>Oracle consumer</dt> <dd>A smart contract which receives data from an oracle.</dd> <dt>ID</dt> <dd>A way of indexing the data which an oracle reports. May be derived from or tied to a question for which the data provides the answer.</dd> <dt>Result</dt>

MOTIVATION:
The Ethereum ecosystem currently has many different oracle implementations available, but they do not provide a unified interface. Smart contract systems would be locked into a single set of oracle implementations, or they would require developers to write adapters/ports specific to the oracle system chosen in a given project.

RATIONALE:
The specs are currently very similar to what is implemented by ChainLink (which can use any arbitrarily-named callback) and Oraclize (which uses `__callback`). With this spec, the oracle _pushes_ state to the consumer, which must react accordingly to the updated state. An alternate _pull_-based interface can be prescribed, as


=== ERC-7743 ===
TITLE: Multi-Owner Non-Fungible Tokens (MO-NFT)
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-07-13
REQUIRES: 

SUMMARY:
This ERC proposes a new standard for non-fungible tokens (NFTs) that supports multiple owners. The MO-NFT standard allows a single NFT to have multiple owners, reflecting the shared and distributable nature of digital assets. This model incorporates mechanisms for provider-defined transfer fees and ownership burning, enabling flexible and collaborative

SPECIFICATION:
### Data Structures - **Owners Mapping**: A mapping from `tokenId` to an enumerable set of owner addresses. ```solidity mapping(uint256 => EnumerableSet.AddressSet) internal _owners; ``` - **Balances Mapping**: A mapping from owner addresses to the number of tokens they own. ```solidity mapping(address => uint256) private _balances; ``` - **Providers Mapping**:

MOTIVATION:
Traditional NFTs enforce a single-ownership model, which does not align with the inherent duplicability and collaborative potential of digital assets. MO-NFTs allow for shared ownership, promoting wider distribution and collaboration while maintaining secure access control. The inclusion of provider fees and ownership burning enhances the utility and flexibility of

RATIONALE:
1. **Multi-Ownership Model**: - Digital assets are inherently duplicable and can be shared without loss of quality. The multi-owner model allows broader distribution and collaboration while maintaining a unique token identity. 2. **Additive Ownership**: - By adding new owners without removing existing ones, we support shared ownership models common


=== ERC-7794 ===
TITLE: Grant Registry
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-22
REQUIRES: 

SUMMARY:
This proposal introduces a Grant Registry contract intended for managing financial, research, or project-based grants that provide funding for projects across multiple blockchains. The contract standardizes the registration, management, and tracking of these grants by organizing data into distinct categories, enabling clear separation between immutable fields and mutable fields.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### **Contract Interface** ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity ^0.8.20; interface IGrantRegistry { /** *

MOTIVATION:
The Ethereum ecosystem currently lacks a standardized way to manage and track grants across different chains and programs, leading to inefficiencies and fragmentation. Each grant program has its own distinct interface, processes, and management mechanisms, which creates barriers for both funders and grantees. These issues hinder transparency, complicate the

RATIONALE:
The design of this Grant Registry Contract is driven by the need for a flexible and modular system that supports a wide range of grant programs across different chains. The rationale for the key design decisions is outlined below: 1. Separation of Fields: The division of fields into different


=== ERC-6538 ===
TITLE: Stealth Meta-Address Registry
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-01-24
REQUIRES: 7, 1, 2, ,,  , 1, 2, 7, 1, ,,  , 5, 5, 6, 4

SUMMARY:
This specification defines a standardized way of storing and retrieving an entity's stealth meta-address, by extending [ERC-5564](./eip-5564.md). An entity may register their stealth meta-address directly. A third party can also register on behalf of an entity using a valid [EIP-712](./eip-712.md) or [EIP-1271](./eip-1271.md) signature. Once registered, the stealth meta-address for

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. This contract defines an `ERC6538Registry` that stores the stealth meta-address for entities. These entities may be identified by an address,

MOTIVATION:
The standardization of stealth address generation holds the potential to greatly enhance the privacy capabilities of Ethereum by enabling the recipient of a transfer to remain anonymous when receiving an asset. By introducing a central smart contract for users to store their stealth meta-addresses, EOAs and contracts can programmatically

RATIONALE:
Having a central smart contract for registering stealth meta-addresses has several benefits: 1. It guarantees interoperability with other smart contracts, as they can easily retrieve and utilize the registered stealth meta-addresses. This enables applications such as ENS or Gnosis Safe to use that information and integrate stealth addresses into


=== ERC-5216 ===
TITLE: ERC-1155 Allowance Extension
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-07-11
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This ERC defines standard functions for granular approval of [ERC-1155](./eip-1155.md) tokens by both `id` and `amount`. This ERC extends [ERC-1155](./eip-1155.md).

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Contracts using this ERC MUST implement the `IERC5216` interface. ### Interface implementation ```solidity /** * @title ERC-1155 Allowance Extension * Note:

MOTIVATION:
[ERC-1155](./eip-1155.md)'s popularity means that multi-token management transactions occur on a daily basis. Although it can be used as a more comprehensive alternative to [ERC-721](./eip-721.md), ERC-1155 is most commonly used as intended: creating multiple `id`s, each with multiple tokens. While many projects interface with these semi-fungible tokens, by far the

RATIONALE:
The name "ERC-1155 Allowance Extension" was chosen because it is a succinct description of this ERC. Users can approve their tokens by `id` and `amount` to `operator`s. By having a way to approve and revoke in a manner similar to [ERC-20](./eip-20.md), the trust level can be more directly managed


=== ERC-7196 ===
TITLE: Simple token, Simplified ERC-20
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-21
REQUIRES: 20

SUMMARY:
This ERC is a new asset designed based on the user contract wallet (including account abstraction), and is forward compatible with [ERC-20](./eip-20.md). To keep token assets simple, this ERC removes the `transferFrom`, `approve` and `allowance` functions of ERC-20.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Compliant contracts MUST implement the following interface: ```solidity pragma solidity ^0.8.20; /** * @title ERC7196

MOTIVATION:
[ERC-20](./eip-20.md) defines Ethereum-based standard tokens that can be traded and transferred, but the essence of ERC-20 is based on the externally-owned account (EOA) wallet design. An EOA wallet has no state and code storage, and the smart contract wallet is different. Almost all ERCs related to tokens add functions,

RATIONALE:
The proposal is to simplify token standards by removing `transferFrom`, `approve` and `allowance` functions. This simplification aims to enhance security, reduce complexity, and improve efficiency, making the standard more suitable for smart contract wallet environments while maintaining essential functionalities.


=== ERC-5185 ===
TITLE: NFT Updatable Metadata Extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-06-27
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This specification defines a standard way to allow controlled NFTs' metadata updates along predefined formulas. Updates of the original metadata are restricted and defined by a set of recipes and the sequence and results of these recipes are deterministic and fully verifiable with on-chain metadata updates event. The proposal

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. The **metadata updates extension** is OPTIONAL for [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md) contracts. ```solidity /// @title ERC-721/ERC-1155 Updatable Metadata Extension interface IERC5185UpdatableMetadata

MOTIVATION:
Storing voluminous NFT metadata on-chain is often neither practical nor cost-efficient. Storing NFT metadata off-chain on distributed file systems like IPFS can answer some needs of verifiable correlation and permanence between an NFT tokenId and its metadata but updates come at the cost of being all or nothing (aka

RATIONALE:
There have been numerous interesting uses of [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md) smart contracts that associate for each token essential and significant metadata. While some projects (e.g. EtherOrcs) have experimented successfully to manage these metadata on-chain, that experimental solution will always be limited by the cost and speed of generating and


=== ERC-2494 ===
TITLE: Baby Jubjub Elliptic Curve
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-01-29
REQUIRES: 

SUMMARY:
Two of the main issues behind why blockchain technology is not broadly used by individuals and industry are scalability and privacy guarantees. With a set of cryptographic tools called zero-knowledge proofs (ZKP) it is possible to address both of these problems. More specifically, the most suitable protocols for blockchain

SPECIFICATION:
### Definitions Let `F_r` be the prime finite field with `r` elements, where ``` r = 21888242871839275222246405745257275088548364400416034343698204186575808495617 ``` Let `E` be the twisted Edwards elliptic curve defined over `F_r` described by equation ``` ax^2 + y^2 = 1 + dx^2y^2 ``` with parameters ``` a = 168700 d =

MOTIVATION:
A [zero knowledge proof](https://en.wikipedia.org/wiki/Zero-knowledge_proof) (ZKP) is a protocol that enables one party, the prover, to convince another, the verifier, that a statement is true without revealing any information beyond the veracity of the statement. [Non-Interactive ZKPs](https://people.csail.mit.edu/silvio/Selected%20Scientific%20Papers/Zero%20Knowledge/Noninteractive_Zero-Knowkedge.pdf) (NIZK) are a particular type of zero-knowledge proofs in which the prover can

RATIONALE:
The search for Baby Jubjub was motivated by the need for an elliptic curve that allows the implementation of elliptic-curve cryptography in `F_r`-arithmetic circuits. The curve choice was based on three main factors: type of curve, generation process and security criteria. This section describes how these factors were addressed.


=== ERC-7246 ===
TITLE: Encumber - Splitting Ownership & Guarantees
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-27
REQUIRES: 20

SUMMARY:
This ERC proposes an extension to the [ERC-20](./eip-20.md) token standard by adding Encumber—the ability for an account to grant another account exclusive right to move some portion of their balance. Encumber is a stronger version of [ERC-20](./eip-20.md) allowances. While [ERC-20](./eip-20.md) approve grants another account the permission to transfer a

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. A compliant token MUST implement the following interface ```solidity /** * @dev Interface of the

MOTIVATION:
This extension adds flexibility to the [ERC-20](./eip-20.md) token standard and caters to use cases where token locking is required, but it is preferential to maintain actual ownership of tokens. This interface can also be adapted to other token standards, such as [ERC-721](./eip-721.md), in a straightforward manner Token holders commonly

RATIONALE:
The specification was designed to complement and mirror the ERC-20 specification to ease adoption and understanding. The specification is intentionally minimally proscriptive of this joining, where the only true requirement is that an owner cannot transfer encumbered tokens. However, the example implementation includes some decisions about where to connect


=== ERC-5553 ===
TITLE: Representing IP and its Royalty Structure
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-17
REQUIRES: 2, 0, ,,  , 7, 2, 1

SUMMARY:
This proposal introduces a generic way to represent intellectual property on chain, along with a refined royalty representation mechanism and associated metadata link. This standard is not associated with a specific type of IP and could represent many types of IP, such as musical IP, videos, books, images, and

MOTIVATION:
There is no accepted standard mechanism to license intellectual property or to represent it, except using traditional NFTs. However, regular NFTs only represent a collectible item use case and cannot easily represent more complicated use cases of licensing IP for different types of uses. We can enable such licensing

RATIONALE:
### Returning an array of EIP-20 tokens presents a more robust royalty portions structure/ Current royalty implementations deal only with a single type of royalty payment: NFT sales. They also only allow a single type of royalty - i.e., Music NFTs cannot pay different people in different scenarios. In


=== ERC-5700 ===
TITLE: Bindable Token Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-09-22
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This standard defines an interface for [ERC-721](./eip-721.md) or [ERC-1155](./eip-155.md) tokens, known as "bindables", to "bind" to [ERC-721](./eip-721.md) NFTs. When bindable tokens "bind" to an NFT, even though their ownership is transferred to the NFT, the NFT owner may "unbind" the tokens and claim their ownership. This enables bindable tokens

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### ERC-721 Bindable **Smart contracts implementing the ERC-721 bindable standard MUST implement the `IERC721Bindable` interface.** **Implementers of the `IER721Bindable` interface

MOTIVATION:
A standard interface for NFT binding offers a seamless and efficient way to bundle and transfer tokens with NFTs, ensuring compatibility with wallets, marketplaces, and other NFT applications. It eliminates the need for rigid, implementation-specific strategies for token ownership. In contrast with other standards that deal with token ownership

RATIONALE:
A standard for token binding unlocks a new layer of composability for allowing wallets, applications, and protocols to interact with, trade, and display bundled NFTs. One example use-case of this is at Dopamine, where streetwear garments may be bundled with digital assets such as music, avatars, or digital-twins of


=== ERC-4626 ===
TITLE: Tokenized Vaults
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2021-12-22
REQUIRES: 2, 0, ,,  , 2, 6, 1, 2

SUMMARY:
The following standard allows for the implementation of a standard API for tokenized Vaults representing shares of a single underlying [EIP-20](./eip-20.md) token. This standard is an extension on the EIP-20 token that provides basic functionality for depositing and withdrawing tokens and reading balances.

SPECIFICATION:
All [EIP-4626](./eip-4626.md) tokenized Vaults MUST implement EIP-20 to represent shares. If a Vault is to be non-transferrable, it MAY revert on calls to `transfer` or `transferFrom`. The EIP-20 operations `balanceOf`, `transfer`, `totalSupply`, etc. operate on the Vault "shares" which represent a claim to ownership on a fraction of the

MOTIVATION:
Tokenized Vaults have a lack of standardization leading to diverse implementation details. Some various examples include lending markets, aggregators, and intrinsically interest bearing tokens. This makes integration difficult at the aggregator or plugin layer for protocols which need to conform to many standards, and forces each protocol to implement

RATIONALE:
The Vault interface is designed to be optimized for integrators with a feature complete yet minimal interface. Details such as accounting and allocation of deposited tokens are intentionally not specified, as Vaults are expected to be treated as black boxes on-chain and inspected off-chain before use. EIP-20 is enforced


=== ERC-1123 ===
TITLE: Revised Ethereum Smart Contract Packaging Standard
TYPE: Standards Track ERC
STATUS: Withdrawn
CREATED: 2018-06-01
REQUIRES: 


=== ERC-7629 ===
TITLE: ERC-20/ERC-721 Unified Token Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-18
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal introduces a protocol that establishes a unified interface for managing both [ERC-20](./eip-20.md) fungible tokens and [ERC-721](./eip-721.md) non-fungible tokens (NFTs) on the Ethereum blockchain. By defining a common set of functions applicable to both token types, developers can seamlessly interact with [ERC-20](./eip-20.md) and [ERC-721](./eip-721.md) tokens using a single

SPECIFICATION:
- Introduces a token contract that combines features from both [ERC-20](./eip-20.md) and [ERC-721](./eip-721.md) standards. - Supports state transitions between [ERC-20](./eip-20.md) and [ERC-721](./eip-721.md) modes, facilitating seamless conversion and utilization of both liquidity and non-fungibility. - Defines essential functions and events to support token interactions, conversions, and queries. - Implements low

MOTIVATION:
The proposal aims to address the demand for assets combining the liquidity of [ERC-20](./eip-20.md) tokens and the uniqueness of [ERC-721](./eip-721.md) tokens. Current standards present a fragmentation, requiring users to choose between these features. This proposal fills that gap by providing a unified token interface, enabling smooth transitions between [ERC-20](./eip-20.md)

RATIONALE:
Common Interface for Different Token Types: - Introduces a unified interface to address the fragmentation caused by separate [ERC-20](./eip-20.md) and [ERC-721](./eip-721.md) standards. - Standardizes functions like transferFrom, mint, and burn, enabling developers to interact with both token types without implementing distinct logic. Transfer Functionality: - Includes transferFrom function for


=== ERC-7677 ===
TITLE: Paymaster Web Service Capability
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-04-03
REQUIRES: 4, 3, 3, 7, ,,  , 5, 7, 9, 2

SUMMARY:
With [EIP-5792](./eip-5792.md), apps can communicate with wallets about advanced features via capabilities. This proposal defines a capability that allows apps to request that [ERC-4337](./eip-4337.md) wallets communicate with a specified paymaster web service. To support this, we also define a standardized API for paymaster web services.

SPECIFICATION:
One new [EIP-5792](./eip-5792.md) wallet capability is defined. We also define a standard interface for paymaster web services as a prerequisite. ### Paymaster Web Service Interface We define two JSON-RPC methods to be implemented by paymaster web services. #### `pm_getPaymasterStubData` Returns stub values to be used in paymaster-related fields of

MOTIVATION:
App developers want to start sponsoring their users' transactions using paymasters. Paymasters are commonly used via web services. However, there is currently no way for apps to tell wallets to communicate with a specific paymaster web service. Similarly, there is no standard for how wallets should communicate with these

RATIONALE:
### Gas Estimation The current loose standard for paymaster services is to implement `pm_sponsorUserOperation`. This method returns values for paymaster-related user operation fields and updated gas values. The problem with this method is that paymaster service providers have different ways of estimating gas, which results in different estimated gas


=== ERC-6909 ===
TITLE: Minimal Multi-Token Interface
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-04-19
REQUIRES: 165

SUMMARY:
The following specifies a multi-token contract as a simplified alternative to the [ERC-1155](./eip-1155.md) Multi-Token Standard. In contrast to ERC-1155, callbacks and batching have been removed from the interface and the permission system is a hybrid operator-approval scheme for granular and scalable permissions. Functionally, the interface has been reduced to

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Every [ERC-6909](./eip-6909.md) compliant contract must implement the [ERC-165](./eip-165.md) interface in addition to the following interface.

MOTIVATION:
The ERC-1155 standard includes unnecessary features such as requiring recipient accounts with code to implement callbacks returning specific values and batch-calls in the specification. In addition, the single operator permission scheme grants unlimited allowance on every token ID in the contract. Backwards compatibility is deliberately removed only where necessary.

RATIONALE:
### Granular Approvals While the "operator model" from the ERC-1155 standard allows an account to set another account as an operator, giving full permissions to transfer any amount of any token id on behalf of the owner, this may not always be the desired permission scheme. The "allowance model"


=== ERC-2157 ===
TITLE: dType Storage Extension - Decentralized Type System for EVM
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-06-28
REQUIRES: 1900

SUMMARY:
The storage extension will enable easy navigation and retrieval of type data that is intended to be of public use. This is possible through standardizing the ABI of the dType storage contracts, with the effect of having a deterministic path to a type instance record. This standardization enables a

SPECIFICATION:
### TypeRootContract ERC-1900 defines a `contractAddress` field in the type metadata. For the limited purpose of ERC-1900, this field contains the value of the Ethereum type library in which the type definition exists. For the purpose of this ERC, the `contractAddress` will contain the Etherereum address of a `TypeRootContract`.

MOTIVATION:
Currently, Ethereum does not have standardization of data addressability. This might not be needed for data that is meant to be quasi-private, however, it is needed for data that is meant for public consumption. ERC-1900 has started standardizing data types for increasing interoperability between projects, but this is not

RATIONALE:
We are now thinking about a building block as a smart contract with an encapsulated object that contains state changing functions that are only understood from within. This is more akin to Object-Oriented Programming and poses interoperability and scalability issues. Not necessarily for an individual project, but for a


=== ERC-7750 ===
TITLE: Decentralized Employment System
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-08-04
REQUIRES: 

SUMMARY:
This ERC proposes a Decentralized Employment System (DES) built on the Ethereum blockchain. The DES facilitates the creation and management of companies, records comprehensive employment histories through unique employee tokens, enables the formation and execution of labor contracts, automates salary payments via an escrow mechanism, incorporates a robust moderation

SPECIFICATION:
### Solidity Interface To provide a clear and standardized way for developers to interact with the DES, the following Solidity interface outlines the primary functions and events of the system: ```solidity pragma solidity ^0.8.0; /// @title Decentralized Employment System Interface interface IDecentralizedEmploymentSystem { // Events event CompanyRegistered(uint companyId, address

MOTIVATION:
Traditional employment systems are centralized, opaque, and often lack trust. The DES aims to introduce transparency, immutability, and trust into the employment process by leveraging blockchain technology. By recording employment history on-chain, enabling decentralized company creation, automating contract enforcement, and providing mechanisms for dispute resolution, the DES promotes a

RATIONALE:
1. **Employee Tokenization**: - Utilizing **Soulbound Tokens (SBTs)** to represent employees ensures that each employee has a unique, non-transferable identity on the blockchain. This design choice enhances the integrity of employment records, making them tamper-proof and verifiable. It also allows companies to access a comprehensive employment history before finalizing


=== ERC-5643 ===
TITLE: Subscription NFTs
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-09-10
REQUIRES: 721

SUMMARY:
This standard is an extension of [EIP-721](./eip-721.md). It proposes an additional interface for NFTs to be used as recurring, expirable subscriptions. The interface includes functions to renew and cancel the subscription.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity interface IERC5643 { /// @notice Emitted when a subscription expiration changes /// @dev When a subscription is canceled, the

MOTIVATION:
NFTs are commonly used as accounts on decentralized apps or membership passes to communities, events, and more. However, it is currently rare to see NFTs like these that have a finite expiration date. The "permanence" of the blockchain often leads to memberships that have no expiration dates and thus

RATIONALE:
This standard aims to make on-chain subscriptions as simple as possible by adding the minimal required functions and events for implementing on-chain subscriptions. It is important to note that in this interface, the NFT itself represents ownership of a subscription, there is no facilitation of any other fungible or


=== ERC-7729 ===
TITLE: Token with Metadata
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-24
REQUIRES: 20

SUMMARY:
This standard extends the [ERC-20](./eip-20.md) standard to include a `metadata` function interface and a JSON schema for metadata.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. **Every compliant contract must implement the `IERC7729`, and [`ERC20`](./eip-20.md) interfaces.** This standard includes the following interface:

MOTIVATION:
Memecoins have demonstrated the value of associating tokens with visual metadata. By standardizing a way to include metadata in ERC-20 tokens, developers can create more engaging and interactive tokens, fostering community engagement.

RATIONALE:
The `metadata` function was chosen based on existing implementations in standards and applications.


=== ERC-6239 ===
TITLE: Semantic Soulbound Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-12-30
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 5, 1, 9, 2

SUMMARY:
This proposal extends [ERC-721](./eip-721.md) and [ERC-5192](./eip-5192.md) by introducing Resource Description Framework (RDF) triples to Soulbound Tokens' (‘SBTs‘) metadata.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. - The token **MUST** implement the following interfaces: 1. [ERC-165](./eip-165.md)’s `ERC165` (`0x01ffc9a7`) 1. [ERC-721](./eip-721.md)’s `ERC721` (`0x80ac58cd`) 1. [ERC-721](./eip-721.md)’s `ERC721Metadata` (`0x5b5e139f`)

MOTIVATION:
A Soulbound Token represents the commitments, credentials, and affiliations of accounts. RDF is a standard data model developed by the World Wide Web Consortium (‘W3C’) and is used to represent information in a structured format. Semantic SBTs are built on existing [ERC-721](./eip-721.md) and [ERC-5192](./eip-5192.md) standards to include RDF triples

RATIONALE:
RDF is a flexible and extensible data model based on creating subject-predicate-object relationships, often used to model graph data due to its semantic web standards, Linked Data concept, flexibility, and query capabilities. RDF allows graph data to be easily integrated with other data sources on the web, making it


=== ERC-7410 ===
TITLE: ERC-20 Update Allowance By Spender
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-26
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
This extension adds a `decreaseAllowanceBySpender` function to decrease [ERC-20](./eip-20.md) allowances, in which a spender can revoke or decrease a given allowance by a specific address. This ERC extends [ERC-20](./eip-20.md).

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Contracts using this ERC MUST implement the `IERC7410` interface. ### Interface implementation ```solidity pragma solidity ^0.8.0; /** * @title IERC-7410 Update

MOTIVATION:
Currently, [ERC-20](./eip-20.md) tokens offer allowances, enabling token owners to authorize spenders to use a designated amount of tokens on their behalf. However, the process of decreasing an allowance is limited to the owner's side, which can be problematic if the token owner is a treasury wallet or a multi-signature

RATIONALE:
The technical design choices within this ERC are driven by the following considerations: - The introduction of the `decreaseAllowanceBySpender` function empowers spenders by allowing them to autonomously revoke or decrease allowances. This design choice aligns with the goal of providing more direct control to spenders over their authorization levels.


=== ERC-4906 ===
TITLE: EIP-721 Metadata Update Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-03-13
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [EIP-721](./eip-721.md). It adds a `MetadataUpdate` event to EIP-721 tokens.

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. The **metadata update extension** is OPTIONAL for EIP-721 contracts. ```solidity /// @title EIP-721 Metadata Update Extension interface IERC4906 is IERC165, IERC721

MOTIVATION:
Many [EIP-721](./eip-721.md) contracts emit an event when one of its tokens' metadata are changed. While tracking changes based on these different events is possible, it is an extra effort for third-party platforms, such as an NFT marketplace, to build individualized solutions for each NFT collection. Having a standard `MetadataUpdate`

RATIONALE:
Different NFTs have different metadata, and metadata generally has multiple fields. `bytes data` could be used to represents the modified value of metadata. It is difficult for third-party platforms to identify various types of `bytes data`, so as to avoid unnecessary complexity, arbitrary metadata is not included in the


=== ERC-6123 ===
TITLE: Smart Derivative Contract
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-12-13
REQUIRES: 

SUMMARY:
The Smart Derivative Contract (SDC) allows fully automizing and securing a financial product's - e.g. a financial derivative or bond - complete trade life cycle. The SDC leverages the advantages of smart contracts to remove many of the frictions associated with the classical derivative life cycle. Most notably, the

SPECIFICATION:
### Methods The following methods specify a Smart Derivative Contract's trade initiation, trade termination and settlement life cycle. For further information, please also look at the interface documentation ISDC.sol. #### Trade Initiation Phase: `inceptTrade` A party can initiate a trade by providing the party address to trade with, trade

MOTIVATION:
### Rethinking Financial Derivatives By their very nature, so-called "over-the-counter (OTC)" financial contracts are bilateral contractual agreements on exchanging long-dated cash flow schedules. Since these contracts change their intrinsic market value due to changing market environments, they are subject to counterparty credit risk when one counterparty is subject to

RATIONALE:
The interface design and reference implementation are based on the following considerations: - An SDC protocol enables interacting parties to initiate and process a financial transaction in a bilateral and deterministic manner. Settlement and Counterparty Risk is managed by the contract. - The provided interface specification is supposed to


=== ERC-7766 ===
TITLE: Signature Aggregation for ERC-4337
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-09-01
REQUIRES: 4, 3, 3, 7, ,,  , 7, 5, 6, 2

SUMMARY:
[ERC-4337](./eip-4337) defined a way to achieve Account Abstraction on Ethereum using an alternative `UserOperation` mempool. However, one big limitation remains: each transaction must carry its own `signature` or other form of validation input in order to be included. We propose an extension to the ERC-4337 that introduces a new

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Aggregator - a new ERC-4337 `UserOperation` entity contract * **Aggregator** - a helper contract

MOTIVATION:
Using validation schemes that allow signature aggregation enables significant optimisations and savings on gas for execution and transaction data cost. This is especially relevant in the context of rollups that publish data on the Ethereum mainnet.

RATIONALE:
### Account returning the "alternative signature" When using an `aggregator` contract, the accounts delegate their ability to authenticate `UserOperations`. The entire contents of the In order to allow the validation function of the account to perform other checks, the `validateUserOpSignature` function generates a byte array that will replace the


=== ERC-1620 ===
TITLE: Money Streaming
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-24
REQUIRES: 

SUMMARY:
The following describes a standard whereby time is measured using block numbers and streams are mappings in a master contract. 1. A provider sets up a money streaming contract. 2. A prospective payer can interact with the contract and start the stream right away by depositing the funds required

SPECIFICATION:
### Structs The structure of a `stream` should be as follows: - `stream` - `sender`: the `address` of the entity funding the stream - `recipient`: the `address` where the money is being delivered to - `tokenAddress`: the `address` of the ERC20 token used as payment asset - `balance`: the

MOTIVATION:
This standardised interface aims to change the way we think about long-term financial commitments. Thanks to blockchains, payments need not be sent in chunks (e.g. monthly salaries), as there is much less overhead in paying-as-you-go. Money as a function of time would better align incentives in a host of

RATIONALE:
This specification was designed to serve as an entry point to the quirky concept of money as a function of time and it is definitely not set in stone. Several other designs, including payment channels and Plasma chains were also considered, but they were eventually deemed dense in assumptions


=== ERC-5380 ===
TITLE: ERC-721 Entitlement Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-03-11
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 0, 4, 6

SUMMARY:
This EIP proposes a new interface that allows [ERC-721](./eip-721.md) token owners to grant limited usage of those tokens to other addresses.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ### Base Compliant entitlement contracts MUST implement the following Solidity interface: ```solidity /// SPDX-License-Identifier: CC0-1.0 pragma solidity ^0.8.0; interface ERC5380Entitlement is

MOTIVATION:
There are many scenarios in which it makes sense for the owner of a token to grant certain properties to another address. One use case is renting tokens. If the token in question represents a trading card in an on-chain TCG (trading card game), one might want to be

RATIONALE:
[ERC-20](./eip-20.md) and [ERC-1155](./eip-1155.md) are unsupported as partial ownership is much more complex to track than boolean ownership.


=== ERC-1812 ===
TITLE: Ethereum Verifiable Claims
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-03-03
REQUIRES: 712

SUMMARY:
A new method for Off-Chain Verifiable Claims built on [EIP-712](./eip-712.md). These Claims can be issued by any user with a EIP 712 compatible web3 provider. Claims can be stored off chain and verified on-chain by Solidity Smart Contracts, State Channel Implementations or off-chain libraries.

SPECIFICATION:
### Claims Claims can be generalized like this: > Issuer makes the claim that Subject is something or has some attribute and value. Claims should be deterministic, in that the same claim signed multiple times by the same signer. ### Claims data structure Each claim should be typed based

MOTIVATION:
Reusable Off-Chain Verifiable Claims provide an important piece of integrating smart contracts with real world organizational requirements such as meeting regulatory requirements such as KYC, GDPR, Accredited Investor rules etc. [ERC-735](https://github.com/ethereum/EIPs/issues/735) and [ERC-780](https://github.com/ethereum/EIPs/issues/780) provide methods of making claims that live on chain. This is useful for some particular use

RATIONALE:
Signed Typed Data provides a strong foundation for Verifiable Claims that can be used in many different kinds of applications built on both Layer 1 and Layer 2 of Ethereum. ### Rationale for using not using a single EIP 712 Domain EIP712 supports complex types and domains in itself,


=== ERC-5719 ===
TITLE: Signature replacement interface
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-09-26
REQUIRES: 1271

SUMMARY:
Smart contract wallet signed messages can become stale, meaning a signature that once was valid could become invalid at any point. Signatures MAY become stale for reasons like: * The internal set of signers changed * The wallet makes signatures expirable * The contract was updated to a new

SPECIFICATION:
The wallet contract MUST implement the following function: ```solidity function getAlternativeSignature(bytes32 _digest) external view returns (string); ``` The returned string MUST be a URI pointing to a JSON object with the following schema: ```json { "title": "Signature alternative", "type": "object", "properties": { "blockHash": { "type": "string", "description": "A block.hash

MOTIVATION:
In contrast to EOA signatures, [EIP-1271](./eip-1271.md) signatures are not necessarily idempotent; they can become invalid at any point in time. This poses a challenge to protocols that rely on signatures remaining valid for extended periods of time. A signature MAY need to be mutated due to one of the

RATIONALE:
A URI is chosen because it can accommodate centralized and decentralized solutions. For example, a server can implement live re-encoding for Merkle proofs, or an IPFS link could point to a directory with all the pre-computed signature mutations. The `getAlternativeSignature` method points to an off-chain source because it's expected


=== ERC-1062 ===
TITLE: Formalize IPFS hash into ENS(Ethereum Name Service) resolver
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-02
REQUIRES: 

SUMMARY:
The following standard details the implementation of how to combine the IPFS cryptographic hash unique fingerprint with ENS public resolver. This standard provides a functionality to get and set IPFS online resources to ENS resolver. We think that this implementation is not only aim to let more developers and

SPECIFICATION:
The condition now is that the IPFS file fingerprint using base58 and in the meantime, the Ethereum uses hex in API to encode the binary data. So that need a way to process the condition requires not only we need to transfer from IPFS to Ethereum, but also need

MOTIVATION:
To build a fully decentralized web service, it’s necessary to have a decentralized file storage system. Here comes the IPFS, for three following advantages : - Address large amounts of data, and has unique cryptographic hash for every record. - Since IPFS is also based on peer to peer

RATIONALE:
To implement the specification, need two methods from ENS public resolver contract, when we want to store IPFS file fingerprint to contract, convert the Base58 string identifier to the hex format and invoke the `setMultihash` method below : ```solidity function setMultihash(bytes32 node, bytes hash) public only_owner(node); ``` Whenever users


=== ERC-6551 ===
TITLE: Non-fungible Token Bound Accounts
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-02-23
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 6, 7, ,,  , 1, 2, 7, 1

SUMMARY:
This proposal defines a system which assigns Ethereum accounts to all non-fungible tokens. These token bound accounts allow NFTs to own assets and interact with applications, without requiring changes to existing smart contracts or infrastructure.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Overview The system outlined in this proposal has two main components: - A singleton

MOTIVATION:
The [ERC-721](./eip-721.md) standard enabled an explosion of non-fungible token applications. Some notable use cases have included breedable cats, generative artwork, and exchange liquidity positions. However, NFTs cannot act as agents or associate with other on-chain assets. This limitation makes it difficult to represent many real-world non-fungible assets as NFTs.

RATIONALE:
### Singleton Registry This proposal specifies a single, canonical registry that can be permissionlessly deployed to any chain at a known address. It purposefully does not specify a common interface that can be implemented by multiple registry contracts. This approach enables several critical properties. #### Counterfactual Accounts All token


=== ERC-3450 ===
TITLE: Standardized Shamir Secret Sharing Scheme for BIP-39 Mnemonics
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-03-29
REQUIRES: 

SUMMARY:
A standardized approach to splitting a BIP-39 mnemonic into _N_ BIP-39 mnemonics, called shares, so that _T_ shares are required to recover the original mnemonic and no information about the original mnemonic, other than its size, is leaked with less than _T_ shares.

SPECIFICATION:
### Shamir's Secret Sharing Scheme Shamir's Secret Sharing Scheme is a cryptographic method to split a secret into _N_ unique parts, where any _T_ of them are required to reconstruct the secret. First, a polynomial _f_ of degree _T_ − 1 is constructed. Then, each share is a point

MOTIVATION:
We'd like to make it easier for less-technical users to store keys securely. Currently, many users use BIP-39 mnemonics to store entropy values underlying their keys. These mnemonics are a single point of failure. If lost, the user may never regain access to the assets locked by the keys.

RATIONALE:
### Choice of Field The field GF(256) was chosen, because the field arithmetic is easy to implement in any programming language and many implementations are already available since it is used in the AES cipher. Although using GF(256) requires that we convert the mnemonic to its underlying entropy as


=== ERC-1191 ===
TITLE: Add chain id to mixed-case checksum address encoding
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2018-03-18
REQUIRES: 5, 5, ,,  , 1, 5, 5

SUMMARY:
The [EIP-55](./eip-55.md) was created to prevent users from losing funds by sending them to invalid addresses. This EIP extends [EIP-55](./eip-55.md) to protect users from losing funds by sending them to addresses that are valid but that where obtained from a client of another network.For example, if this EIP is

SPECIFICATION:
Convert the address using the same algorithm defined by [EIP-55](./eip-55.md) but if a registered chain id is provided, add it to the input of the hash function. If the chain id passed to the function belongs to a network that opted for using this checksum variant, prefix the address

MOTIVATION:
The motivation of this proposal is to provide a mechanism to allow software to distinguish addresses from different Ethereum based networks. This proposal is necessary because Ethereum addresses are hashes of public keys and do not include any metadata. By extending the [EIP-55](./eip-55.md) checksum algorithm it is possible to

RATIONALE:
Benefits: - By means of a minimal code change on existing libraries, users are protected from losing funds by mixing addresses of different Ethereum based networks.


=== ERC-2193 ===
TITLE: dType Alias Extension - Decentralized Type System
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-07-16
REQUIRES: 1, 5, 5, ,,  , 1, 9, 0, 0, ,,  , 2, 1, 5, 7

SUMMARY:
The dType Alias is a system for providing human-readable resource identifiers to on-chain content. A resource identifier is based on the type of data (identifier provided by dType, [EIP-1900](./eip-1900.md)) and the data content (identifier provided by a dType Storage Contract, [EIP-2157](./eip-2157.md)). It is a universal way of addressing content,

SPECIFICATION:
The dType registry will provide domain and subdomain names for the resource type. Subdomains can be attributed recursively, to dType types which contain other complex types in their composition. We define an `Alias` registry contract, that keeps track of the human-readable identifiers for data resources, which exist in dType

MOTIVATION:
There are standards that currently address the need for attaching human-readable identifiers to Ethereum accounts, such as [EIP-137](./eip-137.md). These standards are an attempt to bring domain names to Ethereum, following the same format as DNS: `subdomain.domain.tld`. This leaf -> root format is unintuitive and contradicts the semantic meaning that

RATIONALE:
Current attempts to solve content addressability, such as [EIP-137](./eip-137.md), only target Ethereum accounts. These are based on inherited concepts from HTTP and DNS, which are not machine friendly. With [EIP-1900](./eip-1900.md) and [EIP-2157](./eip-2157.md), general content addressability can be achieved. dType provides type information and a reference to the smart contract


=== ERC-7007 ===
TITLE: Verifiable AI-Generated Content Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-05-10
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The verifiable AI-generated content (AIGC) non-fungible token (NFT) standard is an extension of the [ERC-721](./eip-721.md) token standard for AIGC. It proposes a set of interfaces for basic interactions and enumerable interactions for AIGC-NFTs. The standard includes an `addAigcData` and `verify` function interface, a new `AigcData` event, optional `Enumerable` and

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. **Every compliant contract must implement the `IERC7007`, [`ERC721`](./eip-721.md), and [`ERC165`](./eip-165.md) interfaces.** The verifiable AIGC-NFT standard includes

MOTIVATION:
The verifiable AIGC-NFT standard aims to extend the existing [ERC-721](./eip-721.md) token standard to accommodate the unique requirements of AI-generated content NFTs representing models in a collection. This standard provides interfaces to use zkML or opML to verify whether or not the AIGC data for an NFT is generated from

RATIONALE:
### Unique Token Identification This specification sets the `tokenId` to be the hash of its corresponding `prompt`, creating a deterministic and collision-resistant way to associate tokens with their unique content generation parameters. This design decision ensures that the same prompt (which corresponds to the same AI-generated content under the


=== ERC-7561 ===
TITLE: Simple NFT, Simplified ERC-721
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-10-29
REQUIRES: 721

SUMMARY:
This ERC is a new NFT asset designed based on the user contract wallet (including account abstraction), and is forward compatible with [ERC-721](./eip-721.md). To keep NFT assets simple, this ERC removes the `approve`, `setApprovalForAll`, `getApproved`, `isApprovedForAll` and `safeTransferFrom` functions of ERC-721.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Compliant contracts MUST implement the following interface: ```solidity pragma solidity ^0.8.20; /** * @title ERC7561

MOTIVATION:
[ERC-721](./eip-721.md) defines Ethereum-based standard NFT that can be traded and transferred, but the essence of ERC-721 is based on the externally-owned account (EOA) wallet design. An EOA wallet has no state and code storage, and the smart contract wallet is different. Almost all ERCs related to NFTs are add

RATIONALE:
The proposal is to simplify NFT standards by removing `approve`, `setApprovalForAll`, `getApproved`, `isApprovedForAll` and `safeTransferFrom` functions. This simplification aims to enhance security, reduce complexity, and improve efficiency, making the standard more suitable for smart contract wallet environments while maintaining essential functionalities.


=== ERC-6506 ===
TITLE: P2P Escrowed Governance Incentives
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2023-02-15
REQUIRES: 

SUMMARY:
The following EIP defines the interface for a contract that facilitates the exchange of a governance-incentive for users to vote in a designated direction on a DAO-proposal while escrowing funds until the vote can be verified.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The key words "BRIBE" and "INCENTIVE" are to be interpreted as the transfer of a

MOTIVATION:
While a ton of effort has gone into building bribe systems for DAOs like Curve, Frax, Convex, etc., not a lot of focus has been put on how bribes on other, more general DAO votes, may affect outcomes. Bribes are a lucrative market on many popular DAO’s, and it

RATIONALE:
This design was motivated by a few factors: 1. The issue of offering incentives for votes is an inevitability. There is no mechanism that can prevent users from colluding off-chain to vote a certain direction, and with enough obfuscation, can be completely hidden from the community's view. The solution


=== ERC-7144 ===
TITLE: ERC-20 with transaction validation step.
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-05-07
REQUIRES: 20

SUMMARY:
This standard is an extension of [ERC-20](./eip-20.md). It defines new validation functionality to avoid wallet draining: every `transfer` or `approve` will be locked waiting for validation.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. [ERC-20](./eip-20.md) compliant contracts MAY implement this EIP. All the operations that change the ownership of Tokens, like a `transfer`/`transferFrom`, SHALL create

MOTIVATION:
The power of the blockchain is at the same time its weakness: giving the user full responsibility for their data. Many cases of Token theft currently exist, and current Token anti-theft schemes, such as transferring Tokens to cold wallets, make Tokens inconvenient to use. Having a validation step before

RATIONALE:
### Universality The standard only defines the validation functions, but not how they should be used. It defines the validations as internal and lets the user decide how to manage them. An example could be to have an address validator connected to a dApp so that users could manage


=== ERC-6492 ===
TITLE: Signature Validation for Predeploy Contracts
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-02-10
REQUIRES: 1271

SUMMARY:
Contracts can sign verifiable messages via [ERC-1271](./eip-1271.md). However, if the contract is not deployed yet, [ERC-1271](./eip-1271.md) verification is impossible, as you can't call the `isValidSignature` function on said contract. We propose a standard way for any contract or off-chain actor to verify whether a signature on behalf of a

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. The words "validation" and "verification" are used interchangeably. Quoting [ERC-1271](./eip-1271.md), > `isValidSignature` can call arbitrary methods to validate a given

MOTIVATION:
With the rising popularity of account abstraction, we often find that the best user experience for contract wallets is to defer contract deployment until the first user transaction, therefore not burdening the user with an additional deploy step before they can use their account. However, at the same time,

RATIONALE:
We believe that wrapping the signature in a way that allows to pass the deploy data is the only clean way to implement this, as it's completely contract agnostic, but also easy to verify. The wrapper format ends in `magicBytes`, which ends with a `0x92`, which makes it is


=== ERC-1450 ===
TITLE: ERC-1450 A compatible security token for issuing and trading SEC-compliant securities
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-25
REQUIRES: 

SUMMARY:
`ERC-1450` facilitates the recording of ownership and transfer of securities sold in compliance with the [Securities Act Regulations CF, D and A](https://www.sec.gov/smallbusiness/exemptofferings). The issuance and trading of securities is subject to the Securities Exchange Commission (SEC) and specific U.S. state blue sky laws and regulations. `ERC-1450` manages securities ownership

SPECIFICATION:
`ERC-1450` extends `ERC-20`. ### `ERC-1450` `ERC-1450` requires that only the Issuer can create a token representing the security that only the RTA manages. Instantiating the `ERC-1450` requires the `Owned` and `IssuerControlled` modifiers, and only the Issuer should execute the `ERC-1450` constructor for a compliant token. `ERC-1450` extends the general

MOTIVATION:
With the advent of the [JOBS Act](https://www.sec.gov/spotlight/jobs-act.shtml) in 2012 and the launch of Regulation Crowdfunding and the amendments to Regulation A and Regulation D in 2016, there has been an expansion in the exemptions available to Issuers and Investors to sell and purchase securities that have not been "registered"

RATIONALE:
The are currently no token standards that facilitate compliance with SEC regulations. The closest token is [ERC-884 (Delaware General Corporations Law (DGCL) compatible share token)](./eip-884.md) which states that SEC requirements are out of scope. [EIP-1404 (Simple Restricted Token Standard)](https://github.com/ethereum/EIPs/issues/1404) does not go far enough to address SEC requirements around


=== ERC-7590 ===
TITLE: ERC-20 Holder Extension for NFTs
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-01-05
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal suggests an extension to [ERC-721](./eip-721.md) to enable easy exchange of [ERC-20](./eip-20.md) tokens. By enhancing [ERC-721](./eip-721.md), it allows unique tokens to manage and trade [ERC-20](./eip-20.md) fungible tokens bundled in a single NFT. This is achieved by including methods to pull [ERC-20](./eip-20.md) tokens into the NFT contract to a

SPECIFICATION:
```solidity interface IERC7590 /*is IERC165, IERC721*/ { /** * @notice Used to notify listeners that the token received ERC-20 tokens. * @param erc20Contract The address of the ERC-20 smart contract * @param toTokenId The ID of the token receiving the ERC-20 tokens * @param from The address of the

MOTIVATION:
In the ever-evolving landscape of blockchain technology and decentralized ecosystems, interoperability between diverse token standards has become a paramount concern. By enhancing [ERC-721](./eip-721.md) functionality, this proposal empowers non-fungible tokens (NFTs) to engage in complex transactions, facilitating the exchange of fungible tokens, unique assets, and multi-class assets within a single

RATIONALE:
### Pull Mechanism We propose using a pull mechanism, where the contract transfers the token to itself, instead of receiving it via "safe transfer" for 2 reasons: 1. Customizability with Hooks. By initiating the process this way, smart contract developers have the flexibility to execute specific actions before and


=== ERC-5007 ===
TITLE: Time NFT, ERC-721 Time Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-04-13
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It proposes some additional functions (`startTime`, `endTime`) to help with on-chain time management.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. ```solidity /** * @dev the ERC-165 identifier for this interface is 0xf140be0d. */ interface IERC5007 /* is IERC721 */ { /**

MOTIVATION:
Some NFTs have a defined usage period and cannot be used outside of that period. With traditional NFTs that do not include time information, if you want to mark a token as invalid or enable it at a specific time, you need to actively submit a transaction—a process both

RATIONALE:
### Time Data Type The max value of `uint64` is 18,446,744,073,709,551,615. As a timestamp, 18,446,744,073,709,551,615 is about year 584,942,419,325. `uint256` is too big for C, C++, Java, Go, etc, and `uint64` is natively supported by mainstream programming languages.


=== ERC-137 ===
TITLE: Ethereum Domain Name Service - Specification
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2016-04-04
REQUIRES: 


=== ERC-6105 ===
TITLE: No Intermediary NFT Trading Protocol
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-12-02
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 2, 9, 8, 1

SUMMARY:
This ERC adds a marketplace functionality to [ERC-721](./eip-721.md) to enable non-fungible token trading without relying on an intermediary trading platform. At the same time, creators may implement more diverse royalty schemes.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. Compliant contracts MUST implement the following interface: ```solidity interface IERC6105 { /// @notice Emitted when

MOTIVATION:
Most current NFT trading relies on an NFT trading platform acting as an intermediary, which has the following problems: 1. Security concerns arise from authorization via the `setApprovalForAll` function. The permissions granted to NFT trading platforms expose unnecessary risks. Should a problem occur with the trading platform contract, it

RATIONALE:
### Considerations for some local variables The `salePrice` in the `listItem` function cannot be set to zero. Firstly, it is a rare occurrence for a caller to set the price to 0, and when it happens, it is often due to an operational error which can result in loss


=== ERC-2980 ===
TITLE: Swiss Compliant Asset Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-09-08
REQUIRES: 20

SUMMARY:
This new standard is an [ERC-20](./eip-20.md) compatible token with restrictions that comply with the following Swiss laws: the [Stock Exchange Act](../assets/eip-2980/Swiss-Confederation-SESTA.pdf), the [Banking Act](../assets/eip-2980/Swiss-Confederation-BA.pdf), the [Financial Market Infrastructure Act](../assets/eip-2980/Swiss-Confederation-FMIA.pdf), the [Act on Collective Investment Schemes](../assets/eip-2980/Swiss-Confederation-CISA.pdf) and the [Anti-Money Laundering Act](../assets/eip-2980/Swiss-Confederation-AMLA.pdf). The [Financial Services Act](../assets/eip-2980/Swiss-Confederation-FINSA.pdf) and the [Financial Institutions Act](../assets/eip-2980/Swiss-Confederation-FINIA.pdf)

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. The words "asset tokens" and "security tokens" can be considered synonymous. Every ERC-2980 compliant contract MUST implement the ERC-2980 interface.

MOTIVATION:
In its ICO guidance dated February 16, 2018, FINMA (Swiss Financial Market Supervisory Authority) defines asset tokens as tokens representing assets and/or relative rights ([FINMA ICO Guidelines](../assets/eip-2980/Finma-ICO-Guidelines.pdf)). It explicitly mentions that asset tokens are analogous to and can economically represent shares, bonds, or derivatives. The long list of relevant

RATIONALE:
There are currently no token standards that expressly facilitate conformity to securities law and related regulations. EIP-1404 (Simple Restricted Token Standard) it’s not enough to address FINMA requirements around re-issuing securities to Investors. In Swiss law, an issuer must eventually enforce the restrictions of their token transfer with a


=== ERC-2876 ===
TITLE: Deposit contract and address standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-08-13
REQUIRES: 

SUMMARY:
An ERC-2876 compatible **deposit system** can accept ETH payments from multiple depositors without the need for managing multiple keys or requiring use of a hot wallet. An ERC-2876 compatible **wallet application** can send ETH to ERC-2876 compatible **deposit systems** in a way that the **deposit system** can differentiate their

SPECIFICATION:
### Definitions - The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119. - `The contract interface` is the contract component of this ERC. - `The deposit address format` is

MOTIVATION:
Centralized exchanges and merchants (Below: "apps") require an address format for accepting deposits. Currently the address format used refers to an account (external or contract), but this creates a problem. It requires that apps create a new account for every invoice / user. If the account is external, that

RATIONALE:
The contract interface and address format combination has one notable drawback, which was brought up in discussion. This ERC can only handle deposits for native value (ETH) and not other protocols such as ERC-20. However, this is not considered a problem, because it is best practice to logically AND


=== ERC-7721 ===
TITLE: Lockable Extension for ERC-1155
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-05-25
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
The Lockable Extension for [ERC-1155](./eip-1155.md) introduces a robust locking mechanism for specific Non-Fungible Tokens (NFTs) within the ERC-1155 token standard, allowing for various uses while preventing sale or transfer. The token's `owner` can `lock` it, setting up locker address (either an EOA or a contract) that exclusively holds the

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Overview [ERC-1155](./eip-1155.md) compliant contracts MAY implement this EIP to provide standard methods of locking

MOTIVATION:
[ERC-1155](./eip-1155.md) has sparked an unprecedented surge in demand for NFTs. However, despite this tremendous success, the NFT economy suffers from secondary liquidity where it remains illiquid in owner’s wallet. There are projects which aim to address the liquidity challenge, but they entail the below mentioned inconveniences and risks for

RATIONALE:
This proposal exposes `transferAndLock(address from, address to, uint256 tokenId, uint256 amount, bool setApprove)` which can be used to transfer token and lock at the receiver's address. This additionally accepts input `bool setApprove` which on `true` assign `approval` to `locker`, hence enabling `locker` to revoke the token (revocation conditions can


=== ERC-7508 ===
TITLE: Dynamic On-Chain Token Attributes Repository
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-08-15
REQUIRES: 165

SUMMARY:
The Public On-Chain Non-Fungible Token Attributes Repository standard provides the ability for [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) compatible tokens to store their attributes on-chain available to any external smart contract interacting with them. This proposal introduces the ability to assign attributes to NFTs in a public non-gated repository smart contract that

SPECIFICATION:
### Interface The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. ```solidity /// @title ERC-7508 Public On-Chain NFT Attributes Repository /// @dev See https://eips.ethereum.org/EIPS/eip-7508 /// @dev Note: the ERC-165

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time to standardize additional utility for them. Having the ability to store token's attributes on chain allows for greater utility of tokens as it fosters cross-collection

RATIONALE:
Designing the proposal, we considered the following questions: 1. **Should we refer to the values stored by the repository as propertiers or attributes?**\ Historically values defining characteristics of tokens have been called properties, but have evolved in to being called attributes. Referring to the dictionary, the property is defined


=== ERC-820 ===
TITLE: Pseudo-introspection Registry Contract
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-01-05
REQUIRES: 1, 6, 5, ,,  , 2, 1, 4

SUMMARY:
This standard defines a registry where smart contracts and regular accounts can publish which functionalities they implement---either directly or through a proxy contract. Anyone can query this registry to ask if a specific address implements a given interface and which smart contract handles its implementation. This registry MAY be

SPECIFICATION:
### [ERC-820] Registry Smart Contract > This is an exact copy of the code of the [ERC820 registry smart contract]. ``` solidity /* ERC820 Pseudo-introspection Registry Contract * This standard defines a universal registry smart contract where any address * (contract or regular account) can register which interface it

MOTIVATION:
There have been different approaches to define pseudo-introspection in Ethereum. The first is [ERC-165] which has the limitation that it cannot be used by regular accounts. The second attempt is [ERC-672] which uses reverse [ENS]. Using reverse [ENS] has two issues. First, it is unnecessarily complicated, and second, [ENS]

RATIONALE:
This standards offers a way for any type of address (externally owned and contracts) to implement an interface and potentially delegate the implementation of the interface to a proxy contract. This delegation to a proxy contract is necessary for externally owned accounts and useful to avoid redeploying existing contracts


=== ERC-918 ===
TITLE: Mineable Token Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-03-07
REQUIRES: 

SUMMARY:
This specification describes a method for initially locking tokens within a token contract and slowly dispensing them with a mint() function which acts like a faucet. This mint() function uses a Proof of Work algorithm in order to minimize gas fees and control the distribution rate. Additionally, standardization of

SPECIFICATION:
#### Interface The general behavioral specification includes a primary function that defines the token minting operation, an optional merged minting operation for issuing multiple tokens, getters for challenge number, mining difficulty, mining target and current reward, and finally a Mint event, to be emitted upon successful solution validation and

MOTIVATION:
Token distribution via the ICO model and its derivatives is susceptible to illicit behavior by human actors. Furthermore, new token projects are centralized because a single entity must handle and control all of the initial coins and all of the raised ICO money. By distributing tokens via an 'Initial

RATIONALE:
The solidity keccak256 algorithm does not have to be used, but it is recommended since it is a cost effective one-way algorithm to perform in the EVM and simple to perform in solidity. The nonce is the solution that miners try to find and so it is part of


=== ERC-7254 ===
TITLE: Token Revenue Sharing
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-29
REQUIRES: 

SUMMARY:
With the aspiration of bringing forth unique functionality and enhancing value for holders of [ERC-20](./eip-20.md) tokens, our project aims to effortlessly reward token holders without necessitating users to lock, stake, or farm their tokens. Whenever the project generates profits, these profits can be distributed to the token holders. Revenue

SPECIFICATION:
### Methods #### maxTokenReward Returns max token reward. ``` js function maxTokenReward() public view returns (uint256) ``` #### informationOf Returns the account information of another account with the address `token` and `account`, including: inReward, outReward and withdraw. ``` js function informationOf(address token, address account) public view returns (UserInformation memory)

RATIONALE:
TBD


=== ERC-6047 ===
TITLE: ERC-721 Balance indexing via Transfer event
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-11-26
REQUIRES: 721

SUMMARY:
This EIP extends [ERC-721](./eip-721.md) to allow the tracking and indexing of NFTs by mandating that a pre-existing event be emitted during contract creation. ERC-721 requires a `Transfer` event to be emitted whenever a transfer or mint (i.e. transfer from `0x0`) or burn (i.g. transfer to `0x0`) occurs, **except during

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. 1. Compliant contracts MUST implement [ERC-721](./eip-721.md) 2. Compliant contracts MUST emit a `Transfer` event whenever

MOTIVATION:
[ERC-721](./eip-721.md) requires a `Transfer` event to be emitted whenever a transfer or mint (i.e. transfer from `0x0`) or burn (i.e. transfer to `0x0`) occurs, EXCEPT for during contract creation. Due to this exception, contracts can mint NFTs during contract creation without the event being emitted. Unlike ERC-721, the [ERC-1155](./eip-1155.md)

RATIONALE:
Using the existing `Transfer` event instead of creating a new event (e.g. `Creation`) allows this EIP to be backward compatible with existing indexers.E


=== ERC-7201 ===
TITLE: Namespaced Storage Layout
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-06-20
REQUIRES: 

SUMMARY:
We define the NatSpec annotation `@custom:storage-location` to document storage namespaces and their location in storage in Solidity or Vyper source code. Additionally, we define a formula to derive a location from an arbitrary identifier. The formula is chosen to be safe against collisions with the storage layouts used by

SPECIFICATION:
### Preliminaries A _namespace_ consists of a set of ordered variables, some of which may be dynamic arrays or mappings, with its values laid out following the same rules as the default storage layout but rooted in some location that is not necessarily slot 0. A contract using namespaces

MOTIVATION:
Smart contract languages such as Solidity and Vyper rely on tree-shaped storage layout. This tree starts at slot 0 and is composed of sequential chunks for consecutive variables. Hashes are used to ensure the chunks containing values of mappings and dynamic arrays do not collide. This is sufficient for

RATIONALE:
The tree-shaped storage layout used by Solidity and Vyper follows the following grammar (with root=0): $L_{root} := \mathit{root} \mid L_{root} + n \mid \texttt{keccak256}(L_{root}) \mid \texttt{keccak256}(H(k) \oplus L_{root}) \mid \texttt{keccak256}(L_{root} \oplus H(k))$ A requirement for the root is that it shouldn't overlap with any storage location that would be


=== ERC-6982 ===
TITLE: Efficient Default Lockable Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-05-02
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal introduces a lockable interface for [ERC-721](./eip-721.md) tokens that optimizes gas usage by eliminating unnecessary events. This interface forms the foundation for the creation and management of lockable [ERC-721](./eip-721.md) tokens. It provides a gas-efficient approach by emitting a `DefaultLocked(bool locked)` event upon deployment, setting the initial lock status

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The interface is defined as follows: ```solidity // ERC165 interfaceId 0x6b61a747 interface IERC6982 { /**

MOTIVATION:
Existing lockable token proposals often mandate the emission of an event each time a token is minted. This results in unnecessary gas consumption, especially in cases where tokens are permanently locked from inception to destruction (e.g., soulbounds or non-transferable badges). This proposal offers a more gas-efficient solution that only

RATIONALE:
This standard seeks to optimize gas consumption by minimizing the frequency of event emission. The `DefaultLocked` event is designed to establish the lock status for all tokens, thereby circumventing the need to emit an event each time a new token is minted. It's crucial to note that the `DefaultLocked`


=== ERC-7744 ===
TITLE: Code Index
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-07-16
REQUIRES: 

SUMMARY:
This EIP defines a standard interface for indexing smart contracts on Ethereum by their bytecode hash. This enables trustless discovery and verification of contract code, facilitating use cases like bytecode signing, whitelisting, and decentralized distribution mechanisms.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity 0.8.28; interface IERC7744 { event Indexed(address indexed container, bytes32

MOTIVATION:
Existing contract discovery relies on addresses, which are non-deterministic and can be obfuscated through proxies. Indexing by bytecode hash provides a deterministic and tamper-proof way to identify and verify contract code, enhancing security and trust in the Ethereum ecosystem. Consider a security auditor who wants to attest to the

RATIONALE:
**Bytecode over Addresses**: Bytecode is deterministic and can be verified on-chain, while addresses are opaque and mutable. **Reverting on re-indexing**: There is small, yet non-zero probability of hash collision attack. Disallowing updates to indexed location of bytecode coupes with this. **Simple Interface**: The interface is minimal and focused to


=== ERC-7444 ===
TITLE: Time Locks Maturity
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-05
REQUIRES: 165

SUMMARY:
This EIP defines a standardized method to communicate the date on which a time-locked system will become unlocked. This allows for the determination of maturities for a wide variety of asset classes and increases the ease with which these assets may be valued.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. **Every [ERC-7444](./eip-7444.md) compliant contract must implement [ERC-165](./eip-165.md) interface detection** ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity

MOTIVATION:
Time-locks are ubiquitous, yet no standard on how to determine the date upon which they unlock exists. Time-locked assets experience theta-decay, where the time remaining until they become unlocked dictates their value. Providing a universal standard to view what date they mature on allows for improved on-chain valuations of

RATIONALE:
### Universal Maturities on Locked Assets Locked Assets have become increasingly popular and used in different parts of defi, such as yield farming and vested escrow concept. This has increased the need to formalize and define an universal interface for all these timelocked assets. ### Valuation of Locked Assets


=== ERC-7538 ===
TITLE: Multiplicative Tokens
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-10-18
REQUIRES: 2, 0, ,,  , 1, 0, 4, 6, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP extends [ERC-1046](./eip-1046.md)-compatible token types (notably, [ERC-20](./eip-20.md) and [ERC-1155](./eip-1155.md) by introducing a `multiplier` field to the metadata schema, altering how user-facing balances are displayed.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. The `MultiplierMetadata` interface MUST be implemented in the resolved ERC-1046 `tokenURI` of tokens that use

MOTIVATION:
Many projects necessitate the creation of various types of tokens, both fungible and non-fungible. While certain standards are ideal for this purpose, they lack support for fractional tokens. Additionally, some tokens may require built-in inflation or deflation mechanisms, or may wish to allow transfers in unconventional increments, such as

RATIONALE:
Employing strings for numerical representation offers enhanced precision when needed. The use of a multiplier instead of decimals facilitates increments other than powers of 10, and ensures seamless handling of inflation or deflation. Utilizing ERC-1046 promotes gas efficiency in the majority of cases.


=== ERC-801 ===
TITLE: Canary Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2017-12-16
REQUIRES: 

SUMMARY:
The following standard allows the implementation of canaries within contracts. This standard provides basic functionality to check if a canary is alive, keeping the canary alive and optionally manage feeders.

SPECIFICATION:
### Methods #### isAlive() Returns if the canary was fed properly to signal e.g. that no warrant was received. ``` js function isAlive() constant returns (bool alive) ``` #### getBlockOfDeath() Returns the block the canary died. Throws if the canary is alive. ``` js function getBlockOfDeath() constant returns (uint256

MOTIVATION:
The canary can e.g. be used as a [warrant canary](https://en.wikipedia.org/wiki/Warrant_canary). A standard interface allows other applications to easily interface with canaries on Ethereum - e.g. for visualizing the state, automated alarms, applications to feed the canary or contracts (e.g. insurance) that use the state.


=== ERC-7204 ===
TITLE: Contract wallet management token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-21
REQUIRES: 165

SUMMARY:
This proposal introduces a smart contract wallet-based approach for managing tokens, focusing on utilizing the programmable features of smart contract wallets for asset management. Additionally, it introduces functions such as `tokenTransfer`, `tokenApprove`, `tokenApproveForAll`, `tokenIsApproveForAll` and `tokenAllowance`, which provide enhanced control over token transactions. This approach seeks to enhance token

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ** Compliant contract must implement the [ERC-165](./eip-165.md) interfaces** ```solidity /// @title ERC-7204 /// @dev See

MOTIVATION:
An externally-owned account (EOA) wallet has no state and code storage, while the smart contract wallet does. Account abstraction (AA) is a direction of the smart contract wallet, which works around abstract accounts. This ERC can also be an extension based on [ERC-4337](./eip-4337.md) or as a plug-in for wallets.

RATIONALE:
the key technical decisions in this proposal are: **Improved Approve Mechanism** - **Current vs. Proposed**: In the existing ERC-20 system, an externally-owned account (EOA) directly interacts with token contracts to `approve`. The new `tokenApprove` and `tokenApproveForAll` functions in this proposed enable more precise control over token usage within a


=== ERC-7586 ===
TITLE: Interest Rate Swaps
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-12-31
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
This proposal introduces a standardized framework for on-chain interest rate swaps. The proposed standard aims to facilitate the seamless exchange of fixed and floating interest rate cash flows between parties, providing a foundation for decentralized finance (DeFi) applications.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. ### Example Flow ![alt text](../assets/eip-7586/irs.jpeg "IRS diagram") Every contract compliant with this ERC MUST implement

MOTIVATION:
Interest Rate Swapping (IRS) denotes a derivative contract wherein two parties mutually consent to exchange a series of forthcoming interest payments based on a specified notional amount. This financial instrument serves as a strategic tool for hedging against interest rate fluctuations. The mechanism entails the utilization of a benchmark

RATIONALE:
This standard allows parties involved in the IRS contract to define essential parameters such as notional amount, interest rates, payment frequency, and payment dates. This flexibility accommodates a diverse range of financial agreements, catering to the unique needs of different participants. To accommodate a wide array of use cases,


=== ERC-823 ===
TITLE: Token Exchange Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-01-06
REQUIRES: 20

SUMMARY:
The following standard provides functionally to make payments in the form of any other registered tokens, as well as allow token contracts to store any other tokens in an existing token contract. This standard allows ERC20 token holders to exchange their token with another ERC20 token and use the

SPECIFICATION:
### Sender Interface This interface must be inherited by a ERC20 token contract that wants to exchange its tokens with another token. #### Storage Variables ##### exchnagedWith This mapping stores the number of tokens exchanged with another token, along with the latter’s address. Every time more tokens are exchanged

MOTIVATION:
Existing token standards do not provide functionality to exchange tokens. Existing token converters reduce the total supply of an existing token, which in the sense destroys the currency. Token converters do not solve this problem and hence discourages creation of new tokens. This solution does not destroy the existing

RATIONALE:
Such a design provides a consistent exchange standard applicable to all ERC20 tokens that follow it. The primary advantage for of this strategy is that the exchanged tokens will not be lost. They can either be spent or preserved. Token convert face a major drawback of destroying tokens after


=== ERC-5164 ===
TITLE: Cross-Chain Execution
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-06-14
REQUIRES: 

SUMMARY:
This specification defines a cross-chain execution interface for EVM-based blockchains. Implementations of this specification will allow contracts on one chain to call contracts on another by sending a cross-chain message. The specification defines two components: the "Message Dispatcher" and the "Message Executor". The Message Dispatcher lives on the calling

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. This specification allows contracts on one chain to send messages to contracts on another chain. There are two key interfaces

MOTIVATION:
Many Ethereum protocols need to coordinate state changes across multiple EVM-based blockchains. These chains often have native or third-party bridges that allow Ethereum contracts to execute code. However, bridges have different APIs so bridge integrations are custom. Each one affords different properties; with varying degrees of security, speed, and

RATIONALE:
The `MessageDispatcher` can be coupled to one or more `MessageExecutor`. It is up to bridges to decide how to couple the two. Users can easily bridge a message by calling `dispatchMessage` without being aware of the `MessageExecutor` address. Messages can also be traced by a client using the data


=== ERC-5633 ===
TITLE: Composable Soulbound NFT, EIP-1155 Extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-09-09
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This standard is an extension of [EIP-1155](./eip-1155.md). It proposes a smart contract interface that can represent any number of soulbound and non-soulbound NFT types. Soulbound is the property of a token that prevents it from being transferred between accounts. This standard allows for each token ID to have its

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. A token type with a `uint256 id` is soulbound if function `isSoulbound(uint256 id)` returning true. In this case, all EIP-1155

MOTIVATION:
The soulbound NFTs similar to World of Warcraft’s soulbound items are attracting more and more attention in the Ethereum community. In a real world game like World of Warcraft, there are thousands of items, and each item has its own soulbound property. For example, the amulate Necklace of Calisea

RATIONALE:
If all tokens in a contract are soulbound by default, `isSoulbound(uint256 id)` should return true by default during implementation.


=== ERC-7795 ===
TITLE: Wallet Call Token Capabilities
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-22
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 5, 7, 9, 2

SUMMARY:
This ERC extends [EIP-5792](./eip-5792.md) by defining capabilities that allow dApps to specify common token prerequisites for transactions, such as having certain [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), or [ERC-1155](./eip-1155.md) tokens. Wallets can then help users meet these requirements before executing the transactions.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 and RFC 8174. This ERC extends [EIP-5792](./eip-5792.md) by adding new capabilities that can be used with the `wallet_sendCalls`

MOTIVATION:
It is fairly common for dApps to reside only on one network, but this comes at the cost of shrinking the direct liquidity that these dApps can access. This happens because most users only have funds on a limited number of networks. As the number of networks grows, the

RATIONALE:
This ERC extends [EIP-5792](./eip-5792.md) rather than defining new RPC methods because: 1. **Consistency**: Leverages existing capability discovery mechanism 2. **Composability**: Requirements can be combined with other [EIP-5792](./eip-5792.md) capabilities 3. **Flexibility**: Wallets can implement only the requirements they support 4. **Extensibility**: New requirement types can be added as additional capabilities


=== ERC-3475 ===
TITLE: Abstract Storage Bonds
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2021-04-05
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
- This EIP allows the creation of tokenized obligations with abstract on-chain metadata storage. Issuing bonds with multiple redemption data cannot be achieved with existing token standards. - This EIP enables each bond class ID to represent a new configurable token type and corresponding to each class, corresponding bond

SPECIFICATION:
**Definition** Bank: an entity that issues, redeems, or burns bonds after getting the necessary amount of liquidity. Generally, a single entity with admin access to the pool. **Functions** ```solidity pragma solidity ^0.8.0; /** * transferFrom * @param _from argument is the address of the bond holder whose balance is

MOTIVATION:
Current LP (Liquidity Provider) tokens are simple [EIP-20](./eip-20.md) tokens with no complex data structure. To allow more complex reward and redemption logic to be stored on-chain, we need a new token standard that: - Supports multiple token IDs - Can store on-chain metadata - Doesn't require a fixed storage

RATIONALE:
### Metadata structure Instead of storing the details about the class and their issuances to the user (ie nonce) externally, we store the details in the respective structures. Classes represent the different bond types, and nonces represent the various period of issuances. Nonces under the same class share the


=== ERC-831 ===
TITLE: URI Format for Ethereum
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-01-15
REQUIRES: 6, 7, ,,  , 6, 8, 1

SUMMARY:
URIs embedded in QR-codes, hyperlinks in web-pages, emails or chat messages provide for robust cross-application signaling between very loosely coupled applications. A standardized URI format allows for instant invocation of the user's preferred wallet application.

SPECIFICATION:
### Syntax Ethereum URIs contain "ethereum" or "eth" in their schema (protocol) part and are constructed as follows: request = "eth" [ "ereum" ] ":" [ prefix "-" ] payload prefix = STRING payload = STRING ### Semantics `prefix` is optional and defines the use-case for this URI. If

RATIONALE:
The need for this ERC emerged when refining EIP-681. We need a container that does not carry the weight of the use-cases. EIP-67 was the first attempt on defining Ethereum-URIs. This ERC tries to keep backward compatibility and not break existing things. This means EIP-67 URIs should still be


=== ERC-7598 ===
TITLE: Use contract signature for signed transfer
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-01-15
REQUIRES: 1, 2, 7, 1, ,,  , 3, 0, 0, 9

SUMMARY:
This proposal aims to extend the functionality of the existing [ERC-3009](./eip-3009.md) standard, "Transfer With Authorization," to support transfer operations initiated by smart contract wallets.

SPECIFICATION:
The following events and interfaces must still be present given the initial spec defined in [ERC-3009](./eip-3009.md). - Event `AuthorizationUsed`. - Constants `TRANSFER_WITH_AUTHORIZATION_TYPEHASH` and `RECEIVE_WITH_AUTHORIZATION_TYPEHASH`. - View function interface `authorizationState(address authorizer, bytes32 nonce)` In addition, the following interfaces must be added to be compliant with the standard: ``` /** *

MOTIVATION:
The existing [ERC-3009](./eip-3009.md) standard enables asset transfers with ECDSA signatures. However, as smart contract wallets become more prevalent in the ecosystem, the current standard is no longer sufficient. This proposal aims to enhance the usability and composeability of the standard by extending ERC-3009 with smart contract wallet signature validation,

RATIONALE:
By replacing the existing V, R, S signature validation scheme and introducing support for unstructured bytes input, contract developers can use a unified interface to validate signature from both EOAs and SC wallets. This allows for the utilization of different signature schemes and algorithms fitting the wallet type, paving


=== ERC-725 ===
TITLE: General data key/value store and execution
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2017-10-02
REQUIRES: 1, 6, 5, ,,  , 1, 7, 3

SUMMARY:
The following describes two standards that allow for a generic data storage in a smart contract and a generic execution through a smart contract. These can be used separately or in conjunction and can serve as building blocks for smart contract accounts, upgradable metadata, and other means.

SPECIFICATION:
### Ownership This contract is controlled by a single owner. The owner can be a smart contract or an external account. This standard requires [ERC-173](./eip-173.md) and SHOULD implement the functions: - `owner() view` - `transferOwnership(address newOwner)` And the event: - `OwnershipTransferred(address indexed previousOwner, address indexed newOwner)` --- ### `ERC725X`

MOTIVATION:
The initial motivation came out of the need to create a smart contract account system that's flexible enough to be viable long-term but also defined enough to be standardized. They are a generic set of two standardized building blocks to be used in all forms of smart contracts. This

RATIONALE:
The generic way of storing data keys with values was chosen to allow upgradability over time. Stored data values can be changed over time. Other smart contract protocols can then interpret this data in new ways and react to interactions from a `ERC725` smart contract differently. The data stored
