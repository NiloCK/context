=== EIP-7266 ===
TITLE: Remove BLAKE2 compression precompile
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-07-03
REQUIRES: 

SUMMARY:
This EIP removes the [`blake2f`](./eip-152.md) (`0x09`) precompile by changing the precompile behaviour to result in an exceptional abort.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[EIP-152](./eip-152.md) has never capitalised on a real-world use case. This fact is clearly reflected in the number of times the address `0x09` has been

RATIONALE:
The EVM should be optimised for simplicity and future-proofness. The original Yellow Paper states: _these are so-called 'precompiled' contracts, meant as a preliminary piece


=== EIP-6051 ===
TITLE: Private Key Encapsulation
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2022-11-21
REQUIRES: 

SUMMARY:
This EIP proposes a mechanism to encapsulate a private key so that it could be securely relocated to another application without providing the seed.

SPECIFICATION:
### Sender and Recipient We hereby define: - *Sender* as the party who holds in custody the private key to be encapsulated; *Sender Application*

MOTIVATION:
There are various cases in which we might want to export one of many private keys from a much more secure but less convenient

RATIONALE:
A critical difference between this [EIP-6051](./eip-6051.md) with [EIP-5630](./eip-5630.md) is that, as the purpose of key encapsulation is to transport a private key securely, the


=== EIP-3779 ===
TITLE: Safer Control Flow for the EVM
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2021-08-30
REQUIRES: 

SUMMARY:
We define a safe EVM contract as one that cannot encounter an exceptional halting state. In general, we cannot prove safety for Turing-complete programs.

SPECIFICATION:
### Validity > In theory, theory and practice are the same. In practice, they're not. -- Albert Einstein We define a _safe_ EVM contract

MOTIVATION:
### Safety For our purposes we define a safe EVM contract as one that cannot encounter an exceptional halting state. From the standpoint of

RATIONALE:
Demanding *static* destinations for all jumps means that all jump destinations can be validated at initialization time, not runtime. Bounding the stack pointers catches


=== EIP-779 ===
TITLE: Hardfork Meta: DAO Fork
TYPE: Meta 
STATUS: Final
CREATED: 2017-11-26
REQUIRES: 606

SUMMARY:
This documents the changes included in the hard fork named "DAO Fork". Unlike other hard forks, the DAO Fork did not change the protocol;

SPECIFICATION:
- Codename: DAO Fork - Activation: - Block == 1,920,000 on Mainnet See references [1] and [2] for the original, full specification. It is


=== EIP-7716 ===
TITLE: Anti-correlation attestation penalties
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-05-25
REQUIRES: 

SUMMARY:
The decentralization of the validator set is one of the most important properties of Ethereum for credible neutrality and censorship resistance. By adjusting penalties

SPECIFICATION:
| Parameter | Value | | - | - | | `PENALTY_ADJUSTMENT_FACTOR` | `4096` | | `MAX_PENALTY_FACTOR` | `4` | Add a variable `NET_EXCESS_PENALTIES`

MOTIVATION:
As of now, during times of usual network operation, there are no economic incentives to diversify node operations through using multiple different nodes, geographical

RATIONALE:
### PENALTY_ADJUSTMENT_FACTOR This variable impacts the sensitivity of the `NET_EXCESS_PENALTIES`. Given stable participation, the `penalty_factor` is one. If participation decreases, the `penalty_factor` will temporarily


=== EIP-7825 ===
TITLE: Transaction Gas Limit Cap
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-11-23
REQUIRES: 

SUMMARY:
This proposal introduces a protocol-level cap on the maximum gas usage per transaction to 16,777,216 (2^24) gas. By implementing this limit, Ethereum can enhance

SPECIFICATION:
### Gas Cap - Enforce a protocol-level maximum of **16,777,216 gas (2^24)** for any single transaction. - This cap applies regardless of the block

MOTIVATION:
Currently, transactions can theoretically consume up to the entire block gas limit, which poses several risks: 1. **DoS Attacks**: A single transaction consuming most

RATIONALE:
### Why 16,777,216 (2^24)? The proposed cap of 16,777,216 gas (2^24) provides a clean power-of-two boundary that simplifies implementation while still being large enough


=== EIP-2015 ===
TITLE: wallet_updateEthereumChain RPC Method
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2019-05-12
REQUIRES: 155

SUMMARY:
This EIP adds a wallet-namespaced RPC endpoint, `wallet_updateEthereumChain`, providing a standard interface for switching chains. The method takes the minimal parameters of `chainId`, `chainName`,

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

RATIONALE:
The `wallet_updateEthereumChain` method is designed to be as simple as possible, while still providing the necessary information for a wallet to switch to a


=== EIP-1890 ===
TITLE: Commitment to Sustainable Ecosystem Funding
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2019-03-31
REQUIRES: 

SUMMARY:
A mechanism that allows specification of two parameters, a beneficiary address and a per-block reward denominated in wei, that allows a portion of block

SPECIFICATION:
Two new constants are introduced: BENEFICIARY_ADDRESS, an Address, and DEVFUND_BLOCK_REWARD, an amount denominated in wei. Both are set to zero. Beginning with block ISTANBUL_BLOCK_HEIGHT,

MOTIVATION:
In order for Ethereum to succeed, it needs talented, motivated researchers and developers to continue to develop and maintain the platform. Those talented researchers

RATIONALE:
We believe that the technical design of this EIP is straightforward. The social rationale is explained in [this article](https://medium.com/gitcoin/funding-open-source-in-the-blockchain-era-8ded753bf05f).


=== EIP-7675 ===
TITLE: Retroactively Included EIPs
TYPE: Meta 
STATUS: Withdrawn
CREATED: 2024-04-04
REQUIRES: 2, 6, 8, 1, ,,  , 3, 6, 0, 7, ,,  , 4, 8, 0, 3, ,,  , 7, 5, 2, 3, ,,  , 7, 6, 1, 0

SUMMARY:
This Meta EIP lists Core EIPs introducing changes to Ethereum's consensus which were activated independently of an Ethereum hard fork due to their backward

SPECIFICATION:
### Retroactively Activated EIPs * [EIP-2681](./eip-2681.md): Limit account nonce to 2^64-1 * [EIP-3607](./eip-3607.md): Reject transactions from senders with deployed code * [EIP-4803](./eip-4803.md): Limit transaction

MOTIVATION:
To maintain consensus across all nodes, backward incompatible changes to Ethereum must be activated synchronously. Given the coordination required for this, changes are usually

RATIONALE:
This Meta EIP provides a global view of all changes included in the Ethereum protocol without an explicit network upgrade, as well as links


=== EIP-2929 ===
TITLE: Gas cost increases for state access opcodes
TYPE: Standards Track Core
STATUS: Final
CREATED: 2020-09-01
REQUIRES: 

SUMMARY:
Increase the gas cost of `SLOAD` (`0x54`) to 2100, and the `*CALL` opcode family (`0xf1`, `f2`, `f4`, `fA`), `BALANCE` `0x31` and the `EXT*` opcode

SPECIFICATION:
### Parameters | Constant | Value | | - | - | | `FORK_BLOCK` | 12244000 | | `COLD_SLOAD_COST` | 2100 | | `COLD_ACCOUNT_ACCESS_COST`

MOTIVATION:
Generally, the main function of gas costs of opcodes is to be an estimate of the time needed to process that opcode, the goal

RATIONALE:
### Opcode costs vs charging per byte of witness data The natural alternative path to changing gas costs to reflect witness sizes is to


=== EIP-4573 ===
TITLE: Procedures for the EVM
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-12-16
REQUIRES: 2, 3, 1, 5, ,,  , 3, 5, 4, 0, ,,  , 3, 6, 7, 0, ,,  , 3, 7, 7, 9, ,,  , 4, 2, 0, 0

SUMMARY:
Five EVM instructions are introduced to define, call, and return from named EVM _procedures_ and access their _call frames_ in memory - `ENTERPROC`, `LEAVEPROC`,

SPECIFICATION:
### Instructions #### ENTERPROC (0x??) dest_section: uint8, dest_offset: uint8, n_inputs: uint16, n_outputs: uint16, n_locals: uint16 ``` frame_stack.push(FP) FP -= n_locals * 32 PC +-

MOTIVATION:
Currently, Ethereum bytecode has no syntactic structure, and _subroutines_ have no defined interfaces. We propose to add _procedures_ -- delimited blocks of code that

RATIONALE:
There is actually not much new here. It amounts to [EIP-615](./eip-615.md), refined and refactored into bite-sized pieces, along lines common to other machines. This


=== EIP-1227 ===
TITLE: Defuse Difficulty Bomb and Reset Block Reward
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-07-18
REQUIRES: 649

SUMMARY:
Starting with `FORK_BLKNUM` the client will calculate the difficulty without the additional exponential component. Furthermore, block rewards will be adjusted to a base of

SPECIFICATION:
#### Remove Exponential Component of Difficulty Adjustment For the purposes of `calc_difficulty`, simply remove the exponential difficulty adjustment component, `epsilon`, i.e. the `int(2**((block.number //

MOTIVATION:
Due to the "difficulty bomb" (also known as the "ice age"), introduced in EIP [#2](./eip-2.md), an artificial exponential increase in difficulty until chain freeze,

RATIONALE:
This will permanently, without further changes, disable the "ice age." It will also reset the block reward to pre-Byzantium levels. Both of these changes


=== EIP-1803 ===
TITLE: Rename opcodes for clarity
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2017-07-28
REQUIRES: 141

SUMMARY:
Rename the `BALANCE`, `SHA3`, `NUMBER`, `GASLIMIT`, `GAS` and `INVALID` opcodes to reflect their true meaning.

SPECIFICATION:
Rename the opcodes as follows: - `BALANCE` (`0x31`) to `EXTBALANCE` to be in line with `EXTCODESIZE`, `EXTCODECOPY` and `EXTCODEHASH` - `SHA3` (`0x20`) to `KECCAK256`


=== EIP-3978 ===
TITLE: Gas refunds on reverts
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-09-16
REQUIRES: 2929

SUMMARY:
For reverted state modification operations, keep access cost, but refund modification cost.

SPECIFICATION:
For each callframe, track `revert_gas_refund`, initially 0. The set of operations that modify `revert_gas_refund` are: - SSTORE - LOG0, LOG1, LOG2, LOG3, LOG4 -

MOTIVATION:
Reverting a transaction, or any of its sub-calls, drops any state modifications that happened inside. But now, users are being charged for the dropped

RATIONALE:
Gas should reflect the cost of use. The revert cost reflects the cost of access during execution, but not the cost of modification.


=== EIP-3529 ===
TITLE: Reduction in refunds
TYPE: Standards Track Core
STATUS: Final
CREATED: 2021-04-22
REQUIRES: 2, 2, 0, 0, ,,  , 2, 9, 2, 9, ,,  , 2, 9, 3, 0

SPECIFICATION:
### Parameters | Constant | Value | | - | - | | `FORK_BLOCK` | TBD | | `MAX_REFUND_QUOTIENT` | 5 | For blocks

MOTIVATION:
Gas refunds for `SSTORE` and `SELFDESTRUCT` were originally introduced to motivate application developers to write applications that practice "good state hygiene", clearing storage slots

RATIONALE:
In [EIP-2200](./eip-2200.md#specification), three cases for refunds were introduced: 1. If the original value is nonzero, and the new value is zero, add `SSTORE_CLEARS_SCHEDULE` (currently


=== EIP-4520 ===
TITLE: Multi-byte opcodes prefixed by EB and EC.
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-12-01
REQUIRES: 

SUMMARY:
Reserve `0xEB` and `0xEC` for usage as extended opcode space.

SPECIFICATION:
For example, a new arithmetic opcode may be allocated to `0xEC 01`(`ADD`), and a novel opcode may be introduced at `0xEB F4`(`DELEGATECALL`). Triple byte

MOTIVATION:
It would be convenient to introduce new opcodes that are likely to be infrequently used, whilst also being able to have greater than 256

RATIONALE:
It was considered that two prefix bytes rather than one would be adequate for reservation as extension addresses. Both `0xEB` and `0xEC` were chosen


=== EIP-1901 ===
TITLE: Add OpenRPC Service Discovery To JSON-RPC Services
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2019-02-25
REQUIRES: 

SUMMARY:
### What is this? This is a proposal to add [OpenRPC](https://github.com/open-rpc/spec) support to existing and future JSON-RPC services by adding the method [`rpc.discover`](https://github.com/open-rpc/spec#service-discovery-method) to

SPECIFICATION:
### What is OpenRPC? The [OpenRPC](https://github.com/open-rpc/spec) Specification defines a standard, programming language-agnostic interface description for [JSON-RPC 2.0](https://www.jsonrpc.org/specification) APIs, which allows both humans and computers

MOTIVATION:
Although [EIP-1474](./eip-1474.md) outlines a JSON-RPC specification. Ethereum still lacks a machine-readable JSON-RPC Specification that can be used as the industry standard for tooling. This

RATIONALE:
### Why would we do this? Services need to figure out how to talk to each other. If we really want to build the


=== EIP-2255 ===
TITLE: Wallet Permissions System
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2019-08-22
REQUIRES: 1193

SUMMARY:
This EIP adds two new wallet-namespaced RPC endpoints, `wallet_getPermissions` and `wallet_requestPermissions`, providing a standard interface for requesting and checking permissions.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
Wallets are responsible for mediating interactions between untrusted applications and users' keys through appropriate user consent. Today, wallets always prompt the user for every

RATIONALE:
While the current model of getting user consent on a per-action basis has high security, there are huge usability gains to be had bo


=== EIP-2780 ===
TITLE: Reduce intrinsic transaction gas
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2020-07-11
REQUIRES: 

SUMMARY:
Reduce the intrinsic cost of a transaction from `21,000` to `7,000` gas.

SPECIFICATION:
After `block.number >= FORK_BLOCK`, enforce an intrinsic gas cost of `7,000`.

MOTIVATION:
The current `21,000` gas intrinsic cost of a transaction makes sending ETH very costly, often times prohibitively costly for small amounts (tens of USD).

RATIONALE:
The proliferation of calls to DeFi smart-contracts had substantially increased the cost of making transactions, since such calls are usually both time sensitive and


=== EIP-2803 ===
TITLE: Rich Transactions
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-07-18
REQUIRES: 

SUMMARY:
If a transaction has a `to` of address `x`, then the `data` of the transaction will be treated as EVM bytecode and it will

SPECIFICATION:
A new reserved address is specified at `x`, in the range used for precompiles. When a transaction is sent to this address from an

MOTIVATION:
Many Ethereum DApps presently require users to approve multiple transactions in order to produce one effect - for example, the common pattern of first

RATIONALE:
The intent of this EIP is for the new precompile to act in all ways possible like a `DELEGATECALL` from an externally owned account.


=== EIP-1884 ===
TITLE: Repricing for trie-size-dependent opcodes
TYPE: Standards Track Core
STATUS: Final
CREATED: 2019-03-28
REQUIRES: 1, 5, 0, ,,  , 1, 0, 5, 2

SUMMARY:
The growth of the Ethereum state has caused certain opcodes to be more resource-intensive at this point than they were previously. This EIP proposes

SPECIFICATION:
At block `N`, - The `SLOAD` (`0x54`) operation changes from `200` to `800` gas, - The `BALANCE` (`0x31`) operation changes from `400` to `700`

MOTIVATION:
An imbalance between the price of an operation and the resource consumption (CPU time, memory etc) has several drawbacks: - It could be used

RATIONALE:
Here are two charts, taken from a full sync using Geth. The execution time was measured for every opcode, and aggregated for 10K blocks.


=== EIP-7782 ===
TITLE: Reduce Block Latency
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-10-05
REQUIRES: 7, 6, 2, 3, ,,  , 7, 7, 7, 8

SUMMARY:
Reduce Ethereum's slot time from 12 s to 6 s, halving on‑chain latency and epoch duration. This doubles slot throughput while keeping block and

SPECIFICATION:
On the consensus layer, a new parameter is added to the configuration: ``` SLOT_SCHEDULE: - EPOCH: 348618 SECONDS_PER_SLOT: 12 - EPOCH: 355368 SECONDS_PER_SLOT: 6

MOTIVATION:
- **Protocol Carrying Capacity** It is impractical to increase block sizes beyond 10MiB without substaintial networking changes. However it is practical to decrease slot

RATIONALE:
This proposal balances user experience, economic efficiency, and network stability: - UX & Finality: Halving slot time directly reduces confirmation latency and halves epoch


=== EIP-3709 ===
TITLE: Remove Support for Type 1 Transactions
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2021-08-07
REQUIRES: 1559

SUMMARY:
Since both `TransactionType` 1 and 2 contain `access_list`, we propose the removal of offering `TransactionType` 1 from wallets and providers, instead the transaction will

SPECIFICATION:
For wallets and providers, if a user submits a transaction for signing with where `TransactionType == 0x1`, the developer should upgrade the transaction to

MOTIVATION:
[EIP-2930](./eip-2930.md) was introduced as the first `TransactionType`, type 1, with the intention of adding `access_list` to the `TransactionPayload`. [EIP-1559](./eip-1559.md) introduced the second `TransactionType` 2,

RATIONALE:
Improve the user experience for submitting transactions, and move away from legacy style transactions.


=== EIP-2515 ===
TITLE: Implement Difficulty Freeze
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-02-10
REQUIRES: 

SUMMARY:
The difficulty Freeze is a mechanism that is easy to predict and model, and the pressures of missing it are more readily felt by

SPECIFICATION:
Add variable `DIFFICULTY_FREEZE_HEIGHT` The logic of the Difficulty Freeze is defined as follows: ``` if (BLOCK_HEIGHT <= DIFFICULTY_FREEZE_HEIGHT): block_diff = parent_diff + parent_diff //

MOTIVATION:
The current difficulty bombs' effect on the Block Time Targeting mechanism is rather complex to model, and it has both appeared when it was

RATIONALE:
Block height is very easy to predict and evaluate within the system. This removes the effect of the Difficulty Bomb on block time, simplifying


=== EIP-7762 ===
TITLE: Increase MIN_BASE_FEE_PER_BLOB_GAS
TYPE: Standards Track Core
STATUS: Review
CREATED: 2024-08-31
REQUIRES: 4844

SUMMARY:
This EIP proposes an increase to the MIN_BASE_FEE_PER_BLOB_GAS to speed up price discovery on blob space. It also resets the excess blob gas to

SPECIFICATION:
### `MIN_BASE_FEE_PER_BLOB_GAS` Increase The main specification change introduced by this EIP is setting MIN_BASE_FEE_PER_BLOB_GAS to 2**25: ```diff + MIN_BASE_FEE_PER_BLOB_GAS = 2**25 - MIN_BASE_FEE_PER_BLOB_GAS =

MOTIVATION:
When scoping 4844, the thinking was that blobs would only enter price discovery once, relatively quickly after the blob rollout; however, this has not

RATIONALE:
The current MIN_BASE_FEE_PER_BLOB_GAS is 1 wei. This is many orders of magnitude lower than the prevailing price of blobs when blobs enter price discovery.


=== EIP-1276 ===
TITLE: Eliminate Difficulty Bomb and Adjust Block Reward on Constantinople Shift
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-07-31
REQUIRES: 

SUMMARY:
Starting with `CNSTNTNPL_FORK_BLKNUM` the client will calculate the difficulty without considering the current block number. Furthermore, block rewards will be adjusted to a base

SPECIFICATION:
#### Remove Exponential Component of Difficulty Adjustment For the purposes of `calc_difficulty`, simply remove the exponential difficulty adjustment component, `epsilon`, i.e. the `int(2**((block.number //

MOTIVATION:
Block time has been played a most important role on blockchain ecosystem, and it is being adjusted by the logic of mining difficulty calculation

RATIONALE:
This will completely remove the difficulty bomb on difficulty adjustment algorithm without delaying the difficulty bomb again, therefore it is possible to prevent network


=== EIP-2384 ===
TITLE: Muir Glacier Difficulty Bomb Delay
TYPE: Standards Track Core
STATUS: Final
CREATED: 2019-11-20
REQUIRES: 

SUMMARY:
Starting with `MUIR_GLACIER_FORK_BLKNUM` the client will calculate the difficulty based on a fake block number suggesting to the client that the difficulty bomb is

SPECIFICATION:
#### Relax Difficulty with Fake Block Number For the purposes of `calc_difficulty`, simply replace the use of `block.number`, as used in the exponential ice

MOTIVATION:
The difficulty bomb started to become noticeable again on October 5th 2019 at block 8,600,000. Block times have been around 13.1s on average and

RATIONALE:
This will delay the ice age by 52 million seconds (approximately 611 days), so the chain would be back at 20 second block times


=== EIP-3322 ===
TITLE: Account gas storage opcodes
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-03-04
REQUIRES: 

SUMMARY:
Contracts can persist gas for later transfer to the refund counter. Three opcodes are introduced to read, add to, and use this gas counter.

SPECIFICATION:
Contract accounts gain an unsigned gas refund counter, initially zero. Three new opcodes are introduced to manage this state. * `SELFGAS` (`0x49`): Pushes the

MOTIVATION:
The refund mechanism is currently being used by gas tokens to arbitrage gas price. This brings gas supply elasticity and price stability by moving

RATIONALE:
By reusing the execution context's refund counter we can reuse its 50% DoS protection, which limits its block elasticity contribution to 2x. The gas


=== EIP-7940 ===
TITLE: Ethereum Shah
TYPE: Informational 
STATUS: Draft
CREATED: 2025-04-28
REQUIRES: 

SUMMARY:
Ethereum needs a Shah. The role of the Shah is to be the "protector". A Shah, empowered by the community and with a mandate

SPECIFICATION:
The Shah SHOULD be elected by the Ethereum community, using a combination of ETH voting, social signalling, and core dev ratification. The Shah SHOULD

MOTIVATION:
It is clear from recent events that Ethereum is suffering from a coordination breakdown between the user ecosystem and the core devs. A case

RATIONALE:
During times of war, the Roman Senate would elect an "Imperator" that would be responsible for dealing with an imminent threat, and once the


=== EIP-6189 ===
TITLE: Alias Contracts
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-12-20
REQUIRES: 2, 9, 2, 9, ,,  , 6, 1, 8, 8

SUMMARY:
This EIP allows contracts to be turned into "alias contracts" using a magic nonce. Alias contracts automatically forward calls to other contracts.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
This EIP is not terribly useful on its own, as it adds additional computation and gas costs without any useful side effects. However, in

RATIONALE:
The additional gas cost of `25` represents the cost of fetching the nonce and comparing it to the given value. `eth_getStorageAt` was modified to


=== EIP-1571 ===
TITLE: EthereumStratum/2.0.0
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2018-11-09
REQUIRES: 

SUMMARY:
This draft contains the guidelines to define a new standard for the Stratum protocol used by Ethereum miners to communicate with mining pool servers.

SPECIFICATION:
The Stratum protocol is an instance of [JSON-RPC-2.0](https://www.jsonrpc.org/specification). The miner is a JSON-RPC client, and the server is a JSON-RPC server. All communications exist

RATIONALE:
Ethereum does not have an official Stratum implementation yet. It officially supports only getWork which requires miners to constantly pool the work provider. Only


=== EIP-2700 ===
TITLE: JavaScript Provider Event Emitter
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2020-06-05
REQUIRES: 

SUMMARY:
This standard provides the description of an object that is made available to JavaScript applications which they can use to receive notifications from an

SPECIFICATION:
### RFC-2119 The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
When working within a JavaScript runtime (such as NodeJS, Electron, Browser, etc.) it may be possible for the runtime or a runtime plugin to

RATIONALE:
This EIP is mostly a retrospective EIP meaning it codifies an already existing specification so there isn't a lot of room for improving things


=== EIP-1193 ===
TITLE: Ethereum Provider JavaScript API
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2018-06-30
REQUIRES: 1, 5, 5, ,,  , 6, 9, 5

SUMMARY:
A common convention in the Ethereum web application ("dapp") ecosystem is for key management software ("wallets") to expose their API via a JavaScript object

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

RATIONALE:
The purpose of a Provider is to _provide_ a consumer with access to Ethereum. In general, a Provider must enable an Ethereum web application


=== EIP-4895 ===
TITLE: Beacon chain push withdrawals as operations
TYPE: Standards Track Core
STATUS: Final
CREATED: 2022-03-10
REQUIRES: 

SUMMARY:
Introduce a system-level "operation" to support validator withdrawals that are "pushed" from the beacon chain to the EVM. These operations create unconditional balance increases

SPECIFICATION:
| constants | value | units |--- |--- |--- | `FORK_TIMESTAMP` | 1681338455 | Beginning with the execution timestamp `FORK_TIMESTAMP`, execution clients **MUST** introduce

MOTIVATION:
This EIP provides a way for validator withdrawals made on the beacon chain to enter into the EVM. The architecture is "push"-based, rather than

RATIONALE:
### Why not a new transaction type? This EIP suggests a new type of object -- the "withdrawal operation" -- as it has special


=== EIP-4788 ===
TITLE: Beacon block root in the EVM
TYPE: Standards Track Core
STATUS: Final
CREATED: 2022-02-10
REQUIRES: 1559

SUMMARY:
Commit to the hash tree root of each beacon chain block in the corresponding execution payload header. Store each of these roots in a

SPECIFICATION:
| constants | value | |--- |--- | | `FORK_TIMESTAMP` | `1710338135` | | `HISTORY_BUFFER_LENGTH` | `8191` | | `SYSTEM_ADDRESS` | `0xfffffffffffffffffffffffffffffffffffffffe` | |

MOTIVATION:
Roots of the beacon chain blocks are cryptographic accumulators that allow proofs of arbitrary consensus state. Exposing these roots inside the EVM allows for

RATIONALE:
### Why not repurpose `BLOCKHASH`? The `BLOCKHASH` opcode could be repurposed to provide the beacon root instead of some execution block hash. To minimize


=== EIP-7976 ===
TITLE: Further increase calldata cost
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-06-18
REQUIRES: 7623

SUMMARY:
Following the implementation of [EIP-7623](./eip-7623.md), this EIP proposes a further adjustment to calldata pricing by raising the floor cost from 10/40 to 15/60 gas

SPECIFICATION:
| Parameter | Value | | ---------------------------- | ----- | | `STANDARD_TOKEN_COST` | `4` | | `TOTAL_COST_FLOOR_PER_TOKEN` | `15` | Let `tokens_in_calldata = zero_bytes_in_calldata

MOTIVATION:
While [EIP-7623](./eip-7623.md) successfully reduced the maximum possible block size by introducing a floor cost of 10/40 gas per byte for data-heavy transactions, continued increases

RATIONALE:
With [EIP-7623](./eip-7623.md)'s implementation, data-heavy transactions cost 10/40 gas per zero/non-zero byte, reducing the maximum possible EL payload size to approximately 0.72 MB (`30_000_000/40`). This


=== EIP-3068 ===
TITLE: Precompile for BN256 HashToCurve Algorithms
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-10-23
REQUIRES: 1, 9, 8, ,,  , 1, 1, 0, 8

SUMMARY:
There is currently no inexpensive way to perform BLS signature verification for arbitrary messages. This stems from the fact that there is no precompiled

SPECIFICATION:
Here is the pseudocode for the `HashToG1` function: ``` function HashToG1(msg) fieldElement0 = HashToBase(msg, 0x00, 0x01) fieldElement1 = HashToBase(msg, 0x02, 0x03) curveElement0 = BaseToG1(fieldElement0)

MOTIVATION:
The precompiled contracts in [EIP-198](./eip-198.md) and [EIP-1108](./eip-1108.md) increased usage of cryptographic operations in the EVM by reducing the gas costs. In particular, the cost

RATIONALE:
The BaseToG1 algorithm is based on the original Fouque and Tibouchi [paper](../assets/eip-3068/latincrypt12.pdf) with modifications based on Wahby and Boneh's [paper](../assets/eip-3068/2019-403_BLS12_H2C.pdf). There is freedom in


=== EIP-2666 ===
TITLE: Repricing of precompiles and Keccak256 function
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-05-22
REQUIRES: 1, 3, 5, 2, ,,  , 2, 0, 4, 6, ,,  , 2, 5, 6, 5

SUMMARY:
Costs of many precompiles and built-in functions are invalid at the current state of the clients. This EIP contains a list of changes to

SPECIFICATION:
If `block_number >= X` set the gas cost of the following precompiles and Keccak256 opcode: - SHA256 (precompile `0x02`): `10 + ((len(input) + 8)/64

MOTIVATION:
Historical pricing for these functions in EVM does not reflect inner structure of the underlying computations (inner structure of the hash functions). - EIP-2046

RATIONALE:
Cost of functions being executed must accurately reflect real CPU time spent on computations, so benchmarking was performed for current precompiles and Keccak256 function


=== EIP-615 ===
TITLE: Subroutines and Static Jumps for the EVM
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2016-12-10
REQUIRES: 

SUMMARY:
EVM code is currently difficult to statically analyze, hobbling critical tools for preventing the many expensive bugs our blockchain has experienced. Further, none of

SPECIFICATION:
### Dependencies > **[EIP-1702](./eip-1702.md). Generalized Account Versioning Scheme.** This proposal needs a versioning scheme to allow for its bytecode (and eventually eWasm bytecode) to

MOTIVATION:
Currently the EVM supports only dynamic jumps, where the address to jump to is an argument on the stack. Worse, the EVM fails to

RATIONALE:
This design was highly constrained by the existing EVM semantics, the requirement for eWasm compatibility, and the security demands of the Ethereum environment. It


=== EIP-7951 ===
TITLE: Precompile for secp256r1 Curve Support
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-05-27
REQUIRES: 

SUMMARY:
Add functionality to efficiently perform ECDSA signature verification over the secp256r1 elliptic curve (also known as P-256 or prime256v1). This precompile enables native support

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The secp256r1 elliptic curve is a NIST-standardized curve widely supported in modern secure hardware and authentication systems. Adding native support for secp256r1 signature verification

RATIONALE:
### Security Fixes This specification addresses two critical vulnerabilities in RIP-7212: 1. **Point-at-infinity check**: The original RIP-7212 failed to check if the recovered point


=== EIP-7956 ===
TITLE: Tx Ordering via Block-level Randomness
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-05-24
REQUIRES: 

SUMMARY:
Proposers and builders can currently permute pending transactions arbitrarily, enabling reorder‑driven MEV. This EIP introduces a consensus rule that sorts all transactions inside a

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Unrestricted ordering is the key enabler of sandwich and classic front‑running attacks. Deterministic ordering collapses these vectors to latency racing and information asymmetry. Clear

RATIONALE:
### Why randomness‑driven ordering? * Objective & Verifiable – Using a function of on‑chain randomness (R) and a transaction’s own hash gives every validator


=== EIP-7918 ===
TITLE: Blob base fee bounded by execution cost
TYPE: Standards Track Core
STATUS: Review
CREATED: 2025-03-25
REQUIRES: 4, 8, 4, 4, ,,  , 7, 8, 4, 0

SUMMARY:
This EIP assigns a reserve price `BLOB_BASE_COST * base_fee_per_gas` to blobs by introducing an `if`-clause in `calc_excess_blob_gas()`. Specifically, when the reserve price is higher

SPECIFICATION:
### Parameters | Constant | Value | - | - | | `BLOB_BASE_COST` | `2**13` | ### Functions An `if`-clause is added to `calc_excess_blob_gas()`

MOTIVATION:
Ethereum deploys a dynamic pricing auction to set the blob base fee, lowering the fee if less gas is consumed than `TARGET_BLOB_GAS_PER_BLOCK` and raising

RATIONALE:
### Fee-inelasticity and reserve price This proposal alleviates idiosyncrasies in the blob base fee auction. The fee update mechanism is unaware of the full


=== EIP-7612 ===
TITLE: Verkle state transition via an overlay tree
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-01-25
REQUIRES: 4, 7, 6, 2, ,,  , 6, 8, 0, 0, ,,  , 7, 5, 4, 5

SUMMARY:
This EIP proposes a method to switch the state tree tree format from hexary Merkle Patricia Tree (MPT) to a Verkle Tree (VKT): the

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The Ethereum state is growing, and VKTs offer a good mitigation strategy to stem this growth and enable weak statelessness. Owing to the difficulty

RATIONALE:
This approach doesn't convert the state, which is left to a subsequent EIP. This is meant as a stopgap in case we decide to


=== EIP-6811 ===
TITLE: To The Moon—10 Minute Blocks
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-04-01
REQUIRES: 

SUMMARY:
This EIP makes a minimal number of changes to allow Ethereum to be used on the moon and other potentially habitable bodies in Earth's

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
It is impossible for today's Ethereum to literally "go to the moon" due to a limitation in the protocol: the block length. Should validators

RATIONALE:
* The block gas limit is multiplied by fifty to compensate for the time between blocks being multiplied by fifty. * The per-block validator


=== EIP-1240 ===
TITLE: Remove Difficulty Bomb
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2018-07-21
REQUIRES: 

SUMMARY:
Starting with `FORK_BLOCK_NUMBER` the client will calculate the difficulty without considering the current block number.

SPECIFICATION:
#### Remove Difficulty For the purposes of `calc_difficulty`, if `block.number >= FORK_BLOCK_NUMBER` then change the epsilon component to `0` rather than having it be

MOTIVATION:
The difficulty bomb operates under the assumption that miners decide what code economic participants are running, rather than economic participants deciding for themselves. In

RATIONALE:
With the difficulty bomb removed, when Casper is released it will be up to economic participants to decide whether they want the features that


=== EIP-6122 ===
TITLE: Forkid checks based on timestamps
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2022-12-13
REQUIRES: 2124

SUMMARY:
[EIP-2124](./eip-2124.md) proposed a way of identifying nodes on the p2p network based on their chain configuration via the forkid parameter. It allows nodes to

SPECIFICATION:
Each node maintains the following values: - **`FORK_HASH`**: IEEE CRC32 checksum (`[4]byte`) of the genesis hash and fork blocks numbers or timestamps that already

MOTIVATION:
While in proof-of-work forks were scheduled by block number, the proof-of-stake consensus layer schedules forks by slot number. The slot number is a time

RATIONALE:
Shanghai will be scheduled by timestamp thus the forkid calculations need to be updated to work with timestamps and blocks. Since all block number


=== EIP-1895 ===
TITLE: Support for an Elliptic Curve Cycle
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-03-31
REQUIRES: 

SUMMARY:
Adds supports for the following operations through precompiles: * `ecadd` on MNT4 * `ecmul` on MNT4 * `ecpairing` on MNT4

SPECIFICATION:
### The curve The proposed cycle has been introduced in [Scalable Zero Knowledge via Cycles of Elliptic Curves](https://eprint.iacr.org/2014/595.pdf). ### MNT4 definition The groups `G_1`

MOTIVATION:
Elliptic curve is the basic block of recursive SNARKs (ie: verifying a SNARK inside a SNARK) and this addresses the issue of scalable zero-knowledge.

RATIONALE:
The curve has 80 bits of security (whereas MNT6 has 120 bits) which might not be considered enough for critical security level, (for instance


=== EIP-5656 ===
TITLE: MCOPY - Memory copying instruction
TYPE: Standards Track Core
STATUS: Final
CREATED: 2021-02-01
REQUIRES: 

SUMMARY:
Provide an efficient EVM instruction for copying memory areas.

SPECIFICATION:
The instruction `MCOPY` is introduced at `0x5E`. ### Input stack | Stack | Value | |-------|-------| | top - 0 | `dst` | |

MOTIVATION:
Memory copying is a basic operation, yet implementing it on the EVM comes with overhead. This was recognised and alleviated early on with the

RATIONALE:
Production implementation of exact-word memory copying and partial-word memory copying can be found in the Solidity, Vyper and Fe compilers. With [EIP-2929](./eip-2929.md) the call


=== EIP-5749 ===
TITLE: The 'window.evmproviders' object
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2022-10-04
REQUIRES: 1193

SUMMARY:
A Javascript Ethereum Provider interface injection that will allow for the interoperability of multiple browser wallets at the same time. Replacing `window.ethereum` with `window.evmproviders`

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
At present, `window.ethereum` is the prevailing method by which Ethereum-compatible applications interact with injected wallets. This originated with Mist Wallet in 2015 to interact

RATIONALE:
Standardizing a `ProviderInfo` type allows determining the necessary information to populate a wallet selection popup. This is particularly useful for web3 onboarding libraries such


=== EIP-7833 ===
TITLE: Scheduled function calls
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-12-06
REQUIRES: 

SUMMARY:
Ethereum's smart contracts enable users to delegate control of their funds to code, but these contracts require an external trigger to execute. Timing is

SPECIFICATION:
Adding bot-like behavior to an EVM function is achieved by recursively scheduling a call to the same function in the next block. We propose

RATIONALE:
The rationale behind this Ethereum Improvement Proposal (EIP) stems from the need to enhance the reliability and fairness of smart contract execution on the


=== EIP-4750 ===
TITLE: EOF - Functions
TYPE: Standards Track Core
STATUS: Review
CREATED: 2022-01-10
REQUIRES: 3, 5, 4, 0, ,,  , 3, 6, 7, 0, ,,  , 5, 4, 5, 0

SUMMARY:
Introduce the ability to have several code sections in EOF-formatted ([EIP-3540](./eip-3540.md)) bytecode, each one representing a separate subroutine/function. Two new opcodes,`CALLF` and `RETF`, are

SPECIFICATION:
### Type Section The type section of EOF containers must adhere to following requirements: 1. The section is a list of metadata where the

MOTIVATION:
Currently, in the EVM everything is a dynamic jump. Languages like Solidity generate most jumps in a static manner (i.e. the destination is pushed

RATIONALE:
### `RETF` in the top frame ends execution vs exceptionally halts vs is not allowed during validation Alternative logic for `RETF` in the top


=== EIP-7756 ===
TITLE: EOF/EVM Trace Specification
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2024-08-13
REQUIRES: 3, 1, 5, 5, ,,  , 4, 7, 5, 0

SUMMARY:
Updates the [EIP-3155](./eip-3155.md) JSON tracing specification to support EOF features.

SPECIFICATION:
To promote clarity and provide a cohesive specification, the entire tracing specification will be presented with alterations in-line rather than as a set of

MOTIVATION:
EIP-3155 defined a tracing standard for Legacy EVM operations. However, the EVM Object Format ([EIP-7692](./eip-7692.md)) adds a number of features that need to be

RATIONALE:
This EIP is an extension of the EIP-3155 tracing features that has been in use for years. Rather than dramatically re-boot the feature, the


=== EIP-867 ===
TITLE: Standardized Ethereum Recovery Proposals
TYPE: Meta 
STATUS: Stagnant
CREATED: 2018-02-02
REQUIRES: 

SUMMARY:
This proposal identifies a common solution method that can be used to address certain classes of lost funds on the Ethereum blockchain. In particular,

SPECIFICATION:
This EIP describes a common format to be used for a subclass of EIPs, referred to as ethereum recovery proposals (ERPs), that propose an

MOTIVATION:
The issue of fund recovery on the Ethereum blockchain is often controversial. Frozen fund recovery proposals are almost never successful due to the relatively

RATIONALE:
The primary consideration for the approach described above was to minimize the amount of risk associated with recovery actions that would otherwise not have


=== EIP-1283 ===
TITLE: Net gas metering for SSTORE without dirty maps
TYPE: Standards Track Core
STATUS: Final
CREATED: 2018-08-01
REQUIRES: 

SUMMARY:
This EIP proposes net gas metering changes for `SSTORE` opcode, enabling new usages for contract storage, and reducing excessive gas costs where it doesn't

SPECIFICATION:
Definitions of terms are as below: * *Storage slot's original value*: This is the value of the storage if a reversion happens on the

MOTIVATION:
This EIP proposes a way for gas metering on SSTORE (as an alternative for EIP-1087 and EIP-1153), using information that is more universally available

RATIONALE:
This EIP mostly achieves what a transient storage tries to do (EIP-1087 and EIP-1153), but without the complexity of introducing the concept of "dirty


=== EIP-7620 ===
TITLE: EOF Contract Creation
TYPE: Standards Track Core
STATUS: Review
CREATED: 2024-02-12
REQUIRES: 1, 7, 0, ,,  , 6, 8, 4, ,,  , 2, 9, 2, 9, ,,  , 3, 5, 4, 0, ,,  , 3, 5, 4, 1, ,,  , 3, 6, 7, 0

SUMMARY:
EVM Object Format (EOF) removes the possibility to create contracts using `CREATE` or `CREATE2` instructions. We introduce a new/replacement method in form of pair

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
This EIP uses terminology from the [EIP-3540](./eip-3540.md) which introduces the EOF format. EOF aims to remove code observability, which is a prerequisite to legacy

RATIONALE:
### Data section appending The data section is appended to during contract creation and also its size needs to be updated in the header.


=== EIP-7702 ===
TITLE: Set Code for EOAs
TYPE: Standards Track Core
STATUS: Final
CREATED: 2024-05-07
REQUIRES: 2, ,,  , 1, 6, 1, ,,  , 1, 0, 5, 2, ,,  , 2, 7, 1, 8, ,,  , 2, 9, 2, 9, ,,  , 2, 9, 3, 0, ,,  , 3, 5, 4, 1, ,,  , 3, 6, 0, 7, ,,  , 4, 8, 4, 4

SUMMARY:
Add a new [EIP-2718](./eip-2718.md) transaction type that allows Externally Owned Accounts (EOAs) to set the code in their account. This is done by attaching

SPECIFICATION:
### Parameters | Parameter | Value | | ------------------------ | ------- | | `SET_CODE_TX_TYPE` | `0x04` | | `MAGIC` | `0x05` | | `PER_AUTH_BASE_COST`

MOTIVATION:
Despite great advances in the smart contract wallet ecosystem, EOAs have held back broad adoption of UX improvements across applications. This EIP therefore focuses

RATIONALE:
Below is the rationale for both general design directions of the EIP, as well as specific technical choices. ### General design philosophy #### Persistence


=== EIP-6188 ===
TITLE: Nonce Cap
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-12-20
REQUIRES: 2929

SUMMARY:
This EIP caps the nonce at `2^64-2`, reserving it for contracts with unusual behavior, as defined in other EIPs.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
This EIP is not terribly useful on its own, as it adds additional computation without any useful side effects. However, it can be used

RATIONALE:
Capping a nonce allows for contracts with special properties to be created, with their functionality based on their contract code. As such, only one


=== EIP-7916 ===
TITLE: SSZ ProgressiveList
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-03-24
REQUIRES: 

SUMMARY:
This EIP introduces a new Merkle tree shape for [Simple Serialize (SSZ)](https://github.com/ethereum/consensus-specs/blob/b5c3b619887c7850a8c1d3540b471092be73ad84/ssz/simple-serialize.md) types that results in fewer hashes when only a small number of

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Current SSZ `List[type, N]` types require a predefined capacity `N`, which leads to several issues: - Inefficient hashing: Lists often contain far fewer elements

RATIONALE:
### Why a recursive structure? - Efficiency: Small lists use fewer hashes (e.g., a 3-item list in a 16-element subtree wastes fewer hashes than


=== EIP-7975 ===
TITLE: eth/70 - partial block receipt lists
TYPE: Standards Track Networking
STATUS: Draft
CREATED: 2025-06-16
REQUIRES: 7, 6, 4, 2, ,,  , 7, 8, 2, 5

SUMMARY:
This EIP modifies the 'eth' p2p protocol to allow requesting partial block receipt lists.

SPECIFICATION:
Modify the encoding for receipts in the `Receipts (0x10)` message as follows: - (eth/69): `[request-id: P, [[receipt₁, receipt₂], ...]]` - (eth/70): `[request-id: P, lastBlockIncomplete:

MOTIVATION:
As Ethereum moves toward a higher block gas limit on mainnet, the worst-case total size of a block receipts list also becomes larger, and

RATIONALE:
Since [EIP-7825] caps the gas limit of a single transaction to 30M gas, a single transaction receipt will always be limited in size. Specifically,


=== EIP-7545 ===
TITLE: Verkle proof verification precompile
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-10-13
REQUIRES: 

SUMMARY:
This EIP proposes the addition of a precompiled contract to provide up-to-date state proof verification capabilities to smart contracts in a stateless Ethereum context.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The proposed proof systems for stateless Ethereum require an upgrade to many tools and applications, that need a simple path to keep their proving

RATIONALE:
Stateless Ethereum relies on proofs using advanced mathematical concepts and tools from a fast-moving area of cryptography. As a result, a soft-fork approach is


=== EIP-3332 ===
TITLE: MEDGASPRICE Opcode
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2021-03-05
REQUIRES: 

SUMMARY:
Adds `MEDGASPRICE (0x46)` opcode that returns the median gas price for the parent block.

SPECIFICATION:
If `block.number >= TBD`, add a new opcode `MEDGASPRICE (0x46)`: Pushes the median gas price of the parent block onto the stack. | Op

MOTIVATION:
With the emergence of rollups as core mechanisms in scaling Ethereum there are a number of common transactions that can be front-run. Optimistic rollups

RATIONALE:
Having access to the current gas price economy allows contracts to implement more robust and automated logic surrounding acceptable transaction gas prices. ### Naming


=== EIP-649 ===
TITLE: Metropolis Difficulty Bomb Delay and Block Reward Reduction
TYPE: Standards Track Core
STATUS: Final
CREATED: 2017-06-21
REQUIRES: 

SUMMARY:
Starting with `BYZANTIUM_FORK_BLKNUM` the client will calculate the difficulty based on a fake block number suggesting the client that the difficulty bomb is adjusting

SPECIFICATION:
#### Relax Difficulty with Fake Block Number For the purposes of `calc_difficulty`, simply replace the use of `block.number`, as used in the exponential ice

MOTIVATION:
The Casper development and switch to proof-of-stake is delayed, the Ethash proof-of-work should be feasible for miners and allow sealing new blocks every 15

RATIONALE:
This will delay the ice age by 42 million seconds (approximately 1.4 years), so the chain would be back at 30 second block times


=== EIP-3220 ===
TITLE: Crosschain Identifier Specification
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-10-21
REQUIRES: 

SUMMARY:
The crosschain-id is a 32 byte hex string and with some bytes extracted from blockchain hash and some manually defined to characterize a blockchain.

SPECIFICATION:
### Definition of a 32 byte crosschain id | Name | Size(bytes) | Description | |---------------|-------------|-------------| | Truncated Block Hash | 16 | This

MOTIVATION:
With the success of Bitcoin and Ethereum, various blockchains such as EOS, Ripple, Litecoin, Besu, Wanchain and the like have been developed and are

RATIONALE:
We have considered various alternative specifications such as using a random unique hex string to represent a blockchain. The drawback of this method is


=== EIP-3372 ===
TITLE: 5 FNV primes for ethash
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-03-13
REQUIRES: 

SUMMARY:
This EIP is to kick current ASIC implementations out of the network to keep the Ethereum network secure and healthy by changing the `fnv`

SPECIFICATION:
If `block.number >= ETHASH11_BLKNUM`, activate the `ethash1.1` algorithm version. ### ethash1.1 Prior to this change, `fnv` hash function is used throughout the `hashimoto` function.

MOTIVATION:
ASICs provide a severe centralization risk for the Ethereum network. If we do not get rid of them, small GPU miners will be forced

RATIONALE:
ASIC Miners have become a threat to the future of Ethereum and a hard fork is required to remove them from the network before


=== EIP-7698 ===
TITLE: EOF - Creation transaction
TYPE: Standards Track Core
STATUS: Review
CREATED: 2024-04-24
REQUIRES: 3540

SUMMARY:
Creation transactions (i.e. the ones with empty `to`) can be used to deploy EOF contracts by providing EOF initcontainer concatenated with `calldata` for initcontainer

SPECIFICATION:
Wherever not explicitly listed, the rules of EOF contract creation should be identical or analogous to those of legacy creation transaction. This includes but

MOTIVATION:
Creation transaction is one of the three ways alongside creation instructions provided by legacy EVM to deploy new code. Given that legacy creation instructions

RATIONALE:
### Irregular state change to deploy Creator Contract Originally it was proposed to deploy the first EOF contract via irregular state change. This contract


=== EIP-2069 ===
TITLE: Recommendation for using YAML ABI in ERCs/EIPs
TYPE: Informational 
STATUS: Stagnant
CREATED: 2017-02-11
REQUIRES: 

SPECIFICATION:
The [Standard Contract ABI] is usually represented as a JSON object. This works well and several tools – including compilers and clients – support

MOTIVATION:
In the past, most ERCs/EIPs included an ABI description purely as a Solidity contract and/or interface. This has several drawbacks: - Prefers a single

RATIONALE:
The aim was to chose a representation which is well supported by tools and supports comments. While inventing a more concise description language seems


=== EIP-7966 ===
TITLE: eth_sendRawTransactionSync Method
TYPE: Standards Track Interface
STATUS: Draft
CREATED: 2025-06-11
REQUIRES: 

SUMMARY:
This EIP proposes a new JSON-RPC method, `eth_sendRawTransactionSync`, which submits a signed raw transaction and waits synchronously for the transaction receipt or a configurable

SPECIFICATION:
### Method Name `eth_sendRawTransactionSync` ### Parameters | Position | Type | Description | Required | |----------|------------|-----------------------------------|----------| | 1 | `DATA` | The signed transaction

MOTIVATION:
Currently, Ethereum clients submit signed transactions asynchronously using `eth_sendRawTransaction`. Clients receive a transaction hash immediately but must poll repeatedly for the transaction receipt, which

RATIONALE:
### Why Not Extend Existing RPC? Modifying `eth_sendRawTransaction` to support this behavior would risk compatibility issues and ambiguity. A separate method makes the semantics


=== EIP-7002 ===
TITLE: Execution layer triggerable withdrawals
TYPE: Standards Track Core
STATUS: Final
CREATED: 2023-05-09
REQUIRES: 7685

SUMMARY:
Adds a new mechanism to allow validators to trigger withdrawals and exits from their execution layer (0x01) withdrawal credentials. These new execution layer exit

SPECIFICATION:
### Configuration | Name | Value | Comment | | - | - | - | | `WITHDRAWAL_REQUEST_PREDEPLOY_ADDRESS` | `0x00000961Ef480Eb55e80D19ad83579A64c007002` | Where to call

MOTIVATION:
Validators have two keys -- an active key and a withdrawal credential. The active key takes the form of a BLS key, whereas the

RATIONALE:
### `validator_pubkey` field Multiple validators can utilize the same execution layer withdrawal credential, thus the `validator_pubkey` field is utilized to disambiguate which validator is


=== EIP-7935 ===
TITLE: Set default gas limit to XX0M
TYPE: Informational 
STATUS: Draft
CREATED: 2025-04-22
REQUIRES: 

SUMMARY:
<!--TODO: Fill in recommended gas limit--> The gas limit on mainnet is currently 36M. This should be significantly increased to XX0Mby the time Fusaka

SPECIFICATION:
Execution layer clients have different configuration formats. They should all update the gas limit value generated in their default configurations to XX0M.

MOTIVATION:
There is currently great interest in scaling L1 execution. This can likely be done to some extent without implementing any new features. However, it

RATIONALE:
In the past there has been some difficulty coordinating EL clients to update gas limit values in their default configurations. Therefore we suggest tying


=== EIP-7942 ===
TITLE: Available Attestation
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-04-30
REQUIRES: 

SUMMARY:
This EIP proposes Available Attestation (AA), a protocol enhancement to make Ethereum PoS resilient against reorganization attacks. The proposal introduces a stability criterion for

SPECIFICATION:
### Overview We provide a lightweight yet efficient solution for Ethereum PoS which is: 1) reorg resilient in a synchronous network; 2) safe and

MOTIVATION:
We find that all known effective attacks on Ethereum PoS belong to reorganization attacks, although they emphasize different types of adversarial strategies. According to

RATIONALE:
The reason why our approach is reorg resilient is that the AA mechanism *prevents* Byzantine validators from creating conflicting branches. As summarized in the


=== EIP-1482 ===
TITLE: Define a maximum block timestamp drift
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-10-09
REQUIRES: 

SUMMARY:
On the basis that both Geth and Parity implement the same timestamp validation requirements, this should be written into the reference specification.

SPECIFICATION:
The yellow paper should define a timestamp as: > A scalar value equal to the output of Unix’s time() at this block’s inception. For

MOTIVATION:
There is a lack of clarity about how accurate timestamps in the block header must be. The yellow paper describes the timestamp as >

RATIONALE:
Both [Geth](https://github.com/ethereum/go-ethereum/blob/4e474c74dc2ac1d26b339c32064d0bac98775e77/consensus/ethash/consensus.go#L45) and [Parity](https://github.com/paritytech/parity-ethereum/blob/73db5dda8c0109bb6bc1392624875078f973be14/ethcore/src/verification/verification.rs#L296-L307) reject blocks with timestamp more than 15 seconds in the future. This establishes a defacto standard, which should be made


=== EIP-6913 ===
TITLE: SETCODE instruction
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2023-04-20
REQUIRES: 

SUMMARY:
Introduce the `SETCODE` (`0xfc`) instruction, which replaces the code of the executing account from memory.

SPECIFICATION:
When within a read-only execution scope like the recursive kind created by `STATICCALL`, `SETCODE` causes an exceptional abort. When the currently executing code does

MOTIVATION:
Many contracts are upgradeable in order to facilitate improvement or defer decisions without migrating to a new address. Contracts presently do this in several

RATIONALE:
The behavior of `CODECOPY`, `CODESIZE`, `EXTCODESIZE`, and `EXTCODECOPY` match the behavior of `DELEGATECALL` and `CREATE`, where it is also possible for executing code to


=== EIP-7378 ===
TITLE: Add time-weighted averaging to the base fee
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-07-22
REQUIRES: 

SUMMARY:
This EIP proposes a new formula to update the base fee, derived from [EIP-1559](./eip-1559.md). The existing base fee update formula, $$b[i+1]\triangleq b[i] \cdot \left(

SPECIFICATION:
$s[i]$ is replaced by $s_{\textit{avg}}[i]$, where: $$s_{\textit{avg}}[i] \triangleq \alpha\sum_{k=1}^{\infty} (1-\alpha)^k\cdot s[i-k+1]$$ which simplifies to the recursive form $$s_{\textit{avg}}[i] = \alpha\cdot s[i] + (1-\alpha)\cdot s_{\textit{avg}}[i-1]$$

MOTIVATION:
To reduce bribe motivation when the demand for blockspace is high (see Incentive Considerations section) and to reduce oscillations, thus, having a more stable

RATIONALE:
An intuitive option for the Transaction Fee Mechanism (TFM) that adjusts supply and demand economically is *First price auction*, which is well known and


=== EIP-7645 ===
TITLE: Alias ORIGIN to SENDER
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-03-03
REQUIRES: 

SUMMARY:
This EIP proposes aliasing the ORIGIN opcode to the SENDER opcode within the Ethereum Virtual Machine (EVM). The purpose of this change is to

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The ORIGIN opcode in Ethereum returns the address of the account that started the transaction chain, differing from the SENDER (or CALLER) opcode, which

RATIONALE:
The rationale behind aliasing ORIGIN to SENDER is to: Facilitate Account Abstraction: Elegantly nullify a universal barrier to account abstraction, enabling more flexible and


=== EIP-3541 ===
TITLE: Reject new contract code starting with the 0xEF byte
TYPE: Standards Track Core
STATUS: Final
CREATED: 2021-03-16
REQUIRES: 

SUMMARY:
Disallow new code starting with the `0xEF` byte to be deployed. Code already existing in the account trie starting with `0xEF` byte is not

SPECIFICATION:
After `block.number == HF_BLOCK` new contract creation (via create transaction, `CREATE` or `CREATE2` instructions) results in an exceptional abort if the _code_'s first byte

MOTIVATION:
Contracts conforming to the EVM Object Format (EOF) are going to be validated at deploy time. In order to guarantee that every EOF-formatted contract

RATIONALE:
The `0xEF` byte was chosen because it resembles **E**xecutable **F**ormat. Contracts using unassigned opcodes are generally understood to be at risk of changing semantics.


=== EIP-1681 ===
TITLE: Temporal Replay Protection
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-01-08
REQUIRES: 

SPECIFICATION:
The roll-out would be performed in two phases, `X` (hardfork), and `Y` (softfork). At block `X`, - Add an optional field `valid-until` to the

MOTIVATION:
There are a couple of different motivators for introducing a timebased transaction validity. - If any form of dust-account clearing is introduced, e.g. (https://github.com/ethereum/EIPs/issues/168),

RATIONALE:
### Rationale for this EIP For the dust-account clearing usecase, - This change is much less invasive in the consensus engine. - No need


=== EIP-5793 ===
TITLE: eth/68 - Add tx type to tx announcement
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2022-10-18
REQUIRES: 2, 4, 6, 4, ,,  , 2, 4, 8, 1, ,,  , 4, 9, 3, 8

SUMMARY:
The Ethereum Wire Protocol defines request and response messages for exchanging data between clients. The `NewPooledTransactionHashes` message announces transactions available in the node. This

SPECIFICATION:
Modify the `NewPooledTransactionHashes (0x08)` message: * **(eth/67)**: `[hash_0: B_32, hash_1: B_32, ...]` * **(eth/68)**: `[types: B, [size_0: P, size_1: P, ...], [hash_0: B_32, hash_1:

MOTIVATION:
The `NewPooledTransactionHashes` message announces transaction hashes, allowing the peer to selectively fetch transactions it does not yet have. [EIP-4844](./eip-4844.md) introduces a new transaction type

RATIONALE:
This change will make the `eth` protocol future-proof for new transaction types that might not be relevant for all nodes. It gives the receiving


=== EIP-7912 ===
TITLE: Pragmatic stack manipulation tools
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-03-25
REQUIRES: 

SUMMARY:
Add `SWAP17`-`SWAP24`, `DUP17` - `DUP24`, `SWAPN`, `DUPN`, and `EXCHANGE` instructions. The arbitrary depth operations must be preceded by `PUSH1` instructions defining operands.

SPECIFICATION:
Let `top - N` be the `N`th most recently pushed value on the stack, and `top - 0` be the most recent. If any

MOTIVATION:
Due to the nature of some compilers, deeper stack access is a desirable VM feature. Previous attempts either required code versioning, like the EVM

RATIONALE:
### Constant and Dynamic `SWAP`s and `DUP`s The main trade off between using the constant `SWAPXX` or `DUPXX` instructions versus the dynamic `SWAPN` or


=== EIP-663 ===
TITLE: SWAPN, DUPN and EXCHANGE instructions
TYPE: Standards Track Core
STATUS: Review
CREATED: 2017-07-03
REQUIRES: 3, 5, 4, 0, ,,  , 5, 4, 5, 0

SUMMARY:
Currently, `SWAP*` and `DUP*` instructions are limited to a stack depth of 16. Introduce three new instructions, `SWAPN`, `DUPN` and `EXCHANGE` which lift this

SPECIFICATION:
We introduce three new instructions: 1. `DUPN` (`0xe6`) 2. `SWAPN` (`0xe7`) 3. `EXCHANGE` (`0xe8`) If the code is legacy bytecode, any of these instructions

MOTIVATION:
While the stack is 1024 items deep, easy access is only possible for the top 16 items. Supporting more local variables is possible via

RATIONALE:
### Use of an immediate argument Allowing dynamic selection of the arguments to swap, dup, or exchange could be used to prevent static analysis


=== EIP-2539 ===
TITLE: BLS12-377 curve operations
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-02-26
REQUIRES: 1, 1, 0, 9, ,,  , 2, 0, 4, 6

SUMMARY:
This precompile adds operation on BLS12-377 curve (from Zexe paper) as a precompile in a set necessary to *efficiently* perform operations such as BLS

SPECIFICATION:
Curve parameters: BLS12-377 curve is fully defined by the following set of parameters (coefficient `A=0` for all BLS12 curves): ``` Base field modulus =

MOTIVATION:
Motivation of this precompile is to add a cryptographic primitive that allows to get 120+ bits of security for operations over pairing friendly curve

RATIONALE:
Motivation section covers a total motivation to have operations over BLS12-377 curve available. We also extend a rationale for move specific fine points. ###


=== EIP-2330 ===
TITLE: EXTSLOAD opcode
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-10-29
REQUIRES: 2929

SUMMARY:
This proposal adds a new opcode `EXTSLOAD` at `0x5c` which pops two items from the stack: `<account address> <storage key>` and pushes one item:

SPECIFICATION:
A new EVM instruction `EXTSLOAD (0x5c)` that works like `SLOAD (0x54)` but an additional parameter representing the contract that is to be read from.

MOTIVATION:
While any off-chain application can read all contract storage data of all contracts, this is not possible for deployed smart contracts themselves. These are

RATIONALE:
- Without this EIP, a contract can still opt-in to make their entire state public, by having a method that simply SLOADs and returns


=== EIP-6780 ===
TITLE: SELFDESTRUCT only in same transaction
TYPE: Standards Track Core
STATUS: Final
CREATED: 2023-03-25
REQUIRES: 2, 6, 8, 1, ,,  , 2, 9, 2, 9, ,,  , 3, 5, 2, 9

SUMMARY:
This EIP changes the functionality of the `SELFDESTRUCT` opcode. The new functionality will be only to send all Ether in the account to the

SPECIFICATION:
The behaviour of `SELFDESTRUCT` is changed in the following way: 1. When `SELFDESTRUCT` is executed in a transaction that is not the same as

MOTIVATION:
The `SELFDESTRUCT` opcode requires large changes to the state of an account, in particular removing all code and storage. This will not be possible

RATIONALE:
Getting rid of the `SELFDESTRUCT` opcode has been considered in the past, and there are currently no strong reasons to use it. This EIP


=== EIP-2046 ===
TITLE: Reduced gas cost for static calls made to precompiles
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-05-17
REQUIRES: 2, 1, 4, ,,  , 1, 3, 5, 2

SUMMARY:
Reduce the base gas cost of calling precompiles using `STATICCALL` from 700 to 40. This should allow more efficient use of precompiles as well

SPECIFICATION:
After block `HF` the `STATICCALL` (`0xfa`) instruction charges different basic gas cost (G<sub>call</sub> in [Yellow Paper]'s notation) depending on the destination address provided: -

MOTIVATION:
The Spurious Dragon hard fork increased the cost of calls significantly to account for loading contract code from the state without making an exception

RATIONALE:
Only the `STATICCALL` instruction was changed to reduce the impact of the change. This should not be a limiting factor, given precompiles (currently) do


=== EIP-3584 ===
TITLE: Block Access List
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-05-22
REQUIRES: 2, 9, 2, 9, ,,  , 2, 9, 3, 0

SUMMARY:
[EIP-2929](./eip-2929.md)/[EIP-2930](./eip-2930.md) centers around normalizing the (low) gas costs of data/storage accesses made by a transaction as well as providing for (and encouraging) a new

SPECIFICATION:
A block `access_list` represents: ``` Set [ AccessedAddress, List [AccessedStorageKeys] , Set [ AccessedInBlockTransactionNumber, List [ AccessedStorageKeys ]] ] ``` A **canonical** construction of

MOTIVATION:
Motivation for collating the *transaction* `access_list`s for all the transactions in a **block**’s `access_list` is to have an *access index* of the block with

RATIONALE:
### Sorting of canonical `access_list` It is specified to be sorted in lexicographic ordering or integer sorting wherever applicable and specified. Sorting with respect


=== EIP-7642 ===
TITLE: eth/69 - history expiry and simpler receipts
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2024-02-29
REQUIRES: 5793

SUMMARY:
This EIP modifies the 'eth' p2p protocol to announce the historical block range served by the node. We also simplify the handshake to remove

SPECIFICATION:
### Status message changes Modify the `Status (0x00)` message as follows: - (eth/68): `[version: P, networkid: P, td: P, blockhash: B_32, genesis: B_32, forkid]`

MOTIVATION:
### Block range in Status message In the history expiry working group, it was decided that clients may drop pre-merge history from their storage

RATIONALE:
### Status changes After the merge, the `TD` field of the `Status` message became meaningless since the difficulty of post-merge blocks are 0. It


=== EIP-2159 ===
TITLE: Common Prometheus Metrics Names for Clients
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2019-07-01
REQUIRES: 

SUMMARY:
Many Ethereum clients expose a range of metrics in a format compatible with Prometheus to allow operators to monitor the client's behaviour and performance

SPECIFICATION:
The table below defines metrics which may be captured by Ethereum clients which expose metrics to Prometheus. Clients may expose additional metrics however these

MOTIVATION:
Using common names and meanings for metrics which apply to all clients allows node operators to monitor clusters of nodes using heterogeneous clients using

RATIONALE:
The defined metrics are independent of Ethereum client implementation but provide sufficient information to create an overview dashboard to support monitoring a group of


=== EIP-4760 ===
TITLE: SELFDESTRUCT bomb
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-02-03
REQUIRES: 

SUMMARY:
This EIP renames the `SELFDESCRUCT` opcode to `SENDALL`, and replaces its functionality. The new functionality will be only to send all Ether in the

SPECIFICATION:
### Constants | Name | Value | Comment | |------|-------|---------| | `OLD_SELFDESTRUCT_COST` | 5000 | Current gas cost of `SELFDESTRUCT` opcode | | `HARD_FORK_BLOCK`

MOTIVATION:
The `SELFDESTRUCT` opcode requires large changes to the state of an account, in particular removing all code and storage. This will not be possible

RATIONALE:
The idea behind this EIP is to disable `SELFDESTRUCT` in a way that gives ample warning to Dapp developers. Many developers do not watch


=== EIP-2070 ===
TITLE: Hardfork Meta: Berlin
TYPE: Meta 
STATUS: Withdrawn
CREATED: 2019-05-20
REQUIRES: 1679

SUMMARY:
This meta-EIP specifies the changes included in the Ethereum hardfork named Berlin.

SPECIFICATION:
- Codename: Berlin In the current stage of coordination, the changes are tracked and discussed in the [eth1.0-specs](https://github.com/ethereum/eth1.0-specs) repository. For an accurate status please


=== EIP-1930 ===
TITLE: CALLs with strict gas semantic. Revert if not enough gas available.
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-04-10
REQUIRES: 

SUMMARY:
The current CALL, DELEGATE_CALL, STATIC_CALL opcode do not enforce the gas being sent, they simply consider the gas value as a maximum. This pose

SPECIFICATION:
There are 2 possibilities a) one is to add opcode variant that have a stricter gas semantic b) The other is to consider a

RATIONALE:
Currently the gas specified as part of these opcodes is simply a maximum value. And due to the behavior of [EIP-150](./eip-150.md) it is possible


=== EIP-7922 ===
TITLE: Dynamic exit queue rate limit
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-03-24
REQUIRES: 

SUMMARY:
This EIP proposes updating Ethereum's validator exit churn calculation by dynamically adjusting the churn limit at the start of each 256-epoch period ("generation") based

SPECIFICATION:
Since the validator exit process is complex, we start with the stack trace and a verbal description of the end-to-end process in Electra. 1.

MOTIVATION:
Ethereum currently implements a fixed, rate-limited queue for validator exits to ensure the security and stability of the network. The exit queue ensures the

RATIONALE:
As we described earlier, by computing unused churn from the previous 14 generations, the churn limit dynamically responds to actual validator behavior. This mechanism:


=== EIP-2831 ===
TITLE: Transaction Replacement Message Type
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2020-07-26
REQUIRES: 1193

SUMMARY:
The current communication between providers and consumers of providers are fundamentally broken in the event that a transaction in the mempool has been superseded

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
Exert from EIP-1193 > A common convention in the Ethereum web application ("dapp") ecosystem is for key management software ("wallets") to expose their API

RATIONALE:
The implementation was chosen to help the ease of implementation for both providers and dapp developers. Since `ProviderMessage` is widely used by dapp developers


=== EIP-1102 ===
TITLE: Opt-in account exposure
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2018-05-04
REQUIRES: 1474

SUMMARY:
The previous generation of Ethereum-enabled DOM environments follows a pattern of injecting a provider populated with accounts without user consent. This puts users of

SPECIFICATION:
### Concepts #### RFC-2119 The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document

RATIONALE:
The pattern of automatic account exposure followed by the previous generation of Ethereum-enabled DOM environments fails to protect user privacy and fails to maintain


=== EIP-160 ===
TITLE: EXP cost increase
TYPE: Standards Track Core
STATUS: Final
CREATED: 2016-10-20
REQUIRES: 

SPECIFICATION:
If `block.number >= FORK_BLKNUM`, increase the gas cost of EXP from 10 + 10 per byte in the exponent to 10 + 50 per

RATIONALE:
Benchmarks suggest that EXP is currently underpriced by a factor of about 4–8. ### References 1. EIP-160 issue and discussion: https://github.com/ethereum/EIPs/issues/160


=== EIP-858 ===
TITLE: Reduce block reward and delay difficulty bomb
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-01-29
REQUIRES: 

SUMMARY:
The current public Ethereum network has a hashrate that corresponds to a tremendous level of energy consumption. As this energy consumption has a correlated

SPECIFICATION:
Delay difficulty bomb by 2,000,000 blocks Adjust block, uncle, and nephew rewards to reflect a new block reward of 1 ETH.

MOTIVATION:
The current public Ethereum network has a hashrate of 296 TH/s. This hashrate corresponds to a power usage of roughly [1 TW](../assets/eip-858/calculations.md) and yearly

RATIONALE:
This will delay the difficulty bomb by roughly a year. The difficulty bomb remains a community supported mechanism to aid a future transition to


=== EIP-2 ===
TITLE: Homestead Hard-fork Changes
TYPE: Standards Track Core
STATUS: Final
CREATED: 2015-11-15
REQUIRES: 


=== EIP-6888 ===
TITLE: Arithmetic verification at EVM level
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-04-16
REQUIRES: 

SUMMARY:
This EIP adds arithmetics checks to EVM arithmetic and a new opcode jump conditionally if there were events. The list of check includes overflows,

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The importance of math checks in smart contract projects is very clear. It was an OpenZeppelin library and then incorporated in Solidity's default behavior.

RATIONALE:
EVM uses two's complement for negative numbers. The opcodes listed above triggers one or two flags depending if they are used for signed and


=== EIP-1588 ===
TITLE: Hardfork Meta: Ethereum ProgPoW
TYPE: Meta 
STATUS: Stagnant
CREATED: 2018-11-16
REQUIRES: 1057

SUMMARY:
This meta-EIP specifies the changes included in the alternative Ethereum hardfork named Ethereum ProgPoW.

SPECIFICATION:
- Codename: Ethereum ProgPoW - Aliases: N/A - Activation: - `Block >= 7280000` on the Ethereum mainnet - Included EIPs: - [EIP-1057](./eip-1057.md): ProgPoW, a


=== EIP-3403 ===
TITLE: Partial removal of refunds
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-03-16
REQUIRES: 

SPECIFICATION:
### Parameters | Constant | Value | | - | - | | `FORK_BLOCK` | TBD | | `SSTORE_REFUND_GAS` | 19000 | For blocks

MOTIVATION:
Gas refunds for SSTORE and SELFDESTRUCT were originally introduced to motivate application developers to write applications that practice "good state hygiene", clearing storage slots

RATIONALE:
Preserving refunds in the `new = original = 0 != current` case ensures that a few key use cases that deserve favorable gas cost


=== EIP-1474 ===
TITLE: Remote procedure call specification
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2018-10-02
REQUIRES: 

SUMMARY:
Nodes created by the current generation of Ethereum clients expose inconsistent and incompatible remote procedure call (RPC) methods because no formal Ethereum RPC specification

SPECIFICATION:
### Concepts #### RFC-2119 The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document

RATIONALE:
Much of Ethereum's effectiveness as an enterprise-grade application platform depends on its ability to provide a reliable and predictable developer experience. Nodes created by


=== EIP-4399 ===
TITLE: Supplant DIFFICULTY opcode with PREVRANDAO
TYPE: Standards Track Core
STATUS: Final
CREATED: 2021-10-30
REQUIRES: 3675

SUMMARY:
This EIP supplants the semantics of the return value of existing `DIFFICULTY (0x44)` opcode and renames the opcode to `PREVRANDAO (0x44)`. The return value

SPECIFICATION:
### Definitions * **`TRANSITION_BLOCK`** The definition of this block can be found in the Definitions section of [EIP-3675](./eip-3675.md#definitions). ### Block structure Beginning with `TRANSITION_BLOCK`,

MOTIVATION:
Applications may benefit from using the randomness accumulated by the beacon chain. Thus, randomness outputs produced by the beacon chain should be accessible in

RATIONALE:
### Including RANDAO output in the block header Including a RANDAO output in the block header provides a straightforward method of accessing it from


=== EIP-150 ===
TITLE: Gas cost changes for IO-heavy operations
TYPE: Standards Track Core
STATUS: Final
CREATED: 2016-09-24
REQUIRES: 

SPECIFICATION:
If `block.number >= FORK_BLKNUM`, then: - Increase the gas cost of EXTCODESIZE to 700 (from 20). - Increase the base gas cost of EXTCODECOPY

RATIONALE:
Recent denial-of-service attacks have shown that opcodes that read the state tree are under-priced relative to other opcodes. There are software changes that have


=== EIP-1767 ===
TITLE: GraphQL interface to Ethereum node data
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2019-02-14
REQUIRES: 

SUMMARY:
This EIP specifies a GraphQL schema for accessing data stored on an Ethereum node. It aims to provide a complete replacement to the read-only

SPECIFICATION:
### Node API Compatible nodes MUST provide a GraphQL endpoint available over HTTP. This SHOULD be offered on port 8547 by default. The path

MOTIVATION:
The current JSON-RPC interface for Ethereum nodes has a number of shortcomings. It's informally and incompletely specified in areas, which has led to incompatibilities

RATIONALE:
Ethereum nodes have been moving away from providing read-write functionality such as transaction and message signing, and from other services such as code compilation,


=== EIP-7686 ===
TITLE: Linear EVM memory limits
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-04-15
REQUIRES: 

SUMMARY:
Add a hard memory limit equal to the gas limit of the current context. Make the maximum gas cost of a sub-call depend on

SPECIFICATION:
Change `memory_cost` from: ```python memory_size_word = (memory_byte_size + 31) / 32 memory_cost = (memory_size_word ** 2) / 512 + (3 * memory_size_word) ``` To:

MOTIVATION:
Today, memory pricing rules are complicated: we have the quadratic cost for expanding memory as well as the 63/64 rule for how much gas

RATIONALE:
With this EIP, there is a simple EVM implementation that can process an N-gas call using an N-byte bytearray as memory: allocate all bytes


=== EIP-3238 ===
TITLE: Difficulty Bomb Delay to Q2/2022
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-01-25
REQUIRES: 

SUMMARY:
Starting with `FORK_BLOCK_NUMBER` the client will calculate the difficulty based on a fake block number suggesting to the client that the difficulty bomb is

SPECIFICATION:
#### Relax Difficulty with Fake Block Number For the purposes of `calc_difficulty`, simply replace the use of `block.number`, as used in the exponential ice

MOTIVATION:
Even after the Ethereum 2.0 mainnet launch, Ethash proof-of-work mining on the legacy chain should be feasible. It should allow miners sealing new blocks

RATIONALE:
This will delay the ice age by another ~26 million seconds (approximately ~9.89 months), so the chain would be back at ~30 second block


=== EIP-2045 ===
TITLE: Particle gas costs for EVM opcodes
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-05-17
REQUIRES: 

SUMMARY:
According to recent benchmarks, EVM opcodes for computation (`ADD`, `SUB`, `MUL`, etc.) are generally overpriced relative to opcodes for storage I/O (`SLOAD`, `SSTORE`, etc.).

SPECIFICATION:
A new gas counter `particlesUsed` is added to the EVM, in addition to the existing gas counter `gasUsed`. The unit 1 gas is equal

MOTIVATION:
The transaction capacity of an Ethereum block is determined by the gas cost of transactions relative to the block gas limit. One way to

RATIONALE:
Adoption of fractional gas costs should only be an implementation detail inside the EVM, and not alter the current user experience around transaction gas


=== EIP-7843 ===
TITLE: SLOTNUM opcode
TYPE: Standards Track Core
STATUS: Review
CREATED: 2024-12-06
REQUIRES: 

SUMMARY:
This EIP proposes to add a new opcode `SLOTNUM` (`0x4b`), that returns the corresponding slot number for the current block.

SPECIFICATION:
A new opcode `SLOTNUM` is introduced at `0x4b`. It shall return one stack element. ### Output One element `SlotNumber` is added to the stack;

MOTIVATION:
There are currently two ways to get the current slot number onchain: 1) Calculate from the block timestamp. This requires hardcoding the chain slot

RATIONALE:
### Gas Price The opcode is priced to match similar opcodes in the `W_base` set. ### Calculation in consensus layer The slot number could


=== EIP-2935 ===
TITLE: Serve historical block hashes from state
TYPE: Standards Track Core
STATUS: Final
CREATED: 2020-09-03
REQUIRES: 

SUMMARY:
Store last `HISTORY_SERVE_WINDOW` historical block hashes in the storage of a system contract as part of the block processing logic. Furthermore this EIP has

SPECIFICATION:
| Parameter | Value | | - | - | | `BLOCKHASH_SERVE_WINDOW` | `256` | | `HISTORY_SERVE_WINDOW` | `8191` | | `SYSTEM_ADDRESS` | `0xfffffffffffffffffffffffffffffffffffffffe`

MOTIVATION:
EVM implicitly assumes the client has the recent block (hashes) at hand. This assumption is not future-proof given the prospect of stateless clients. Including

RATIONALE:
Very similar ideas were proposed before. This EIP is a simplification, removing two sources of needless complexity: 1. Having a tree-like structure with multiple


=== EIP-7907 ===
TITLE: Meter Contract Code Size And Increase Limit
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-03-14
REQUIRES: 1, 7, 0, ,,  , 2, 9, 2, 9, ,,  , 3, 8, 6, 0, ,,  , 7, 7, 0, 2

SUMMARY:
This EIP substantially increases the contract code size limit from 24KB (24576 bytes) introduced in [EIP-170](./eip-170.md) to 48KB (49152 bytes), and adds gas metering.

SPECIFICATION:
### Definitions | Name | Value | Description | | --- | --- | --- | | COLD_SLOAD_COST | `2100` | The cost charged

MOTIVATION:
EIP-170 introduced a 24KB contract code size limit to prevent potential DoS attacks, as large contract code requires O(n) resource cost in terms of

RATIONALE:
The gas cost of 4 per word was chosen in-line with the per word code defined by [EIP-2929](./eip-2929.md)'s `COLD_ACCOUNT_ACCESS_COST`. The value is derived from


=== EIP-7791 ===
TITLE: GAS2ETH opcode
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-08-13
REQUIRES: 2929

SUMMARY:
This EIP introduces a new `GAS2ETH` opcode that enables the direct conversion of gas into ether (ETH).

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
This EIP is based on the premise that smart contract authors, compiler teams and public goods projects in general should be compensated for their

RATIONALE:
- `GAS2ETH` vs. pro-rata: The pro-rata model incentivizes inflating contract gas usage to artificially increase fees. In contrast, this proposal allows contract authors to


=== EIP-1186 ===
TITLE: RPC-Method to get Merkle Proofs - eth_getProof
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2018-06-24
REQUIRES: 1474

SUMMARY:
Ethereum uses a [Merkle Tree](https://github.com/ethereum/eth-wiki/blob/master/fundamentals/patricia-tree.md) to store the state of accounts and their storage. This allows verification of each value by simply creating a

SPECIFICATION:
As Part of the eth-Module, an additional Method called `eth_getProof` should be defined as follows: #### eth_getProof Returns the account- and storage-values of the

MOTIVATION:
In order to create a MerkleProof access to the full state db is required. The current RPC-Methods allow an application to access single values

RATIONALE:
This one Method actually returns 3 different important data points: 1. The 4 fields of an account-object as specified in the yellow paper `[nonce,


=== EIP-5450 ===
TITLE: EOF - Stack Validation
TYPE: Standards Track Core
STATUS: Review
CREATED: 2022-08-12
REQUIRES: 3, 5, 4, 0, ,,  , 3, 6, 7, 0, ,,  , 4, 2, 0, 0, ,,  , 4, 7, 5, 0

SUMMARY:
Introduce extended validation of EOF code sections to guarantee that neither stack underflow nor overflow can happen during execution of validated contracts.

SPECIFICATION:
### Code validation *Remark:* We rely on the notions of *operand stack* and *type section* as defined by [EIP-4750](./eip-4750.md). Each code section is validated

MOTIVATION:
The current EVM performs a number of validity checks for each executed instruction, such as checking for instruction being defined, stack overflow and underflow,

RATIONALE:
### Properties of validated code Any code section validated according to operand stack validation has the following properties: 1. There are no unreachable instructions


=== EIP-4736 ===
TITLE: Consensus Layer Withdrawal Protection
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2022-01-30
REQUIRES: 

SUMMARY:
If a consensus layer mnemonic phrase is compromised, it is impossible for the consensus layer network to differentiate the legitimate holder of the key

SPECIFICATION:
The Consensus Layer `BLSToExecutionChange` operation has the following fields: * Validator index * Current withdrawal BLS public key * Proposed execution layer withdrawal address

MOTIVATION:
The consensus layer `BLSToExecutionChange` message is secure for a single user who has certainty their keys and mnemonic have not been compromised. However, as

RATIONALE:
This proposal is intended to protect legitimate validator mnemonic holders where it was knowingly or unknowingly compromised. As there is no safe way to


=== EIP-3045 ===
TITLE: Adds `baseFee` to `eth_getUncleByBlockHashAndIndex`
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2020-10-14
REQUIRES: 1, 4, 7, 4, ,,  , 1, 5, 5, 9

SUMMARY:
Adds `baseFee` property to the `eth_getUncleByBlockHashAndIndex` JSON-RPC request `result` object. This property will contain the value of the base fee for any block after

SPECIFICATION:
### `eth_getUncleByBlockHashAndIndex` #### Description Returns information about an uncle specified by block hash and uncle index position Every block returned by this endpoint whose

MOTIVATION:
[EIP-1559](./eip-1559.md) introduces a base fee per gas in protocol. This value is maintained under consensus as a new field in the block header structure.

RATIONALE:
The addition of a single parameter instead of introducing a whole new endpoint was the simplest change that would be easiest to get integrated.


=== EIP-6404 ===
TITLE: SSZ transactions
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2023-01-30
REQUIRES: 1, 5, 5, ,,  , 1, 5, 5, 9, ,,  , 2, 7, 1, 8, ,,  , 2, 9, 3, 0, ,,  , 4, 8, 4, 4, ,,  , 7, 4, 9, 5, ,,  , 7, 7, 0, 2, ,,  , 7, 9, 1, 6

SUMMARY:
This EIP defines a migration process of [EIP-2718](./eip-2718.md) Recursive-Length Prefix (RLP) transactions to [Simple Serialize (SSZ)](https://github.com/ethereum/consensus-specs/blob/b5c3b619887c7850a8c1d3540b471092be73ad84/ssz/simple-serialize.md).

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
RLP transactions have a number of shortcomings: 1. **Linear hashing:** The signing hash (`sig_hash`) and unique identifier (`tx_hash`) of an RLP transaction are computed

RATIONALE:
### Forward compatibility The proposed transaction design is extensible with new fee types, new signature types, and entirely new transaction features (e.g., CREATE2), while


=== EIP-2481 ===
TITLE: eth/66 request identifier
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2020-01-17
REQUIRES: 2464

SUMMARY:
The `eth` protocol defines various request and response commands that are used to exchange data between Ethereum nodes. For example, to ask a peer

SPECIFICATION:
Change the following message types in the `eth` protocol: * `GetBlockHeaders (0x03)` * **Current (eth/65):** `[block: {P, B_32}, maxHeaders: P, skip: P, reverse: P

MOTIVATION:
The lack of request identifiers in the request / response paris of the `eth` protocol puts unnecessary burden of code complexity into every Ethereum

RATIONALE:
**Q: The efficiency gains might encourage clients to flood their peers with too many simultaneous requests** Peers can always throttle or disconnect if they


=== EIP-7923 ===
TITLE: Linear, Page-Based Memory Costing
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-03-27
REQUIRES: 

SUMMARY:
This EIP replaces the quadratic memory model in the EVM with a linear, page-based costing model. Memory is virtually addressable. Page allocation and page

SPECIFICATION:
Consider the following constants: ```python ALLOCATE_PAGE_COST = 100 THRASH_PAGE_COST = 6 LRU_SIZE = 512 PAGE_SIZE = 4096 MAXIMUM_MEMORY_SIZE = 64 * 1024 * 1024

MOTIVATION:
The EVM currently uses a quadratic pricing model for its memory. This was originally put in place to defend against DoS attacks. However, the

RATIONALE:
Benchmarks were performed on a 2019-era CPU, with the ability to `keccak256` around 256MB/s, giving it a gas-to-ns ratio of 20 ns per 1


=== EIP-7950 ===
TITLE: Encode chain id with transaction hash
TYPE: Standards Track Interface
STATUS: Review
CREATED: 2025-05-22
REQUIRES: 155

SUMMARY:
This standard proposes a way to encode the combination of a chain ID and a transaction hash into one string.

SPECIFICATION:
The encoded string has three components: - A chain ID, denoted as `chainId`. The used chain id MUST be based on [EIP-155](./eip-155) and the

MOTIVATION:
Looking up a transaction by its hash always requires the context of the chain - a transaction hash alone is not enough to identify

RATIONALE:
The chain ID is the most important detail when routing queries based on this standard and is therefore the first element in the string.


=== EIP-7519 ===
TITLE: Atomic Storage Operations SCREDIT and SDEBIT
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2023-09-16
REQUIRES: 2, 2, 0, 0, ,,  , 2, 9, 2, 9

SUMMARY:
Two new opcodes that atomically mutate smart contract storage are proposed: SCREDIT, which increments a storage slot by a specified value, and SDEBIT, which

SPECIFICATION:
Two operations to atomically increment and decrement a storage will be introduced at `0xTBD`. Each operation takes two stack arguments and has no immediate

MOTIVATION:
There has been a large amount of energy around parallel EVMs across multiple chains, however there is a lack of parallel primitives within the

RATIONALE:
The primary consideration when choosing between alternatives is that the primary intended audiences is token contracts and other asset-tracking contracts combined with a desire


=== EIP-2464 ===
TITLE: eth/65: transaction announcements and retrievals
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2020-01-13
REQUIRES: 2364

SUMMARY:
This EIP introduces three additional message types into the `eth` protocol (releasing a new version, `eth/65`): `NewPooledTransactionHashes (0x08)` to announce a set of transactions

SPECIFICATION:
Add three new message types to the `eth` protocol: * `NewPooledTransactionHashes (0x08): [hash_0: B_32, hash_1: B_32, ...]` * Specify one or more transactions that

MOTIVATION:
The `eth` network protocol has two ways to propagate a newly mined block: it can be broadcast to a peer in its entirety (via

RATIONALE:
**Q: Why limit `GetPooledTransactions (0x09)` to retrieving items from the pool?** Apart from the transaction pool, transactions in Ethereum are always bundled together by


=== EIP-141 ===
TITLE: Designated invalid EVM instruction
TYPE: Standards Track Core
STATUS: Final
CREATED: 2017-02-09
REQUIRES: 

SUMMARY:
An instruction is designated to remain as an invalid instruction.

SPECIFICATION:
The opcode `0xfe` is the `INVALID` instruction. It can be used to abort the execution (i.e. duplicates as an `ABORT` instruction).

MOTIVATION:
The invalid instruction can be used as a distinct reason to abort execution.


=== EIP-3326 ===
TITLE: Wallet Switch Ethereum Chain RPC Method (`wallet_switchEthereumChain`)
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2021-03-04
REQUIRES: 1, 5, 5, ,,  , 6, 9, 5

SUMMARY:
The `wallet_switchEthereumChain` RPC method allows Ethereum applications ("dapps") to request that the wallet switches its active Ethereum chain, if the wallet has a concept

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
All dapps require the user to interact with one or more Ethereum chains in order to function. Some wallets only supports interacting with one

RATIONALE:
The purpose `wallet_switchEthereumChain` is to provide dapps with a way of requesting to switch the wallet's active chain, which they would otherwise have to


=== EIP-7039 ===
TITLE: Scheme-Handler Discovery Option for Wallets
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2023-05-15
REQUIRES: 1193

SUMMARY:
This proposal (affectionately known as SHADOW) is an alternative to [EIP-1193](./eip-1193.md) for wallet discovery in web browsers that requires no special permissions. Web pages

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Current wallet discovery methods (eg. `window.ethereum`) only support one active wallet at a time, and require browser extensions to request broad permissions to modify

RATIONALE:
Instead of directly using the `iframe.contentWindow`'s message port, SHADOW transfers a message port in the first message. This allows the `iframe`, in some specific


=== EIP-706 ===
TITLE: DEVp2p snappy compression
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2017-09-07
REQUIRES: 

SUMMARY:
The base networking protocol (DEVp2p) used by Ethereum currently does not employ any form of compression. This results in a massive amount of bandwidth

SPECIFICATION:
Bump the advertised DEVp2p version number from `4` to `5`. If during handshake, the remote side advertises support only for version `4`, run the

MOTIVATION:
Synchronizing the Ethereum main network (block 4,248,000) in Geth using fast sync currently consumes 1.01GB upload and 33.59GB download bandwidth. On the Rinkeby test


=== EIP-6789 ===
TITLE: Rename gas to mana
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2023-03-27
REQUIRES: 

SUMMARY:
This EIP suggests renaming `gas` to `mana`, as proposed by Vitalik Buterin in 2015.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The underlying motivation for reviving Vitalik's original proposal from 2015 is that we have finally arrived at the age of Proof-of-Stake, and given the

RATIONALE:
- `mana` reflects the increased environmental friendliness of Proof-of-Stake; - `mana` is generally understood to be ephemeral and non-transferable, which better represents the concept


=== EIP-1959 ===
TITLE: New Opcode to check if a chainID is part of the history of chainIDs
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-04-20
REQUIRES: 155

SUMMARY:
This EIP adds an opcode that returns whether the specific number passed in has been a valid chainID (EIP-155 unique identifier) in the history

SPECIFICATION:
Adds a new opcode ```VALID_CHAINID``` at 0x46, which uses 1 stack argument : a 32 bytes value that represent the chainID to test. It

MOTIVATION:
[EIP-155](./eip-155.md) proposes to use the chain ID to prevent replay attacks between different chains. It would be a great benefit to have the same

RATIONALE:
The only approach available today is to specify the chain ID at compile time. Using this approach will result in problems after a contentious


=== EIP-107 ===
TITLE: safe "eth_sendTransaction" authorization via html popup
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2016-06-05
REQUIRES: 

SUMMARY:
This draft EIP describes the details of an authorization method that if provided by rpc enabled ethereum nodes would allow regular websites to send

SPECIFICATION:
In order for the mechanism to work, the node needs to serve an html file via http at the url \<node url\>/authorization.html This file

MOTIVATION:
Currently, if a user navigates to a dapp running on a website using her/his everyday browser, the dapp will by default have no access

RATIONALE:
The design for that proposal was chosen for its simplicity and security. A previous idea was to use an oauth-like protocol in order for


=== EIP-1418 ===
TITLE: Blockchain Storage Rent Payment
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-09-16
REQUIRES: 1559

SUMMARY:
At each block, deduct an amount of value ("rent") from every account based on the quantity of storage used by that account.

SPECIFICATION:
**Updated transaction type** A new transaction type is introduced. Whereas [EIP-1559](./eip-1559.md) introduced warm access for contract state, this new type introduces warm access for

MOTIVATION:
Ethereum is a public utility and we are underpricing the long-term costs of storage. Storage cost can be approximately modeled as bytes × time.


=== EIP-3198 ===
TITLE: BASEFEE opcode
TYPE: Standards Track Core
STATUS: Final
CREATED: 2021-01-13
REQUIRES: 1559

SUMMARY:
Add a `BASEFEE (0x48)` that returns the value of the base fee of the current block it is executing in.

SPECIFICATION:
Add a `BASEFEE` opcode at `(0x48)`, with gas cost `G_base`. | Op | Input | Output | Cost | |:----: |:-----: |:------: |:----: |

MOTIVATION:
The intended use case would be for contracts to get the value of the base fee. This feature would enable or improve existing use

RATIONALE:
### Gas cost The value of the base fee is needed to process transactions. That means it's value is already available before running the


=== EIP-698 ===
TITLE: OPCODE 0x46 BLOCKREWARD
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2017-08-28
REQUIRES: 

SUMMARY:
In the EVM, the 0x40 opcodes are reserved for `Block Information`. Currently reserved opcodes are: * `0X40 BLOCKHASH` * `0X41 COINBASE` * `0X42 TIMESTAMP`

SPECIFICATION:
After block `n` all clients should process opcode `0x46` as follows: * Value: `0x46` * Mnemonic: `BLOCKREWARD` * δ:` 0` nothing removed from stack

MOTIVATION:
Per EIP-649 ( #669 ) periodic block reward reductions/variance are now planned in the roadmap, however, this EIP is consensus system agnostic and is

RATIONALE:
### Contract Mining Pools For distributed consensus systems(staking pools and mining pools) ad hoc groups combine resources in order to reduce variance in payouts.


=== EIP-5 ===
TITLE: Gas Usage for `RETURN` and `CALL*`
TYPE: Standards Track Core
STATUS: Final
CREATED: 2015-11-22
REQUIRES: 

SUMMARY:
This EIP makes it possible to call functions that return strings and other dynamically-sized arrays. Currently, when another contract / function is called from

SPECIFICATION:
The gas and memory semantics for `CALL`, `CALLCODE` and `DELEGATECALL` (called later as `CALL*`) are changed in the following way (`CREATE` does not write

MOTIVATION:
In general, it is good practice to reserve a certain memory area for the output of a call, because letting a subroutine write to

RATIONALE:
This way of dealing with the problem requires a minimal change to the Ethereum Virtual Machine. Other means of achieving a similar goal would


=== EIP-7954 ===
TITLE: Increase Maximum Contract Size
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-06-09
REQUIRES: 1, 7, 0, ,,  , 3, 8, 6, 0

SUMMARY:
This EIP proposes to raise the maximum allowed size for contract code deployed on Ethereum from 24,576 bytes to 32,768 bytes.

SPECIFICATION:
1. Update the [EIP-170](./eip-170.md) contract code size limit of 24KiB (`0x6000` bytes) to 32KiB (`0x8000` bytes). 2. Update the [EIP-3860](./eip-3860.md) initcode size limit of

MOTIVATION:
The current 24KiB contract size limit can be restrictive for complex contracts and applications. Increasing the limit to 32KiB allows for more feature-rich contracts

RATIONALE:
- **Developer Flexibility:** Enables more complex contracts and features. - **Backward Compatibility:** Existing contracts are unaffected. - **Simplicity:** Only the size limit is changed,


=== EIP-6914 ===
TITLE: Reuse Withdrawn Validator Indices
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-04-19
REQUIRES: 

SUMMARY:
Reuse fully withdrawn validator indices after a sufficient safe-to-reuse period has passed to eliminate the unbounded growth of the beacon chain validator list as

SPECIFICATION:
### Consensus Layer The configuration values and mechanics of the specification can be found in the [Consensus Layer specs](https://github.com/ethereum/consensus-specs/blob/1a38b83e5db8638ee01c9461cccf11e7d8a3ebce/specs/_features/eip6914). Note that validator indices are

MOTIVATION:
The beacon chain maintains a list of validators and a separate list of balances associated with each validator. When a new deposit for a

RATIONALE:
The `validators` and `balances` lists are currently appended to each time a new Deposit for a new pubkey comes into the beacon chain. Due


=== EIP-6873 ===
TITLE: Preimage retention
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-04-14
REQUIRES: 

SUMMARY:
Enforce preimage collection by every node on the network from the fork preceding the verge, up to the fork. This is needed in case

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

RATIONALE:
Switching to verkle trees require a complete rehashing of all tree keys. Most execution clients store all keys hashed, without their preimages, which as


=== EIP-7643 ===
TITLE: History accumulator for pre-PoS data
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-02-29
REQUIRES: 

SUMMARY:
Defines an SSZ object for accumulating all pre-PoS data and commit to the historical hashes accumulator's root `0xec8e040fd6c557b41ca8ddd38f7e9d58a9281918dc92bdb72342a38fb085e701`.

SPECIFICATION:
### Historical Hashes Accumulator The historical hashes accumulator commits to the set of pre-merge headers and their associated total difficulty. The format for this

MOTIVATION:
There are two main uses we consider for the historical hashes accumulator: * for users who wish to download the pre-PoS data for the

RATIONALE:
### Inclusion of total difficulty The total difficulty allowed so that clients may return the value for specific JSON-RPC methods which support it. It


=== EIP-1470 ===
TITLE: Smart Contract Weakness Classification (SWC)
TYPE: Informational 
STATUS: Stagnant
CREATED: 2018-09-18
REQUIRES: 

SUMMARY:
The SWC is a smart contract specific software weakness classification scheme for developers, tool vendors and security practitioners. The SWC is loosely aligned to

SPECIFICATION:
Before discussing the SWC specification it is important to describe the terminology used: - Weakness: A software error or mistake that in the right

MOTIVATION:
In the software security industry, it is a widely accepted practice to use a common terminology and to classify security related bugs and errors


=== EIP-7960 ===
TITLE: EOF - Extended types section
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-05-28
REQUIRES: 3540

SUMMARY:
This EIP extends the definition of `types_section` in EOF format ([EIP-3540](./eip-3540.md)) with an additional `type` parameter.

SPECIFICATION:
`types_section`, as defined in EIP-3540, is changed to be of the following format `(type, reserved, inputs, outputs, max_stack_increase)`. `type` is `uint8`, `reserved` is 24

MOTIVATION:
An additional `type` parameter allows the EOF EVM interpreter to identify the "type" of a code section. This allows the interpreter to "interpret" each

RATIONALE:
The new `type` parameter allows a contract to "dispatch" to different variants of the interpreter to better suit its need. * The portion of


=== EIP-170 ===
TITLE: Contract code size limit
TYPE: Standards Track Core
STATUS: Final
CREATED: 2016-11-04
REQUIRES: 

SPECIFICATION:
If `block.number >= FORK_BLKNUM`, then if contract creation initialization returns data with length of **more than** `MAX_CODE_SIZE` bytes, contract creation fails with an out

RATIONALE:
Currently, there remains one slight quadratic vulnerability in Ethereum: when a contract is called, even though the call takes a constant amount of gas,


=== EIP-2327 ===
TITLE: BEGINDATA opcode
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-10-28
REQUIRES: 

SUMMARY:
It is common for smart contracts to efficiently store data directly in the contract bytecode. Examples include constructor arguments, constant variables, compiler metadata and

SPECIFICATION:
While computing the valid `JUMPDEST`s of a contract, halt analysis once the first `BEGINDATA` is encountered. In other words: A jump to any codelocation

MOTIVATION:
The `BEGINDATA` opcode has been suggested before as part of the EIP `Subroutines and Static Jumps for the EVM` [EIP-615](./eip-615.md) as a way to

RATIONALE:
The byte `0xb6` was chosen to align with [EIP-615](./eip-615.md). The choice to `STOP` if `BEGINDATA` is encountered is somewhat arbitrary. An alternative would be


=== EIP-2025 ===
TITLE: Block Rewards Proposal for funding Eth1.x
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2019-04-20
REQUIRES: 1890

SUMMARY:
This EIP extends the mechanism established in EIP-1890 to add `0.0055 ETH` to the block reward for a specific distribution period of `3,100,000 BLOCKS`(≈

SPECIFICATION:
Two constants will be introduced: - `REWARD_DURATION_IN_BLOCKS`, which specifies the number of blocks after `ISTANBUL_BLOCK_HEIGHT` when the reward collection will terminate (i.e., at block

MOTIVATION:
The context for this proposal came from attending the [Core Dev Eth1.X Meeting](https://www.youtube.com/watch?v=Au1Qll-86v0) in Berlin. Development is needed to move Eth1.X forward, and I

RATIONALE:
There has been great public debate concerning EIP-1890, and one of the primary concerns is that it is difficult to evaluate the proposal without


=== EIP-2228 ===
TITLE: Canonicalize the name of network ID 1 and chain ID 1
TYPE: Informational 
STATUS: Final
CREATED: 2019-08-04
REQUIRES: 

SUMMARY:
The name for the Ethereum network with network ID 1 and chain ID 1 shall be Ethereum Mainnet or just Mainnet. This is a

SPECIFICATION:
The network name for network ID 1 and chain ID 1 shall be Ethereum Mainnet, or just Mainnet if the context is known to

MOTIVATION:
The Ethereum network with network ID 1 and chain ID 1 is referenced using several conflicting names across EIPs, client implementations, and information published

RATIONALE:
Choosing common word use promotes interoperability of implementations and increases customer awareness. Also, it adds a sense of professionalism when customers see the same


=== EIP-3267 ===
TITLE: Giving Ethereum fees to Future Salaries
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-02-13
REQUIRES: 

SUMMARY:
Transfer a part (exact fractions - TBD) of mining/transfer fees + (probably: TBD) some minted ETH to the `DonateETH` contract configured to transfer to

SPECIFICATION:
(TBD) `SalaryWithDAO` = `TBD` (`address`) `DefaultDAOInterface` = `TBD` (`address`) `MintPerPeriod` = `TBD` (`uint256`) `TransferFraction` = `TBD` (0..1) `MineFraction` = `TBD` (0..1) [The contract's source](../assets/eip-3267/contracts/README.md)

MOTIVATION:
This proposal solves two problems at once: 1. It provides a big amount of "money" to common good producers. That obviously personally benefits common

RATIONALE:
The Future Salaries is the _only_ known system of distributing significant funds to common good producers. (Quadratic funding aimed to do a similar thing,


=== EIP-7917 ===
TITLE: Deterministic proposer lookahead
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-03-24
REQUIRES: 

SUMMARY:
At the start of each epoch, pre-calculate and store in the `beacon_state` a deterministic `proposer_lookahead` for the next `MIN_SEED_LOOKAHEAD + 1` epochs.

SPECIFICATION:
The `BeaconState` container is extended with a `proposer_lookahead` field, which is a vector of validator indices covering the full visible lookahead period, starting from

MOTIVATION:
Unlike RANDAO seeds, which have a deterministic lookahead of at least `MIN_SEED_LOOKAHEAD == 1` epochs, the beacon proposer schedule of epoch `N + 1`

RATIONALE:
### Considered Alternatives An alternative approach would be to cache the effective balances at the start of epoch `N` so it can be used


=== EIP-197 ===
TITLE: Precompiled contracts for optimal ate pairing check on the elliptic curve alt_bn128
TYPE: Standards Track Core
STATUS: Final
CREATED: 2017-02-06
REQUIRES: 

SUMMARY:
This EIP suggests to add precompiled contracts for a pairing function on a specific pairing-friendly elliptic curve. This can in turn be combined with

SPECIFICATION:
For blocks where `block.number >= BYZANTIUM_FORK_BLKNUM`, add a precompiled contracts for a bilinear function on groups on the elliptic curve "alt_bn128". We will define

MOTIVATION:
Current smart contract executions on Ethereum are fully transparent, which makes them unsuitable for several use-cases that involve private information like the location, identity

RATIONALE:
The specific curve `alt_bn128` was chosen because it is particularly well-suited for zkSNARKs, or, more specifically their verification building block of pairing functions. Furthermore,


=== EIP-7919 ===
TITLE: Pureth Meta
TYPE: Meta 
STATUS: Draft
CREATED: 2025-03-26
REQUIRES: 6, 4, 0, 4, ,,  , 6, 4, 6, 5, ,,  , 6, 4, 6, 6, ,,  , 7, 4, 9, 5, ,,  , 7, 6, 6, 8, ,,  , 7, 7, 0, 8, ,,  , 7, 7, 4, 5, ,,  , 7, 7, 9, 9, ,,  , 7, 8, 0, 7, ,,  , 7, 9, 1, 6

SUMMARY:
This Meta EIP bundles a set of improvements to make Ethereum data easier to access and verify without relying on trusted RPC providers or

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
- **Security**: Today, most wallets and dApps consume data from very few large RPC providers, which exposes users to the risk of incorrect and

RATIONALE:
See individual EIPs.


=== EIP-7830 ===
TITLE: Contract size limit increase for EOF
TYPE: Standards Track Core
STATUS: Review
CREATED: 2024-11-29
REQUIRES: 1, 7, 0, ,,  , 3, 5, 4, 0, ,,  , 3, 8, 6, 0

SUMMARY:
Revise the contract size limit for EOF contracts to be 64 KiB instead of the existing 24 KiB limit. Legacy contracts are unaffected.

SPECIFICATION:
[EIP-170](./eip-170.md) specifies `MAX_CODE_SIZE` as 24576 bytes, and [EIP-3860](./eip-3860.md) specifies `MAX_INITCODE_SIZE` as `2 * MAX_CODE_SIZE` (49152 bytes). Starting `FORK_BLOCK`, for EOF initcode/code (code starting with

MOTIVATION:
The contract size limit was introduced as a measure against DoS attacks. `JUMPDEST`-analysis is required for legacy contracts, and many of the algorithms performing

RATIONALE:
The 64 KiB limit is over 2x of existing limit, while it is not a significant increase, it is the realistic increase given the


=== EIP-196 ===
TITLE: Precompiled contracts for addition and scalar multiplication on the elliptic curve alt_bn128
TYPE: Standards Track Core
STATUS: Final
CREATED: 2017-02-02
REQUIRES: 

SUMMARY:
This EIP suggests to add precompiled contracts for addition and scalar multiplication on a specific pairing-friendly elliptic curve. This can in turn be combined

SPECIFICATION:
If `block.number >= BYZANTIUM_FORK_BLKNUM`, add precompiled contracts for point addition (ADD) and scalar multiplication (MUL) on the elliptic curve "alt_bn128". Address of ADD: 0x6

MOTIVATION:
Current smart contract executions on Ethereum are fully transparent, which makes them unsuitable for several use-cases that involve private information like the location, identity

RATIONALE:
The specific curve `alt_bn128` was chosen because it is particularly well-suited for zkSNARKs, or, more specifically their verification building block of pairing functions. Furthermore,


=== EIP-7664 ===
TITLE: Access-Key opcode
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2024-03-27
REQUIRES: 1, 1, 5, 3, ,,  , 2, 9, 3, 0, ,,  , 4, 8, 4, 4

SUMMARY:
This EIP introduces a new opcode to inspect the access-list keys of the executing address.

SPECIFICATION:
### Parameters | Constant | Value | |----------------------------|--------| | `ACCESS_KEY_OPCODE_GAS` | `3` | | `ACCESS_KEY_OPCODE_BYTE` | `0x4B` | ### Opcode We add an instruction

MOTIVATION:
This EIP serves as a substitute of top-level-call detection to enable a smart-contract to enforce static declaration of attributes. Previously, application-layer contracts, against common

RATIONALE:
### Static analysis of transactions Static declaration of contract-inputs enables advanced layer-two constructions and block-building techniques: data is available without EVM introspection, and contracts


=== EIP-101 ===
TITLE: Serenity Currency and Crypto Abstraction
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2015-11-15
REQUIRES: 

SPECIFICATION:
1. Accounts now have only two fields in their RLP encoding: **code** and **storage**. 2. Ether is no longer stored in account objects directly;

RATIONALE:
This allows for a large increase in generality, particularly in a few areas: 1. Cryptographic algorithms used to secure accounts (we could reasonably say


=== EIP-6493 ===
TITLE: SSZ transaction signature scheme
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2023-02-24
REQUIRES: 6, 4, 0, 4, ,,  , 6, 4, 6, 6

SUMMARY:
This EIP defines a signature scheme for native [Simple Serialize (SSZ)](https://github.com/ethereum/consensus-specs/blob/b3e83f6691c61e5b35136000146015653b22ed38/ssz/simple-serialize.md) encoded transactions.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[EIP-6404](./eip-6404.md) introduces SSZ transactions by converting from RLP transactions. Defining a signature scheme for native SSZ transactions further reduces required conversions and unlocks the

RATIONALE:
The SSZ signature scheme reduces hashing overhead and ensures that `tx_hash` commitments are available on-chain. It also provides a flexible basis for future transaction


=== EIP-2583 ===
TITLE: Penalty for account trie misses
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-02-21
REQUIRES: 

SUMMARY:
This EIP adds a gas penalty for accesses to the account trie, where the address being looked up does not exist. Non-existing accounts can

SPECIFICATION:
We define the constant `penalty` as `TBD` (suggested `2000` gas). For opcodes which access the account trie, whenever the operation is invoked targeting an

MOTIVATION:
As the ethereum trie becomes more and more saturated, the number of disk lookups that a node is required to do in order to

RATIONALE:
With this scheme, we could continue to price these operations based on the 'normal' usage, but gain protection from attacks that try to maximize


=== EIP-1057 ===
TITLE: ProgPoW, a Programmatic Proof-of-Work
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-05-02
REQUIRES: 

SUMMARY:
ProgPoW is a proof-of-work algorithm designed to close the efficiency gap available to specialized ASICs. It utilizes almost all parts of commodity hardware (GPUs),

SPECIFICATION:
ProgPoW can be tuned using the following parameters. The proposed settings have been tuned for a range of existing, commodity GPUs: * `PROGPOW_PERIOD`: Number

MOTIVATION:
Ever since the first bitcoin mining ASIC was released, many new Proof of Work algorithms have been created with the intention of being “ASIC-resistant”.


=== EIP-1682 ===
TITLE: Storage Rent
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2018-11-10
REQUIRES: 

SUMMARY:
This EIP describes a scheme to charge for data in state, and 'archive' data which is no longer being paid for. It also describes

SPECIFICATION:
The cost of storing an account over time is called `rent`. The amount of `rent` due depends on the size of the account. The

MOTIVATION:
The Ethereum blockchain in its current form is not sustainable because it grows indefinitely. This is true of any blockchain, but Ethereum grows faster

RATIONALE:
### Why do we need a separate rent balance? Accounts need a separate rent balance because some contracts are non-payable, i.e. they reject regular


=== EIP-7896 ===
TITLE: ABI attachment in `wallet_sendCalls`
TYPE: Standards Track Interface
STATUS: Draft
CREATED: 2025-02-27
REQUIRES: 5792

SUMMARY:
This EIP extends [EIP-5792](./eip-5792.md) with a new `interfaces` capability, whereby an application can attach the contract interface specifications (aka. ABIs) that the wallet needs

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The security model of Ethereum accounts relies on a separation of concerns between applications and wallets, the latter being responsible for securing private key

RATIONALE:
<!-- TODO -->


=== EIP-152 ===
TITLE: Add BLAKE2 compression function `F` precompile
TYPE: Standards Track Core
STATUS: Final
CREATED: 2016-10-04
REQUIRES: 

SUMMARY:
This EIP introduces a new precompiled contract which implements the compression function `F` used in the BLAKE2 cryptographic hashing algorithm, for the purpose of

SPECIFICATION:
We propose adding a precompiled contract at address `0x09` wrapping the [BLAKE2 `F` compression function](https://tools.ietf.org/html/rfc7693#section-3.2). The precompile requires 6 inputs tightly encoded, taking exactly

MOTIVATION:
Besides being a useful cryptographic hash function and SHA3 finalist, BLAKE2 allows for efficient verification of the Equihash PoW used in Zcash, making a

RATIONALE:
BLAKE2 is an excellent candidate for precompilation. BLAKE2 is heavily optimized for modern 64-bit CPUs, specifically utilizing 24 and 63-bit rotations to allow parallelism


=== EIP-7666 ===
TITLE: EVM-ify the identity precompile
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-03-31
REQUIRES: 

SUMMARY:
Remove the identity precompile at 0x04. At the start of executing the block in which this change activates, put into that contract a short

SPECIFICATION:
| Parameter | Value | | - | - | | `IDENTITY_PRECOMPILE_ADDRESS` | `0x0000....0004` | | `EVM_CODE` | `0x365f5f37365ff3` | At the start of

MOTIVATION:
Ethereum today has a large number of precompiles. Nearly half of these precompiles are not seeing significant use, and are contributing to ongoing maintenance

RATIONALE:
The given `EVM_CODE` corresponds to ``` CALLDATASIZE PUSH0 PUSH0 CALLDATACOPY CALLDATASIZE PUSH0 RETURN ``` Which copies calldata into memory, and then returns the same


=== EIP-1051 ===
TITLE: Overflow checking for the EVM
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-05-02
REQUIRES: 

SUMMARY:
This EIP adds overflow checking for EVM arithmetic operations, and two new opcodes that check and clear the overflow flags.

SPECIFICATION:
Two new flags are added to the EVM state: overflow (`ovf`) and signed overflow (`sovf`). The `ovf` flag is set in the following circumstances:

MOTIVATION:
The correct functioning of many contracts today is dependent on detecting and preventing overflow of arithmetic operations. Since the EVM operates on mod 2^256

RATIONALE:
Any change to implement overflow protection needs to preserve behaviour of existing contracts, which precludes many changes to the arithmetic operations themselves. One option


=== EIP-5757 ===
TITLE: Process for Approving External Resources
TYPE: Meta 
STATUS: Final
CREATED: 2022-09-30
REQUIRES: 1

SUMMARY:
Ethereum improvement proposals (EIPs) occasionally link to resources external to this repository. This document sets out the requirements for origins that may be linked

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

RATIONALE:
### Unique Identifiers If it is impossible to uniquely identify a version of a resource, it becomes impractical to track changes, which makes it


=== EIP-3860 ===
TITLE: Limit and meter initcode
TYPE: Standards Track Core
STATUS: Final
CREATED: 2021-07-16
REQUIRES: 170

SUMMARY:
We extend [EIP-170](./eip-170.md) by introducing a maximum size limit for `initcode` (`MAX_INITCODE_SIZE = 2 * MAX_CODE_SIZE = 49152`). Furthermore, we introduce a charge of

SPECIFICATION:
### Parameters | Constant | Value | | -------------------- | ------------------- | | `INITCODE_WORD_COST` | `2` | | `MAX_INITCODE_SIZE` | `2 * MAX_CODE_SIZE` |

MOTIVATION:
During contract creation the client has to perform jumpdest-analysis on the `initcode` prior to execution. The work performed scales linearly with the size of

RATIONALE:
### Gas cost constant The value of `INITCODE_WORD_COST` is selected based on performance benchmarks of differing worst-cases per implementation. The baseline for the benchmarks


=== EIP-7577 ===
TITLE: Versioning Scheme for EIPs
TYPE: Meta 
STATUS: Stagnant
CREATED: 2023-12-13
REQUIRES: 

SUMMARY:
This EIP introduces a versioning scheme for [Standards Track](./eip-1.md#eip-types) EIPs by applying [Semantic Versioning 2.0.0](../assets/eip-7577/semver.md) based on changes made to the EIP's Specification section

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
EIP specifications often receive increasing modifications as more people review them, which is generally the case as client teams start implementing the specifications and

RATIONALE:
Making the version available in the EIP's metadata header allows for programmatic parsing of the version number by tooling used in reference tests or


=== EIP-7044 ===
TITLE: Perpetually Valid Signed Voluntary Exits
TYPE: Standards Track Core
STATUS: Final
CREATED: 2023-05-18
REQUIRES: 

SUMMARY:
Lock validator voluntary exit signature domain on Capella for perpetual validity. Currently, signed voluntary exits are only valid for two upgrades.

SPECIFICATION:
### Consensus Layer Specification changes are built into the Consensus Specs Deneb upgrade. The specific makes one change to the state transition function: -

MOTIVATION:
Currently, signed voluntary exits are valid up-to only two upgrades for block inclusion due to the Beacon Chain state considering only the current and

RATIONALE:
Perpetually valid signed voluntary exits allow simpler staking operation designs. It also aligns the UX of such objects to `BLSToExecutionChanges` and deposits, such that


=== EIP-7748 ===
TITLE: State conversion to Verkle Tree
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-07-23
REQUIRES: 7612

SUMMARY:
This EIP proposes a procedure to convert, on each block, a fixed number of key-values from the existing Merkle Patricia Tree (MPT) to the

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The accounts state is too large to wait for transactions to organically move all of them to the VKT through the Overlay Tree. Thus,

RATIONALE:
### State conversion step position in block execution Performing the conversion step before the block txs execution has some benefits: - If the state


=== EIP-7927 ===
TITLE: History Expiry Meta
TYPE: Meta 
STATUS: Draft
CREATED: 2025-03-28
REQUIRES: 4444

SUMMARY:
This Meta-EIP documents the activation process and plan for history expiry as well as providing links to other EIPs that are related.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[EIP-4444](./eip-4444.md) documents the motivation for history expiry itself. This EIP exists to document the process through which history expiry will be activated on mainnet,

RATIONALE:
### Why wait for Pectra Consensus Layer clients have a dependency on pre-merge deposit logs. [EIP-6110](./eip-6110.md) will remove this dependency when the Pectra fork


=== EIP-2027 ===
TITLE: State Rent C - Net contract size accounting
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-05-14
REQUIRES: 

SUMMARY:
This is part of the State Rent roadmap. This particular change introduces initial, net accounting of the number of the contract storage slots. Though

SPECIFICATION:
Each contract (account with `codeHash` field not equal to 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, which the hash of the empty code) gets a new uint64 field, called `storagesize`.

MOTIVATION:
Ethereum currently does not track the number of contract storage slots at all, and producing such number given the downloaded state cannot be done

RATIONALE:
A mechanism for estimation of contract storage size has been proposed [here](https://medium.com/@akhounov/estimation-approximate-of-the-size-of-contracst-in-ethereum-4642fe92d6fe). But it does have a big drawback of introducing a lot of


=== EIP-3690 ===
TITLE: EOF - JUMPDEST Table
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-06-23
REQUIRES: 3, 5, 4, 0, ,,  , 3, 6, 7, 0

SUMMARY:
Introduce a section in the EOF format ([EIP-3540](./eip-3540.md)) for storing the list of `JUMPDEST`s, validate the correctness of this list at the time of

SPECIFICATION:
This feature is introduced on the very same block [EIP-3540](./eip-3540.md) is enabled, therefore every EOF1-compatible bytecode MUST have a JUMPDEST-table if it uses jumps.

MOTIVATION:
Currently existing contracts require no validation of correctness, but every time they are executed, a list must be built containing all the valid jump-destinations.

RATIONALE:
### Jumpdests section is bounded The length of the `jumpdests` section is bounded by the EOF maximum section size value 0xffff. Moreover, for deployed


=== EIP-7701 ===
TITLE: Native Account Abstraction
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-05-01
REQUIRES: 

SUMMARY:
We propose splitting the Ethereum transaction scope into multiple steps: validations, execution, and post-operation logic. Transaction validity is determined by the result of the

SPECIFICATION:
### Constants | Name | Value | |-----------------------------|-------------------| | `AA_TX_TYPE` | TBD | | `AA_ENTRY_POINT` | `address(0x7701)` | | `AA_BASE_GAS_COST` | 15000 | |

MOTIVATION:
Native Account Abstraction allows custom validation logic of a transaction and custom gas payment logic, opening new use-cases and features for wallets and dApps.

RATIONALE:
A full list of rationales for the decisions made in this proposal can be found in the [README document](../assets/eip-7701/README.md).


=== EIP-1153 ===
TITLE: Transient storage opcodes
TYPE: Standards Track Core
STATUS: Final
CREATED: 2018-06-15
REQUIRES: 2, 2, 0, 0, ,,  , 3, 5, 2, 9

SUMMARY:
This proposal introduces transient storage opcodes, which manipulate state that behaves identically to storage, except that transient storage is discarded after every transaction, and

SPECIFICATION:
Two new opcodes are added to EVM, `TLOAD` (`0x5c`) and `TSTORE` (`0x5d`). (Note that previous drafts of this EIP specified the values `0xb3` and

MOTIVATION:
Running a transaction in Ethereum can generate multiple nested frames of execution, each created by `CALL` (or similar) instructions. Contracts can be re-entered during

RATIONALE:
Another option to solve the problem of inter-frame communication is repricing the `SSTORE` and `SLOAD` opcodes to be cheaper for the transient storage use


=== EIP-7650 ===
TITLE: Programmable access lists
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-03-10
REQUIRES: 2, 9, 2, 9, ,,  , 2, 9, 3, 0

SUMMARY:
We introduce a new precompiled contract named `prefetch`, which accepts an `accessList`. The `accessList` specifies a list of addresses and local storage keys; these

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
The primary goal of this EIP is to enhance EIP-2930 by enabling contracts to add access lists programmatically. The advantage of implementing this precompile

RATIONALE:
### Charging less for accesses in the access list Similar to EIP-2930, we encourage contract developers to use the `prefetch` precompile as much as


=== EIP-2844 ===
TITLE: Add DID related methods to the JSON-RPC
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2020-08-01
REQUIRES: 

SUMMARY:
This EIP describes three new methods to add to the JSON-RPC that enables wallets to support *Decentralized Identifiers* (DIDs) as well as *JSON Object

SPECIFICATION:
Three new JSON-RPC methods are specified under the new `did_*` prefix. ### Auth Authenticate the current rpc connection to the DID methods. Prompt the

MOTIVATION:
There has been one main previous effort ([#130](https://github.com/ethereum/EIPs/issues/130), [#1098](https://github.com/ethereum/EIPs/pull/1098)) to add decryption to Ethereum wallets in a standard way. This previous approach used a

RATIONALE:
This EIP chooses to rely on DIDs and JOSE since there is already support for these standards in many places, by current systems and


=== EIP-6465 ===
TITLE: SSZ withdrawals root
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2023-02-08
REQUIRES: 2, 7, 1, 8, ,,  , 4, 8, 9, 5, ,,  , 6, 4, 0, 4, ,,  , 7, 4, 9, 5, ,,  , 7, 9, 1, 6

SUMMARY:
This EIP defines a migration process of the existing Merkle-Patricia Trie (MPT) commitment for withdrawals to [Simple Serialize (SSZ)](https://github.com/ethereum/consensus-specs/blob/b5c3b619887c7850a8c1d3540b471092be73ad84/ssz/simple-serialize.md).

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
While the consensus `ExecutionPayloadHeader` and the execution block header map to each other conceptually, they are encoded differently. This EIP aims to align the

RATIONALE:
This change was originally a candidate for inclusion in Shanghai, but was postponed to accelerate the rollout of withdrawals.


=== EIP-3416 ===
TITLE: Median Gas Premium
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-03-18
REQUIRES: 

SUMMARY:
There is a base fee per gas in protocol, which can move up or down by a maximum of 1/8 in each block. The

SPECIFICATION:
### Definitions This is a classic fork without a long migration time. * `FORK_BLOCK_NUMBER`: TBD. Block number at or after which EIP-3416 transactions are

MOTIVATION:
We target the following goals: * Gas prices spikes are mathematically smoothed out. EIP1559 does not seems to really tackle gas premium volatility and


=== EIP-684 ===
TITLE: Revert creation in case of collision
TYPE: Standards Track Core
STATUS: Final
CREATED: 2023-03-20
REQUIRES: 

SUMMARY:
This EIP causes contract creation to throw an error when attempted at an address with pre-existing code. This prevents an attack consisting of deploying

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

RATIONALE:
One of the core tenants of smart contracts is that its code will not change. However with sufficient computing power an attacker can change


=== EIP-86 ===
TITLE: Abstraction of transaction origin and signature
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2017-02-10
REQUIRES: 


=== EIP-5988 ===
TITLE: Add Poseidon hash function precompile
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-11-15
REQUIRES: 

SUMMARY:
This EIP introduces a new precompiled contract which implements the hash function used in the Poseidon cryptographic hashing algorithm, for the purpose of allowing

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
[Poseidon](../assets/eip-5988/papers/poseidon_paper.pdf) is an arithmetic hash function that is designed to be efficient for Zero-Knowledge Proof Systems. Ethereum adopts a rollup centric roadmap and hence

RATIONALE:
TODO: Add rationale TODO: Add rationale for gas cost e.g. benchmark and computation cost estimation.


=== EIP-7523 ===
TITLE: Empty accounts deprecation
TYPE: Standards Track Core
STATUS: Last Call
CREATED: 2023-09-19
REQUIRES: 161

SUMMARY:
This EIP prohibits the state of any post-merge network from containing empty accounts. Since no empty accounts exist outside the testsuite and no new

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The possibility of empty accounts is a historical artifact of the early history of Ethereum. The only networks that have ever been capable of

RATIONALE:
This EIP was drafted to be the simplest possible way of eliminating the long term technical debt imposed by empty accounts. The Merge was


=== EIP-712 ===
TITLE: Typed structured data hashing and signing
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2017-09-12
REQUIRES: 1, 5, 5, ,,  , 1, 9, 1

SUMMARY:
This is a standard for hashing and signing of typed structured data as opposed to just bytestrings. It includes a * theoretical framework for

SPECIFICATION:
The set of signable messages is extended from transactions and bytestrings `𝕋 ∪ 𝔹⁸ⁿ` to also include structured data `𝕊`. The new set of

MOTIVATION:
Signing data is a solved problem if all we care about are bytestrings. Unfortunately in the real world we care about complex meaningful messages.

RATIONALE:
The `encode` function is extended with a new case for the new types. The first byte of the encoding distinguishes the cases. For the


=== EIP-3300 ===
TITLE: Phase out refunds
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-02-26
REQUIRES: 

SUMMARY:
This EIP would define a block when the `SSTORE` and `SELFDESTRUCT` refunds would begin to diminish. The refund would step linearly downward, eroding the

SPECIFICATION:
Parameters: * `FORK_BLOCK_NUM`: EIP-3300 activation block * `REFUND_DECAY_STEP`: 1 gas * `REFUND_DECAY_FREQUENCY`: 100 blocks Computed: * `REFUND_DECAY`: `REFUND_DECAY_STEP * ceil((block.number + 1 - FORK_BLOCK_NUM)

MOTIVATION:
Refunds increase block elasticity, so the block gas target can exceed the number established by miners by up to 2x. This can cause hesitancy

RATIONALE:
Persisted refunds would become worthless before they fall below their activation cost. Once the refunds are worthless, they can be removed by another hard


=== EIP-2593 ===
TITLE: Escalator fee market change for ETH 1.0 chain
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-03-13
REQUIRES: 

SUMMARY:
Based on [The Agoric Papers](https://agoric.com/papers/incentive-engineering-for-computational-resource-management/full-text/). Each transaction would have the option of providing parameters that specify an "escalating" bid, creating a time-based auction for

SPECIFICATION:
**Client-Wide Parameters** * `INITIAL_FORK_BLKNUM`: TBD **Transaction Parameters** The transaction `gasPrice` parameter is now optional, and if excluded can be replaced by these parameters instead:

MOTIVATION:
Ethereum currently prices transaction fees using a simple first-price auction, which leads to well documented inefficiencies (some of which are documented in [EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md)) when


=== EIP-2458 ===
TITLE: Updates and Updated-by Header
TYPE: Informational 
STATUS: Withdrawn
CREATED: 2020-01-06
REQUIRES: 

SUMMARY:
EIP headers `updates` and `updated-by` are used for updating `active` EIPs. This is to make the improvement process of EIPs more modular, and have

SPECIFICATION:
### `updated-by` `updated-by` is reserved for EIPs in `active` status. For an EIP in status `active`, updates to that EIP, which update the header

MOTIVATION:
Currently, EIP1 specifies EIP headers: `updated`, `replaces`, and `superseded-by`. Headers `replaces` and `superseded-by` indicates when an entire EIP is being replaced by another EIP,

RATIONALE:
`updates` and `updated-by` apply only to EIPs in `active` status as updates to EIPs in `final` status are already handled by EIP headers `superseded-by`


=== EIP-4396 ===
TITLE: Time-Aware Base Fee Calculation
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-10-28
REQUIRES: 

SUMMARY:
This EIP proposes accounting for time between blocks in the base fee calculation to target a stable throughput by time, instead of by block.

SPECIFICATION:
Using the pseudocode language of [EIP-1559](./eip-1559.md), the updated base fee calculation becomes: ```python ... BASE_FEE_MAX_CHANGE_DENOMINATOR = 8 BLOCK_TIME_TARGET = 12 MAX_GAS_TARGET_PERCENT = 95 class

MOTIVATION:
The current base fee calculation chooses the gas usage of a block as the signal to determine whether demand for block space is too

RATIONALE:
### Mechanism The proposed new base fee calculation only adjusts the block gas target by scaling it with the block time, capped at a


=== EIP-7778 ===
TITLE: Block Gas Limit Accounting without Refunds
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-10-01
REQUIRES: 

SUMMARY:
This EIP modifies the block gas accounting mechanism to prevent the circumvention of block gas limits. It proposes that gas refunds, particularly those from

SPECIFICATION:
### Gas Accounting Changes 1. **User Gas Costs (Unchanged):** - Users continue to receive gas refunds for operations that qualify (e.g., setting storage to

MOTIVATION:
Currently, gas refunds from operations like clearing storage slots (setting to zero) reduce both the transaction gas cost for users and the gas counted

RATIONALE:
### Aligning Gas Limits with Computational Work - The block gas limit is designed to constrain the computational load per block - Gas refunds


=== EIP-2677 ===
TITLE: Limit size of `initcode`
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2020-05-18
REQUIRES: 

SUMMARY:
Enforce a maximum size limit (`max_initcode_size`) for `initcode`. If the size of `initcode` exceeds `max_initcode_size`, then contract creation fails with an out of gas

SPECIFICATION:
There are three situations where this is applicable: * `CREATE`, * `CREATE2`, * creation using a transaction with empty receiver. In all these (and

MOTIVATION:
When a client executes `initcode`, the client has to perform a jumpdest analysis. In some cases, the client also performs a `hash` of the

RATIONALE:
TBA


=== EIP-4803 ===
TITLE: Limit transaction gas to a maximum of 2^63-1
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-02-02
REQUIRES: 

SUMMARY:
Limit transaction gas to be between `0` and `2^63-1`.

SPECIFICATION:
Introduce one new restriction retroactively from genesis: any transaction is invalid and not includeable in a block, where the gas limit exceeds `2^63-1`.

MOTIVATION:
The gas limit field in the transaction is specified to be an arbitrary long unsigned integer, but various clients put limits on this value.

RATIONALE:
### `2^63-1` vs `2^64-1` `2^63-1` is chosen because it allows representing the gas value as a signed integer, and so the out of gas


=== EIP-2488 ===
TITLE: Deprecate the CALLCODE opcode
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-12-20
REQUIRES: 7

SUMMARY:
Deprecate `CALLCODE` in a *somewhat* backwards compatible way, by making it always return failure.

SPECIFICATION:
If `block.number >= FORK_BLOCK`, the `CALLCODE` (`0xf2`) instruction always returns `0`, which signals failure.

MOTIVATION:
`CALLCODE` was part of the Frontier release of Ethereum. In the first few weeks/months it became clear that it cannot accomplish its intended design

RATIONALE:
It would be possible just to remove the opcode and exceptionally abort if it is encountered. However, by returning failure, the contract has a


=== EIP-3298 ===
TITLE: Removal of refunds
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-02-26
REQUIRES: 

SPECIFICATION:
### Parameters | Constant | Value | | - | - | | `FORK_BLOCK` | TBD | For blocks where `block.number >= FORK_BLOCK`, the

MOTIVATION:
Gas refunds for SSTORE and SELFDESTRUCT were originally introduced to motivate application developers to write applications that practice "good state hygiene", clearing storage slots

RATIONALE:
A full removal of refunds is the simplest way to solve the issues with refunds; any gains from partial retention of the refund mechanism


=== EIP-5000 ===
TITLE: MULDIV instruction
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-03-14
REQUIRES: 

SUMMARY:
Introduce a new instruction, `MULDIV(x, y, z)`, to perform `((x * y) / z) % 2**256` in 512-bit precision. `z = 0` is a

SPECIFICATION:
A new instruction is introduced: `MULDIV` (`0x1e`). - Pops 3 values from the stack, first `x`, then `y` and `z`. - If `z ==

MOTIVATION:
Fixed point operations in high level languages are very commonly used on Ethereum, especially in the domain of financial applications. While fixed point addition

RATIONALE:
### The special 0 case All the arithmetic instructions in EVM handle division or modulo 0 specially: the instructions return 0. We have decided


=== EIP-7503 ===
TITLE: Zero-Knowledge Wormholes
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2023-08-14
REQUIRES: 2, 7, 1, 8, ,,  , 4, 8, 4, 4, ,,  , 7, 7, 0, 8

SUMMARY:
While researching on privacy solutions and applications of ZKP, we discovered a technique, by which people can burn their digital asset (E.g ETH) by

SPECIFICATION:
### Parameters * `MAGIC_ADDRESS`: `0xfe` (one byte) * `MAGIC_NULLIFIER`: `0x01` (one byte) * `MAGIC_POW`: `0x02` (one byte) * `MAGIC_CHANGE`: `0x0404040404040404040404040404040404040404040404040404040404040404` * `POW_LOG_DIFFICULTY`: `24` *


=== EIP-1234 ===
TITLE: Constantinople Difficulty Bomb Delay and Block Reward Adjustment
TYPE: Standards Track Core
STATUS: Final
CREATED: 2018-07-19
REQUIRES: 

SUMMARY:
Starting with `CNSTNTNPL_FORK_BLKNUM` the client will calculate the difficulty based on a fake block number suggesting the client that the difficulty bomb is adjusting

SPECIFICATION:
#### Relax Difficulty with Fake Block Number For the purposes of `calc_difficulty`, simply replace the use of `block.number`, as used in the exponential ice

MOTIVATION:
The Casper development and switch to proof-of-stake is delayed, the Ethash proof-of-work should be feasible for miners and allow sealing new blocks every 15

RATIONALE:
This will delay the ice age by 29 million seconds (approximately 12 months), so the chain would be back at 30 second block times


=== EIP-2982 ===
TITLE: Serenity Phase 0
TYPE: Informational 
STATUS: Final
CREATED: 2020-09-15
REQUIRES: 

SUMMARY:
This EIP specifies Phase 0 of Serenity (eth2), a multi-phased upgrade to the consensus mechanism for Ethereum mainnet. In Phase 0, the existing PoW

SPECIFICATION:
Phase 0 is designed to require _no breaking consensus changes_ to existing Ethereum mainnet. Instead, this is the bootstrapping a new PoS consensus that

MOTIVATION:
Eth2 aims to fulfill the original vision of Ethereum to support an efficient, global-scale, general-purpose transactional platform while retaining high cryptoeconomic security and decentralization.

RATIONALE:
### Principles * **Simplicity**: especially since cryptoeconomic proof of stake and quadratic sharding are inherently complex, the protocol should strive for maximum simplicity in


=== EIP-7877 ===
TITLE: Enhanced RETURN opcodes
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-01-31
REQUIRES: 6, ,,  , 1, 1, 5, 3, ,,  , 3, 8, 5, 5

SUMMARY:
This EIP specifies a series of new `RETURN` opcodes which allow the user to specify which data location to return from instead of defaulting

SPECIFICATION:
This EIP introduces 3 new opcodes as well as renaming/aliasing an existing one. ``` SRETURN (0xf6) TRETURN (0xf7) RRETURN (0xf8) RETURN -> MRETURN (0xf3)

MOTIVATION:
With the introduction of transient storage, many smart contracts have begun to store data using the new transient opcodes to optimize for gas usage,

RATIONALE:
Allowing for more targeted return opcodes allows for saving gas at all levels of smart contract optimization by eliminating the intermediate steps of first


=== EIP-7600 ===
TITLE: Hardfork Meta - Pectra
TYPE: Meta 
STATUS: Final
CREATED: 2024-01-18
REQUIRES: 2, 5, 3, 7, ,,  , 2, 9, 3, 5, ,,  , 6, 1, 1, 0, ,,  , 7, 0, 0, 2, ,,  , 7, 2, 5, 1, ,,  , 7, 5, 4, 9, ,,  , 7, 6, 2, 3, ,,  , 7, 6, 8, 5, ,,  , 7, 6, 9, 1, ,,  , 7, 7, 0, 2

SUMMARY:
This Meta EIP lists the EIPs Included in the Prague/Electra network upgrade.

SPECIFICATION:
### Included EIPs #### Core EIPs * [EIP-2537](./eip-2537.md): Precompile for BLS12-381 curve operations * [EIP-2935](./eip-2935.md): Save historical block hashes in state * [EIP-6110](./eip-6110.md): Supply

RATIONALE:
This Meta EIP provides a global view of all changes included in the Prague/Electra network upgrade, as well as links to the full specification.


=== EIP-3534 ===
TITLE: Restricted Chain Context Type Transactions
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-04-20
REQUIRES: 2, 7, 1, 8, ,,  , 2, 9, 3, 0

SUMMARY:
We introduce a new EIP-2718 transaction type with the format `0x4 || rlp([chainId, chainContext, nonce, gasPrice, gasLimit, to, value, data, access_list, yParity, senderR, senderS])`.

SPECIFICATION:
### Parameters - `FORK_BLOCK_NUMBER` `TBD` - `TRANSACTION_TYPE_NUMBER` `0x4`. See EIP-2718. As of `FORK_BLOCK_NUMBER`, a new EIP-2718 transaction is introduced with `TransactionType` `TRANSACTION_TYPE_NUMBER`. The EIP-2718

MOTIVATION:
Establish a protocol-based mechanism with which transactions are able to articulate constraints on eligible chain contexts. Generally, these constraints give the consumer (the transactor)

RATIONALE:
### Subclasses Subclasses are defined with a high level of conceptual independence, and can be modified and/or extended independently from this EIP. Their specification


=== EIP-7873 ===
TITLE: EOF - TXCREATE and InitcodeTransaction type
TYPE: Standards Track Core
STATUS: Review
CREATED: 2025-01-31
REQUIRES: 3, 5, 4, 0, ,,  , 3, 6, 7, 0, ,,  , 3, 8, 6, 0, ,,  , 7, 6, 2, 0

SUMMARY:
EVM Object Format (EOF) removes the possibility to create contracts using creation transactions (with an empty `to` field), `CREATE` or `CREATE2` instructions. We introduce

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
This EIP uses terminology from the [EIP-3540](./eip-3540.md) which introduces the EOF format. Creation transaction and creation instructions `CREATE` and `CREATE2` are means provided by

RATIONALE:
### `TXCREATE` failure modes `TXCREATE` has two "light" failure modes in case the initcontainer is not present and in case the EOF validation is


=== EIP-3338 ===
TITLE: Limit account nonce to 2^52
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2021-03-07
REQUIRES: 

SUMMARY:
Limit account nonce to be between `0` and `2^52`.

SPECIFICATION:
If `block.number >= FORK_BLOCK` introduce two new restrictions: 1. Consider any transaction invalid, where the nonce exceeds `2^52`. 2. The `CREATE` instruction to abort

MOTIVATION:
Account nonces are currently specified to be arbitrarily long unsigned integers. Dealing with arbitrary length data in the state witnesses is not optimal, therefore

RATIONALE:
1. It is unlikely for any nonce to reach or exceed the proposed limit. If one would want to reach that limit via external


=== EIP-4844 ===
TITLE: Shard Blob Transactions
TYPE: Standards Track Core
STATUS: Final
CREATED: 2022-02-25
REQUIRES: 1, 5, 5, 9, ,,  , 2, 7, 1, 8, ,,  , 2, 9, 3, 0, ,,  , 4, 8, 9, 5

SUMMARY:
Introduce a new transaction format for "blob-carrying transactions" which contain a large amount of data that cannot be accessed by EVM execution, but whose

SPECIFICATION:
### Parameters | Constant | Value | | - | - | | `BLOB_TX_TYPE` | `Bytes1(0x03)` | | `BYTES_PER_FIELD_ELEMENT` | `32` | | `FIELD_ELEMENTS_PER_BLOB`

MOTIVATION:
Rollups are in the short and medium term, and possibly in the long term, the only trustless scaling solution for Ethereum. Transaction fees on

RATIONALE:
### On the path to sharding This EIP introduces blob transactions in the same format in which they are expected to exist in the


=== EIP-145 ===
TITLE: Bitwise shifting instructions in EVM
TYPE: Standards Track Core
STATUS: Final
CREATED: 2017-02-13
REQUIRES: 

SUMMARY:
Native bitwise shifting instructions are introduced, which are more efficient processing wise on the host and are cheaper to use by a contract.

SPECIFICATION:
The following instructions are introduced: ### `0x1b`: `SHL` (shift left) The `SHL` instruction (shift left) pops 2 values from the stack, first `arg1` and

MOTIVATION:
EVM is lacking bitwise shifting operators, but supports other logical and arithmetic operators. Shift operations can be implemented via arithmetic operators, but that has

RATIONALE:
Instruction operands were chosen to fit the more natural use case of shifting a value already on the stack. This means the operand order


=== EIP-7676 ===
TITLE: EOF - Prepare for Address Space Extension
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-04-03
REQUIRES: 3, 5, 4, 0, ,,  , 3, 6, 7, 0, ,,  , 7, 0, 6, 9

SUMMARY:
Operations in the Legacy EVM trim off the top 12 bytes of an address operand before evaluation. This EIP changes the handling of those

SPECIFICATION:
We introduce one new instruction: - `EXTBALANCE` (`tbd`) with arguments `(target_address)`, returning `balance` `EXTBALANCE` will pop one stack item off of the stack, the

MOTIVATION:
There have been proposals to extend Ethereum Addresses from 160 bits to 256, such as one that would use the extra bits for state

RATIONALE:
### New Opcode There is no need to ban the `BALANCE` opcode as it does not cause any problems that would require banning it


=== EIP-7808 ===
TITLE: Reserve Tx-Type Range for RIPs
TYPE: Meta 
STATUS: Review
CREATED: 2024-11-04
REQUIRES: 2718

SUMMARY:
This EIP reserves a [transaction-type](./eip-2718.md) range for use by the Rollup Improvement Proposal (RIP) process to ensure there are no conflicts.

SPECIFICATION:
The transaction-type (as specified in [EIP-2718](./eip-2718)) range from `0x40` to `0x7f` (inclusive of both) is reserved for use by the RIP process.

MOTIVATION:
For L2s to use new transactrion types, it is necessary to reserve a transaction-type range for use by the RIP process so as to

RATIONALE:
By reserving a transaction-type range for RIPs, it allows the RIP process to maintain its own registry of transaction types that are not (necessarily)


=== EIP-3102 ===
TITLE: Binary trie structure
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-09-01
REQUIRES: 

SUMMARY:
This proposal presents a binary structure and merkelization rule for the account and storage tries, which are merged into a single “state” trie. RLP

SPECIFICATION:
### Conventions | Code | Description | | :-: | - | | `u256(x)` | Big endian, 32-byte representation of number _x_ | |`||`

MOTIVATION:
The current design of the Merkle Patricia Trie (MPT) uses an hexary trie. Hexary Merkle trees are more shallow than their binary counterparts, which

RATIONALE:
### blake2b BLAKE2 offers better performance, which is key to compensate for the loss of performance associated to a ~4x increase in the number


=== EIP-100 ===
TITLE: Change difficulty adjustment to target mean block time including uncles
TYPE: Standards Track Core
STATUS: Final
CREATED: 2016-04-28
REQUIRES: 

SPECIFICATION:
Currently, the formula to compute the difficulty of a block includes the following logic: ``` python adj_factor = max(1 - ((timestamp - parent.timestamp) //

RATIONALE:
This new formula ensures that the difficulty adjustment algorithm targets a constant average rate of blocks produced including uncles, and so ensures a highly


=== EIP-2542 ===
TITLE: New opcodes TXGASLIMIT and CALLGASLIMIT
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-02-29
REQUIRES: 

SUMMARY:
Currently, there is an existing opcode `0x45 GASLIMIT` that provides access to the block gas limit. While this information may be useful in some

SPECIFICATION:
If block.number >= TBD, add three new opcodes: TXGASLIMIT: 0x5c Pushes the gas limit of the entire transaction onto the stack. This is a

MOTIVATION:
As concepts of relaying, meta-transactions, gas fees, and account abstraction gain popularity, it becomes critical for some contracts to be able to track gas

RATIONALE:
Consider a solidity smart contract that wants to know how much gas the entire transaction or a part of it had consumed. It is


=== EIP-7639 ===
TITLE: eth/70 - Cease serving history before PoS
TYPE: Standards Track Networking
STATUS: Draft
CREATED: 2024-02-13
REQUIRES: 

SUMMARY:
Execution layer clients will no longer request or respond to p2p queries about block data before the Paris upgrade.

SPECIFICATION:
Add a new `eth` protocol capability with version `70`. Clients connected on this version must not make or respond to p2p queries about block

MOTIVATION:
As of 2024, historical data in clients has grown to around 500 GB. Nearly 400 GB of that is from block data before PoS

RATIONALE:
### Only Pre-PoS data One might ask why the distinction between pre and post PoS data is made in this EIP. The simple answer


=== EIP-3675 ===
TITLE: Upgrade consensus to Proof-of-Stake
TYPE: Standards Track Core
STATUS: Final
CREATED: 2021-07-22
REQUIRES: 2124

SUMMARY:
This EIP deprecates Proof-of-Work (PoW) and supersedes it with the new Proof-of-Stake consensus mechanism (PoS) driven by the beacon chain. Information on the bootstrapping

SPECIFICATION:
### Definitions * **PoW block**: Block that is built and verified by the existing proof-of-work mechanism. In other words, a block of the Ethereum

MOTIVATION:
The beacon chain network has been up and running since December 2020. Neither safety nor liveness failures were detected during this period of time.

RATIONALE:
The changes specified in this EIP target a minimal requisite set of consensus and client software modifications to safely replace the existing proof-of-work consensus


=== EIP-778 ===
TITLE: Ethereum Node Records (ENR)
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2017-11-23
REQUIRES: 


=== EIP-7870 ===
TITLE: Hardware and Bandwidth Recommendations
TYPE: Informational 
STATUS: Review
CREATED: 2025-01-26
REQUIRES: 

SUMMARY:
This proposal specifies hardware and bandwidth recommendations for different types of Ethereum nodes: - **Full nodes**: Nodes that follow the tip of the chain

SPECIFICATION:
### Roles and Their Recommended Specifications Node operators typically run both an **Execution Layer (EL)** client and a **Consensus Layer (CL)** client on the

MOTIVATION:
Clear system specifications are crucial for: - Ensuring meaningful benchmark comparisons across different client implementations. - Enabling informed decision-making about protocol upgrades and their

RATIONALE:
### Storage - **Recommended**: 4 TB NVMe M.2 drive with: - **Sequential R/W**: 7,000 MB/s - **Random 4K R/W**: Up to 1,000,000 IOPS -


=== EIP-2003 ===
TITLE: EVMC modules for implementations of precompiled contracts
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2019-05-09
REQUIRES: 1352

SUMMARY:
[EVMC] specifies a generic API for Ethereum execution engines. This EIP specifies a way of providing implementations of Ethereum precompiled contracts using the [EVMC

SPECIFICATION:
For the complete [EVMC] specification visit the [EVMC documentation] first. This EIP is based on and is compatible with EVMC ABI version 6. The

RATIONALE:
It is very unlikely that any precompile will need to access or modify a contract state. Not requiring the Client to implement the EVMC


=== EIP-7939 ===
TITLE: Count leading zeros (CLZ) opcode
TYPE: Standards Track Core
STATUS: Review
CREATED: 2025-04-28
REQUIRES: 

SUMMARY:
Introduce a new opcode, `CLZ(x)`, which pops `x` from the stack and pushes the number of leading zero bits in `x` to the stack.

SPECIFICATION:
A new opcode is introduced: `CLZ` (`0x1e`). - Pops 1 value from the stack. - Pushes a value to the stack, according to the

MOTIVATION:
Count leading zeros (CLZ) is a native opcode in many processor architectures (even in RISC architectures like ARM). It is a basic building block

RATIONALE:
### The special 0 case 256 is the smallest number after 255. Returning a small number allows the result to be compared with minimal


=== EIP-3756 ===
TITLE: Gas Limit Cap
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-08-21
REQUIRES: 

SUMMARY:
Set an in-protocol cap for the gas limit of 30,000,000.

SPECIFICATION:
As of the fork block `N`, consider blocks with a `gas_limit` greater than `30,000,000` invalid.

MOTIVATION:
A high gas limit increases pressure on the network. In the benign case, it increases the size of the state and history faster than

RATIONALE:
### Why Cap the Gas Limit The gas limit is currently under the control of block proposers. They have the ability to increase the


=== EIP-1355 ===
TITLE: Ethash 1a
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2018-08-26
REQUIRES: 

SPECIFICATION:
1. Define hash function `fnv1a()` as ```python def fnv1a(v1, v2): return ((v1 ^ v2) * FNV1A_PRIME) % 2**32 ``` where `FNV1A_PRIME` is 16777499 or

MOTIVATION:
Provide minimal set of changes to Ethash algorithm to hinder and delay the adoption of ASIC based mining.

RATIONALE:
The usual argument for decentralization and network security. Unless programmable, an ASIC is hardwired to perform sequential operations in a given order. fnv1a changes


=== EIP-3076 ===
TITLE: Slashing Protection Interchange Format
TYPE: Standards Track Interface
STATUS: Last Call
CREATED: 2020-10-27
REQUIRES: 

SUMMARY:
A standard format for transferring a key's signing history allows validators to easily switch between clients without the risk of signing conflicting messages. While

SPECIFICATION:
### JSON Schema A valid interchange file is one that adheres to the following JSON schema, and is interpreted according to the [Conditions](#conditions). ```json

MOTIVATION:
The proof of stake (PoS) protocol penalises validators for voting in ways that could result in two different versions of the chain being finalised.

RATIONALE:
### Supporting Different Strategies The interchange format is designed to be flexible enough to support the full variety of slashing protection strategies that clients


=== EIP-5806 ===
TITLE: Delegate transaction
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-10-20
REQUIRES: 2, 7, 1, 8, ,,  , 2, 9, 3, 0

SUMMARY:
This EIP adds a new transaction type that allows EOAs to execute arbitrary code using a delegate-call-like mechanism.

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
EOA are the most widely used type of account, yet their ability to perform operations is limited to deploying contracts and sending "call" transactions.

RATIONALE:
EOAs are the most widely used type of wallet. This EIP would drastically expand the ability of EOAs to interact with smart contracts by


=== EIP-616 ===
TITLE: SIMD Operations for the EVM
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2017-04-25
REQUIRES: 


=== EIP-4444 ===
TITLE: Bound Historical Data in Execution Clients
TYPE: Standards Track Networking
STATUS: Stagnant
CREATED: 2021-11-02
REQUIRES: 

SUMMARY:
Clients must stop serving historical headers, bodies, and receipts older than one year on the p2p layer. Clients may locally prune this historical data.

SPECIFICATION:
| Parameter | Value | Description | | - | - | - | | `HISTORY_PRUNE_EPOCHS` | 82125 | A year in beacon chain

MOTIVATION:
Historical blocks and receipts currently occupy more than 400GB of disk space (and growing!). Therefore, to validate the chain, users must typically have a

RATIONALE:
This proposal forces clients to stop serving old historical data over p2p. We make this explicit to force clients to seek historical data from


=== EIP-2315 ===
TITLE: Simple Subroutines for the EVM
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2019-10-17
REQUIRES: 3, 5, 4, 0, ,,  , 3, 6, 7, 0, ,,  , 4, 2, 0, 0

SUMMARY:
This proposal provides a _complete_, _efficient_, _safe_ and _static_ control-flow facility. It introduces two new opcodes to support calling and returning from subroutines: *

SPECIFICATION:
### Opcodes #### `RJUMPSUB (0x5f) relative_offset` Transfers control to a subroutine. 1. Decode the `relative_offset` from the immediate data at `PC`. 2. Push the

MOTIVATION:
### A complete control-flow facility. Jumps, conditional jumps and subroutines were proposed by Alan Turing in 1945 as a means of organizing the logic

RATIONALE:
This is a purely semantic specification, placing no constraints on the syntax of code sections beyond being a sequence of opcodes and immediate data


=== EIP-7932 ===
TITLE: Secondary Signature Algorithms
TYPE: Standards Track Core
STATUS: Review
CREATED: 2025-04-12
REQUIRES: 1, 5, 5, ,,  , 1, 5, 5, 9, ,,  , 2, 7, 1, 8, ,,  , 2, 9, 3, 0, ,,  , 4, 8, 4, 4, ,,  , 7, 7, 0, 2

SUMMARY:
This EIP does 3 things: - Standardizes the introduction of several new algorithms for signing data. - Introduces a new [EIP-2718](./eip-2718.md) typed transaction that

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
As quantum computers are getting more advanced, several new post-quantum (PQ) algorithms have been designed. These algorithms all contain drawbacks such as large key

RATIONALE:
### Setting `y_parity`, `r`, `s` values to zero rather than removing them Keeping the `y_parity`, `r`, `s` values inside the transactions keeps the previous


=== EIP-5920 ===
TITLE: PAY opcode
TYPE: Standards Track Core
STATUS: Review
CREATED: 2022-03-14
REQUIRES: 2, 1, 4, ,,  , 2, 9, 2, 9, ,,  , 7, 5, 2, 3

SUMMARY:
This EIP introduces a new opcode, `PAY`, taking two stack parameters, `addr` and `val`, that transfers `val` wei to the address `addr` without calling

SPECIFICATION:
### Constants | Constant | Definition | | -------------------------- | ------------------------- | | `WARM_STORAGE_READ_COST` | [EIP-2929](./eip-2929.md) | | `COLD_ACCOUNT_ACCESS_COST` | [EIP-2929](./eip-2929.md) | | `GAS_NEW_ACCOUNT`

MOTIVATION:
Currently, to send ether to an address requires you to call into that address, which transfers execution context to that address, which creates several

RATIONALE:
### Argument order The order of arguments mimics that of `CALL`, which pops `addr` before `val`. Beyond consistency, though, this ordering aids validators pattern-matching


=== EIP-3540 ===
TITLE: EOF - EVM Object Format v1
TYPE: Standards Track Core
STATUS: Review
CREATED: 2021-03-16
REQUIRES: 3, 5, 4, 1, ,,  , 3, 8, 6, 0

SUMMARY:
We introduce an extensible and versioned container format for the EVM with a once-off validation at deploy time. The version described here brings the

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to

MOTIVATION:
On-chain deployed EVM bytecode contains no pre-defined structure today. Code is typically validated in clients to the extent of `JUMPDEST` analysis at runtime, every

RATIONALE:
EVM and/or account versioning has been discussed numerous times over the past years. This proposal aims to learn from them. See "Ethereum account versioning"


=== EIP-3855 ===
TITLE: PUSH0 instruction
TYPE: Standards Track Core
STATUS: Final
CREATED: 2021-02-19
REQUIRES: 

SUMMARY:
Introduce the `PUSH0` (`0x5f`) instruction, which pushes the constant value 0 onto the stack.

SPECIFICATION:
The instruction `PUSH0` is introduced at `0x5f`. It has no immediate data, pops no items from the stack, and places a single item with

MOTIVATION:
Many instructions expect offsets as inputs, which in a number of cases are zero. A good example is the return data parameters of `CALLs`,

RATIONALE:
### Gas cost The `base` gas cost is used for instructions which place constant values onto the stack, such as `ADDRESS`, `ORIGIN`, and so


=== EIP-7705 ===
TITLE: NONREENTRANT and REENTRANT opcodes
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-05-09
REQUIRES: 

SUMMARY:
Add two opcodes, `NONREENTRANT` and `REENTRANT`, which set and clear a contract's reentrancy status. After invoking `NONREENTRANT`, a contract cannot be `CALL`ed (or `STATICCALL`ed,

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Reentrancy attacks account for a substantial portion of user funds stolen on EVM chains, including the famous "DAO hack". However, due to the cost

RATIONALE:
The computational cost of pushing the current value to the call stack (for handling reverts) is accounted for in the overhead cost of the


=== EIP-1295 ===
TITLE: Modify Ethereum PoW Incentive Structure and Delay Difficulty Bomb
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-08-05
REQUIRES: 

SUMMARY:
Starting with CNSTNTNPL_FORK_BLKNUM the client will calculate the difficulty based on a fake block number suggesting the client that the difficulty bomb is adjusting

SPECIFICATION:
#### Relax Difficulty with Fake Block Number For the purposes of `calc_difficulty`, simply replace the use of `block.number`, as used in the exponential ice

MOTIVATION:
Network scalability and security are at the forefront of risks to the Ethereum protocol. With great strides being made towards on and off chain

RATIONALE:
The security layer of the Ethereum network is and should remain robust. Incentives for continued operation of the growing ecosystem’s security are paramount. At


=== EIP-7623 ===
TITLE: Increase calldata cost
TYPE: Standards Track Core
STATUS: Final
CREATED: 2024-02-13
REQUIRES: 

SUMMARY:
The current calldata pricing permits EL payloads of up to 7.15 MB, while the average size is much smaller at around 100 KB. This

SPECIFICATION:
| Parameter | Value | | ---------------------------- | ----- | | `STANDARD_TOKEN_COST` | `4` | | `TOTAL_COST_FLOOR_PER_TOKEN` | `10` | Let `tokens_in_calldata = zero_bytes_in_calldata

MOTIVATION:
The block gas limit has not been increased since [EIP-1559](./eip-1559.md), while the average size of blocks has continuously increased due to the growing number

RATIONALE:
The current maximum EL payload size is approximately 1.79 MB (`30_000_000/16`). It is possible to create payloads filled with zero bytes that expand to


=== EIP-3014 ===
TITLE: eth_symbol JSON-RPC method
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2020-09-30
REQUIRES: 

SUMMARY:
The new method `eth_symbol` (`eth_`-namespaced) has no parameters and returns a string of the native coin of the network. For the Ethereum mainnet this

SPECIFICATION:
Method: `eth_symbol`. Params: none. Returns: `result` - the native coin symbol, string Example: ```js curl -X POST --data '{"jsonrpc":"2.0","method":"eth_symbol","params":[],"id":1}' // Result { "id": 1,

MOTIVATION:
Wallets that deal with multiple networks need some basic information for every blockchain that they connect to. One of those things is the symbol

RATIONALE:
This endpoint is similar to [EIP-695](./eip-695.md) but it provides the symbol instead of `chainId`. It provides functionality that is already there for [ERC-20](./eip-20.md) tokens,


=== EIP-7609 ===
TITLE: Decrease base cost of TLOAD/TSTORE
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-02-01
REQUIRES: 1153

SUMMARY:
Decrease the base cost of TLOAD/TSTORE while introducing a superlinear pricing model. This increases the efficiency of TLOAD/TSTORE for common use cases, while providing

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[EIP-1153](./eip-1153.md) introduces a new storage region, termed "transient storage". It behaves like storage (word-addressed and persists between call frames), but unlike storage it is

RATIONALE:
### Gas In benchmarking, `TLOAD` was found to cost a similar amount of CPU time as `MUL`, while `TSTORE` was found to cost about


=== EIP-5478 ===
TITLE: CREATE2COPY Opcode
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-08-17
REQUIRES: 1, 0, 1, 4, ,,  , 2, 9, 2, 9

SUMMARY:
Adding a new opcode, `CREATE2COPY`, that is identical to `CREATE2` but with potentially much lower gas cost by accepting an additional argument `existing_contract_address` that

SPECIFICATION:
### Parameters | Constant | Value | | ---------------------------- | ---------------- | | `FORK_BLKNUM` | TBD | | `CREATE_DATA_GAS_PER_BYTE` | 200 | | `COLD_ACCOUNT_ACCESS_COST`

MOTIVATION:
This EIP aims to reduce the smart contract creation cost of account abstraction (AA) contracts that have identical code. The major cost of creating

RATIONALE:
TBD


=== EIP-7251 ===
TITLE: Increase the MAX_EFFECTIVE_BALANCE
TYPE: Standards Track Core
STATUS: Final
CREATED: 2023-06-28
REQUIRES: 7, 0, 0, 2, ,,  , 7, 6, 8, 5

SUMMARY:
Increases the constant `MAX_EFFECTIVE_BALANCE`, while keeping the minimum staking balance `32 ETH`. This permits large node operators to consolidate into fewer validators while also

SPECIFICATION:
### Constants #### Execution layer | Name | Value | Comment | | - | - | - | | `CONSOLIDATION_REQUEST_TYPE` | `0x02` |

MOTIVATION:
As of October 3, 2023, there are currently over 830,000 validators participating in the consensus layer. The size of this set continues to grow

RATIONALE:
This EIP aims to reduce the total number of validators without changing anything about the economic security of the protocol. It provides a mechanism


=== EIP-6466 ===
TITLE: SSZ receipts
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2023-02-08
REQUIRES: 6, 5, 8, ,,  , 2, 7, 1, 8, ,,  , 6, 4, 0, 4, ,,  , 7, 4, 9, 5, ,,  , 7, 7, 0, 2, ,,  , 7, 9, 1, 6

SUMMARY:
This EIP defines a migration process of [EIP-2718](./eip-2718.md) Recursive-Length Prefix (RLP) receipts to [Simple Serialize (SSZ)](https://github.com/ethereum/consensus-specs/blob/b3e83f6691c61e5b35136000146015653b22ed38/ssz/simple-serialize.md)

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
RLP receipts have a number of shortcomings: 1. **Limited proving support:** Due to receipt data being linearly hashed as part of the `receipts_root` Merkle-Patricia

RATIONALE:
### Forward compatibility All receipts share the same Merkle tree shape with a stable [generalized index (gindex)](https://github.com/ethereum/consensus-specs/blob/b5c3b619887c7850a8c1d3540b471092be73ad84/ssz/merkle-proofs.md#generalized-merkle-tree-index) assigned to each field. Future transaction features


=== EIP-3374 ===
TITLE: Predictable Proof-of-Work (POW) Sunsetting
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2021-03-13
REQUIRES: 

SUMMARY:
Sets the block reward to 3 ETH and then incrementally decreases it every block for 2,362,000 blocks (approximately 1 year) until it reaches 1

SPECIFICATION:
### Constants * `TRANSITION_START_BLOCK_NUMBER: TBD` * `TRANSITION_DURATION: 2_362_000` // (about one year) * `TRANSITION_END_BLOCK_NUMBER: FORK_BLOCK_NUMBER + TRANSITION_DURATION` * `STARTING_REWARD: 3_000_000_000_000_000_000` * `ENDING_REWARD: 1_000_000_000_000_000_000` *

MOTIVATION:
Unnecessarily abrupt changes to the Ethereum ecosystem cause disruption and disharmony resulting in the disenfranchisement of community members while undermining stability and confidence. While

RATIONALE:
Picking starting and ending block reward values that are equidistant from the current block reward rate of 2 ensures the impact of this EIP


=== EIP-3554 ===
TITLE: Difficulty Bomb Delay to December 2021
TYPE: Standards Track Core
STATUS: Final
CREATED: 2021-05-06
REQUIRES: 

SUMMARY:
Starting with `FORK_BLOCK_NUMBER` the client will calculate the difficulty based on a fake block number suggesting to the client that the difficulty bomb is

SPECIFICATION:
#### Relax Difficulty with Fake Block Number For the purposes of `calc_difficulty`, simply replace the use of `block.number`, as used in the exponential ice

MOTIVATION:
Targeting for the Shanghai upgrade and/or the Merge to occur before December 2021. Either the bomb can be readjusted at that time, or removed

RATIONALE:
The following script predicts a .1 second delay to blocktime the first week of december and a 1 second delay by the end of


=== EIP-606 ===
TITLE: Hardfork Meta: Homestead
TYPE: Meta 
STATUS: Final
CREATED: 2017-04-23
REQUIRES: 2, ,,  , 7, ,,  , 8

SUMMARY:
This specifies the changes included in the hard fork named Homestead.

SPECIFICATION:
- Codename: Homestead - Activation: - Block >= 1,150,000 on Mainnet - Block >= 494,000 on Morden - Block >= 0 on future testnets


=== EIP-3155 ===
TITLE: EVM trace specification
TYPE: Standards Track Interface
STATUS: Last Call
CREATED: 2020-12-07
REQUIRES: 

SUMMARY:
Introduce a new JSON standard for EVM traces during execution of state tests.

SPECIFICATION:
Clients should be able to execute simple transactions as well as code and return traces. In the following, we will call this client CUT

MOTIVATION:
The Ethereum Virtual Machine executes all smart contract code on ethereum. In order to debug smart contracts and state tests better, a common format

RATIONALE:
This EIP is largely based on the previous non-official documentation for EVM tracing. It tries to cover as many corner cases as possible to


=== EIP-2124 ===
TITLE: Fork identifier for chain compatibility checks
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2019-05-03
REQUIRES: 

SUMMARY:
There are many public and private Ethereum networks, but the discovery protocol doesn't differentiate between them. The only way to check if a peer

SPECIFICATION:
Each node maintains the following values: - **`FORK_HASH`**: IEEE CRC32 checksum (`[4]byte`) of the genesis hash and fork blocks numbers that already passed. -

MOTIVATION:
Peer-to-peer networking is messy and hard due to firewalls and network address translation (NAT). Generally only a small fraction of nodes have publicly routed

RATIONALE:
##### Why flatten `FORK_HASH` into 4 bytes? Why not share the entire genesis and fork list? Whilst the `eth` devp2p protocol permits arbitrarily much


=== EIP-2565 ===
TITLE: ModExp Gas Cost
TYPE: Standards Track Core
STATUS: Final
CREATED: 2020-03-20
REQUIRES: 198

SUMMARY:
To accurately reflect the real world operational cost of the `ModExp` precompile, this EIP specifies an algorithm for calculating the gas cost. This algorithm

SPECIFICATION:
As of `FORK_BLOCK_NUMBER`, the gas cost of calling the precompile at address `0x0000000000000000000000000000000000000005` will be calculated as follows: ``` def calculate_multiplication_complexity(base_length, modulus_length): max_length =

MOTIVATION:
Modular exponentiation is a foundational arithmetic operation for many cryptographic functions including signatures, VDFs, SNARKs, accumulators, and more. Unfortunately, the ModExp precompile is currently

RATIONALE:
After benchmarking the ModExp precompile, we discovered that it is ‘overpriced’ relative to other precompiles. We also discovered that the current gas pricing formula


=== EIP-7329 ===
TITLE: ERC/EIP Repository split
TYPE: Meta 
STATUS: Final
CREATED: 2023-07-13
REQUIRES: 1

SUMMARY:
Describes the motivation and rational for splitting the EIP repositories into an EIP repository, targeting core ethereum changes and an ERC repository, targeting application

SPECIFICATION:
This specification only details with the initial mechanism of the split. The particulars of how each repository will govern itself is out of scope

MOTIVATION:
Long ago when the EIPs repository was created, there was a vision of a single home for all standards related to Ethereum. The community

RATIONALE:
There are two major communities served by the EIP process that are highly divergent and very differentiated in their needs. Let's consider the impact


=== EIP-7761 ===
TITLE: EXTCODETYPE instruction
TYPE: Standards Track Core
STATUS: Review
CREATED: 2024-09-01
REQUIRES: 3, 5, 4, 0, ,,  , 7, 6, 9, 2

SUMMARY:
Allow EOF contracts to discriminate between EOAs (Externally Owned Accounts) and contract accounts by introducing an `EXTCODETYPE` instruction.

SPECIFICATION:
### Parameters | Constant | Value | |---------------------------|--------------------------------------------------------------------| | `FORK_BLKNUM` | tbd | | `GAS_COLD_ACCOUNT_ACCESS` | Defined as `2600` in the [Ethereum Execution Layer

MOTIVATION:
EOFv1 as scoped in [EIP-7692] removes code introspection capabilities from the EVM, including the `EXTCODESIZE` instruction (in [EIP-3540]). This makes it hard for [ERC-721]

RATIONALE:
### Alternative solutions There have been other solutions proposed to alleviate the problems related to lack of code introspection required for ERC-721 and ERC-1155


=== EIP-7783 ===
TITLE: Add Controlled Gas Limit Increase Strategy
TYPE: Informational 
STATUS: Draft
CREATED: 2024-10-06
REQUIRES: 


=== EIP-6110 ===
TITLE: Supply validator deposits on chain
TYPE: Standards Track Core
STATUS: Final
CREATED: 2022-12-09
REQUIRES: 7685

SUMMARY:
Appends validator deposits to the Execution Layer block structure. This shifts responsibility of deposit inclusion and validation to the Execution Layer and removes the

SPECIFICATION:
### Execution Layer #### Constants | Name | Value | Comment | | - | - | - | |`DEPOSIT_REQUEST_TYPE` | `b'0'` | The

MOTIVATION:
Validator deposits are a core component of the proof-of-stake consensus mechanism. This EIP allows for an in-protocol mechanism of deposit processing on the Consensus

RATIONALE:
### `index` field Deposit `index` is used to deterministically initialize `deposit_requests_start_index` in the `BeaconState`, this prevents same deposit from being applied twice during `Eth1Data`


=== EIP-3607 ===
TITLE: Reject transactions from senders with deployed code
TYPE: Standards Track Core
STATUS: Final
CREATED: 2021-06-10
REQUIRES: 

SUMMARY:
Ethereum addresses are currently only 160 bits long. This means it is possible to create a collision between a contract account and an Externally

SPECIFICATION:
Any transaction where `tx.sender` has a `CODEHASH != EMPTYCODEHASH` MUST be rejected as invalid, where `EMPTYCODEHASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470`. The invalid transaction MUST be rejected

MOTIVATION:
### Generating address collisions By creating keys for `2**80` EOAs and simulating the deployment of `2**80` contracts from these EOAs (one each), one expects

RATIONALE:
We note that it was always expected that a contract account's behaviour is constrained by the code in that contract -- which means that


=== EIP-3074 ===
TITLE: AUTH and AUTHCALL opcodes
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2020-10-15
REQUIRES: 155

SUMMARY:
This EIP introduces two EVM instructions `AUTH` and `AUTHCALL`. The first sets a context variable `authorized` based on an ECDSA signature. The second sends

SPECIFICATION:
### Conventions - **`top - N`** - the `N`th most recently pushed value on the EVM stack, where `top - 0` is the most

MOTIVATION:
Adding more functionality to EOAs has been a long-standing feature request. The requests have spanned from implementing batching capabilities, allowing for gas sponsoring, expirations,

RATIONALE:
### Signature in Memory The signature format (`yParity`, `r`, and `s`) is fixed, so it might seem curious that `auth` accepts a dynamic memory


=== EIP-3085 ===
TITLE: wallet_addEthereumChain RPC Method
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2020-11-01
REQUIRES: 155

SUMMARY:
This EIP adds a wallet-namespaced RPC method: `wallet_addEtherereumChain`, providing a standard interface for adding chains to Ethereum wallets.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

RATIONALE:
The design of `wallet_addEthereumChain` is deliberately ignorant of what it means to "add" a chain to a wallet. The meaning of "adding" a chain


=== EIP-5081 ===
TITLE: Expirable Transaction
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-05-06
REQUIRES: 1, 5, 5, ,,  , 1, 5, 5, 9, ,,  , 2, 7, 1, 8, ,,  , 2, 9, 2, 9, ,,  , 2, 9, 3, 0

SUMMARY:
This EIP adds a new transaction type of that includes expiration with a blocknum.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
When a user sends a transaction `tx0` with a low gas price, sometimes it might not be high enough to be executed. A common

RATIONALE:
TODO


=== EIP-2256 ===
TITLE: wallet_getOwnedAssets JSON-RPC Method
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2019-08-29
REQUIRES: 5, 5, ,,  , 1, 5, 5, ,,  , 1, 4, 7, 4

SUMMARY:
There is no standardized way for a dApp to request a list of owned assets from a user. Now, each dApp needs to keep

SPECIFICATION:
New JSON-RPC method to be added to web3 browsers: `wallet_getOwnedAssets`. This method is for dApp-wallet communication and only targets the assets that have already

MOTIVATION:
There are financial dApps that require a list of owned assets from a user, for various purposes - calculating taxes, selecting customized payment options,

RATIONALE:
In order to avoid duplication of effort for dApps that require keeping a list of all or popular assets and to provide optimal UX,


=== EIP-7377 ===
TITLE: Migration Transaction
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-07-21
REQUIRES: 1, 7, 0, ,,  , 1, 5, 5, 9, ,,  , 2, 2, 0, 0, ,,  , 2, 7, 1, 8

SUMMARY:
Introduce a new [EIP-2718](./eip-2718.md) transaction type with the format `0x04 || rlp([chainId, nonce, maxFeePerGas, maxPriorityFeePerGas, gasLimit, codeAddr, storage, data, value, accessList, yParity, r, s])`

SPECIFICATION:
At the fork block `X`, introduce the migration transaction type. ### Migration Transaction #### Definition | field | type | |------------------------|-----------| | `chainId` |

MOTIVATION:
Smart contract wallets have long been touted as the solution to Ethereum's user experience woes. As early as 2015, there were proposals for allowing

RATIONALE:
### No `to` address field This transaction is only good for one-time use to migrate an EOA to a smart contract. It is designed


=== EIP-7883 ===
TITLE: ModExp Gas Cost Increase
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-02-11
REQUIRES: 2565

SUMMARY:
This EIP is modifying the `ModExp` precompile pricing algorithm introduced in [EIP-2565](./eip-2565.md).

SPECIFICATION:
Upon activation of this EIP, the gas cost of calling the precompile at address `0x0000000000000000000000000000000000000005` will be calculated as follows: ``` def calculate_multiplication_complexity(base_length, modulus_length):

MOTIVATION:
Currently the `ModExp` precompile is underpriced in certain scenarios relative to its resource consumption. By adjusting the pricing formula, this EIP aims to address

RATIONALE:
Benchmarking the `ModExp` precompile revealed several scenarios where its gas cost was significantly underestimated. Pricing adjustments are designed to rectify underpriced edge cases by


=== EIP-3336 ===
TITLE: Paged memory allocation for the EVM
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-03-06
REQUIRES: 

SUMMARY:
Presently, the EVM charges for memory as a linear array starting at address 0 and extending to the highest address that has been read

SPECIFICATION:
### Parameters | Constant | Value | | - | - | | `FORK_BLOCK` | TBD | | `PAGE_BITS` | 10 | | `PAGE_BASE_COST`

MOTIVATION:
Most modern computers implement "virtual memory" for userspace programs, where programs have access to a large address space, with pages of RAM that are

RATIONALE:
### Memory expansion gas cost The new gas cost follows the same curve as the previous one, while ensuring that the new gas cost


=== EIP-1559 ===
TITLE: Fee market change for ETH 1.0 chain
TYPE: Standards Track Core
STATUS: Final
CREATED: 2019-04-13
REQUIRES: 2, 7, 1, 8, ,,  , 2, 9, 3, 0

SUMMARY:
We introduce a new [EIP-2718](./eip-2718.md) transaction type, with the format `0x02 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list, signature_y_parity, signature_r, signature_s])`.

SPECIFICATION:
Block validity is defined in the reference implementation below. The `GASPRICE` (`0x3a`) opcode **MUST** return the `effective_gas_price` as defined in the reference implementation below.

MOTIVATION:
Ethereum historically priced transaction fees using a simple auction mechanism, where users send transactions with bids ("gasprices") and miners choose transactions with the highest


=== EIP-2566 ===
TITLE: Human Readable Parameters for Contract Function Execution
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2020-03-23
REQUIRES: 

SUMMARY:
When a dapp prompts a user to execute a smart contract function via a ProviderWallet, confirmation screens displayed in the ProviderWallet layer cannot display

SPECIFICATION:
This EIP proposes increasing the set of Ethereum RPC methods to include a new method - `eth_sendTransactionToContractFunction`. This method parallels `eth_sendTransaction` with the only

MOTIVATION:
### ProviderWallet Definition ProviderWallets like Metamask and Geth are hybrid software that combine an Ethereum API provider with an Ethereum wallet. This allows them

RATIONALE:
This EIP's proposed `eth_sendTransactionToContractFunction` method is intended to parallel `eth_sendTransaction` as much as possible since both methods result in the same behaviour when executing


=== EIP-7742 ===
TITLE: Uncouple blob count between CL and EL
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-07-12
REQUIRES: 4844

SUMMARY:
Update blob maximum and target verification from [EIP-4844](./eip-4844.md). The execution layer no longer verifies the blob maximum and receives the target dynamically from the

SPECIFICATION:
### Block structure and validity Upon activation of this EIP, execution clients **MUST** extend the header schema with an additional 64-bit field: the `target_blobs_per_block`.

MOTIVATION:
Following EIP-4844, the execution layer (EL) maintains a hard-coded blob target value and blob maximum value. Given the relationship of the EL and the

RATIONALE:
### Why not have the CL also compute the blob base fee and remove any notion of blob counts from EL processing? Hoisting the


=== EIP-2474 ===
TITLE: Coinbase calls
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-01-19
REQUIRES: 

SUMMARY:
_In proof-of-work blockchains, validators are known as miners._ The validator might want to execute functions directly, without having to sign a transaction. Some examples

SPECIFICATION:
The calls to be executed by `block.coinbase` would be included first at block, and would consume normally the gas of block, however they won't

MOTIVATION:
In order to reduce the overhead of calls that don't use `msg.sender` and are being called by validator with `tx.gasPrice = 0`.

RATIONALE:
TBD


=== EIP-7637 ===
TITLE: Optimize EOA EXTCODEHASH
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-02-26
REQUIRES: 1052

SUMMARY:
This proposal is an optimization for [EIP-1052](./eip-1052.md), For addresses with a balance, but without code, the codehash should still be `0x`. When an address

SPECIFICATION:
The behaviour of `EXTCODEHASH` is changed in the following way: 1. When calling `EXTCODEHASH`, the codehash of the address with balance but no code

MOTIVATION:
EIP-1052 was proposed to save gas fees. However, due to some flaws in the set specifications, in actual applications, due to safety concerns, they

RATIONALE:
EIP-1052 In order to include the function of `BALANCE`, let the `EXTCODEHASH` of the address without balance be `0x`, and the `EXTCODEHASH` of the


=== EIP-7557 ===
TITLE: Block-level Warming with fair cost savings
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2023-10-01
REQUIRES: 

SUMMARY:
A mechanism for a fair distribution of the gas costs associated with access to addresses and storage slots among multiple transactions with shared items

SPECIFICATION:
The [EIP-2930: Optional access lists](./eip-2930) already introduced the first part of the solution. Each transaction can specify an array of `accessed_addresses` and `accessed_storage_keys` to

MOTIVATION:
[EIP-2929: Gas cost increases for state access opcodes](./eip-2929) introduced a new gas cost model that differentiates between "cold" and "warm" access to accounts and

RATIONALE:
### Current cold storage gas cost is unfair As described in the [Motivation](#motivation) section, the amount of gas that users spend on accessing the


=== EIP-6963 ===
TITLE: Multi Injected Provider Discovery
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2023-05-01
REQUIRES: 1193

SUMMARY:
An alternative discovery mechanism to `window.ethereum` for [EIP-1193](./eip-1193.md) providers which supports discovering multiple injected Wallet Providers in a web page using Javascript's `window` events.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Currently, Wallet Provider that offer browser extensions must inject their Ethereum providers ([EIP-1193](./eip-1193.md)) into the same window object `window.ethereum`; however, this creates conflicts for

RATIONALE:
The previous proposal introduced mechanisms that relied on a single, mutable window object that could be overwritten by multiple parties. We opted for an


=== EIP-7668 ===
TITLE: Remove bloom filters
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-03-31
REQUIRES: 

SUMMARY:
Require the bloom filters in an execution block, including at the top level and in the receipt object, to be empty.

SPECIFICATION:
The logs bloom of an execution block is now required to be empty (ie. 0 bytes long). The logs bloom of a transaction receipt

MOTIVATION:
Logs were originally introduced to give applications a way to record information about onchain events, which decentralized applications (dapps) would be able to easily

RATIONALE:
This is a minimally disruptive way to remove the need to handle blooms from clients. A future EIP can later clean up by removing


=== EIP-7495 ===
TITLE: SSZ ProgressiveContainer
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2023-08-18
REQUIRES: 7916

SUMMARY:
This EIP introduces a new [Simple Serialize (SSZ)](https://github.com/ethereum/consensus-specs/blob/b5c3b619887c7850a8c1d3540b471092be73ad84/ssz/simple-serialize.md) type to represent containers with forward-compatible Merkleization: A given field is always assigned the same stable

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
SSZ containers are frequently versioned, for example across fork boundaries. When the number of fields reaches a new power of two, or a field

RATIONALE:
### Why `active_fields`? `active_fields` conceptually creates a single Merkle tree shape across all prior, current, and future versions, where each field (as identified by


=== EIP-7898 ===
TITLE: Uncouple execution payload from beacon block
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-03-01
REQUIRES: 

SUMMARY:
Currently, the beacon block in Ethereum Consensus embed transactions within `ExecutionPayload` field of `BeaconBlockBody`. This EIP proposes to replace `ExecutionPayload` with `ExecutionPayloadHeader` in `BeaconBlockBody`

SPECIFICATION:
- `ExecutionPayload` in the `BeaconBlockBody` is replaced by `ExecutionPayloadHeader` - `ExecutionPayloadWithInclusionProof` is computed by the block proposer/builder and gossiped independently on a separate new

MOTIVATION:
Ethereum protocol has an ambitious goal to grow the `gasLimit` of the execution payloads (possibly by 10X). This leads to larger messages, negatively affecting

RATIONALE:
There is another choice we could have made to go for `SignedExecutionPayload` instead of `ExecutionPayloadWithInclusionProof` and having a `SignedExecutionPayloadHeader` with builder signing these messages


=== EIP-2976 ===
TITLE: Typed Transactions over Gossip
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2020-09-13
REQUIRES: 2718

SUMMARY:
[Typed Transactions](./eip-2718.md) can be sent over devp2p as `TransactionType || TransactionPayload`. The exact contents of the `TransactionPayload` are defined by the `TransactionType` in future

SPECIFICATION:
All changes specified below apply to all protocol/versions retroactively. ### Definitions * `||` is the byte/byte-array concatenation operator. * `|` is the type union

MOTIVATION:
[EIP-2718](./eip-2718.md) introduced new transaction types for blocks (which presents itself in the makeup of a block header's transaction root and receipts root). However, without

RATIONALE:
### Why not specify each transaction type at the protocol layer? We could have chosen to make the protocol aware of the shape of


=== EIP-7823 ===
TITLE: Set upper bounds for MODEXP
TYPE: Standards Track Core
STATUS: Review
CREATED: 2024-11-11
REQUIRES: 198

SUMMARY:
Introduce an upper bound on the inputs of the MODEXP precompile. This can reduce the number of potential bugs, because the testing surface is

SPECIFICATION:
Recap from [EIP-198](./eip-198.md): > At address `0x00……05`, add a precompile that expects input in the following format: > > `<length_of_BASE> <length_of_EXPONENT> <length_of_MODULUS> <BASE> <EXPONENT>

MOTIVATION:
The MODEXP precompile has been a source of numerous consensus bugs. Many of them were due to specifically crafted cases using impractical input lengths.

RATIONALE:
### Limit This upper bound allows the existing use cases of MODEXP: 1. RSA verification with up to 8192 bit keys. Commonly used ones


=== EIP-8 ===
TITLE: devp2p Forward Compatibility Requirements for Homestead
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2015-12-18
REQUIRES: 

SUMMARY:
This EIP introduces new forward-compatibility requirements for implementations of the devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol. Clients

SPECIFICATION:
Implementations of **the devp2p Wire Protocol** should ignore the version number of hello packets. When sending the hello packet, the version element should be

MOTIVATION:
Changes to the devp2p protocols are hard to deploy because clients running an older version will refuse communication if the version number or structure

RATIONALE:
The proposed changes address forward compatibility by applying Postel's Law (also known as the Robustness Principle) throughout the protocol stack. The merit and applicability


=== EIP-2028 ===
TITLE: Transaction data gas cost reduction
TYPE: Standards Track Core
STATUS: Final
CREATED: 2019-05-03
REQUIRES: 

SPECIFICATION:
The gas per non-zero byte is reduced from 68 to 16. Gas cost of zero bytes is unchanged.

MOTIVATION:
There are a couple of main benefits to accepting this proposal and lowering gas cost of Calldata On-Chain Scalability: Generally speaking, higher bandwidth of

RATIONALE:
Roughly speaking, reducing the gas cost of Calldata leads to potentially larger blocks, which increases the network delay associated with data transmission over the


=== EIP-7610 ===
TITLE: Revert creation in case of non-empty storage
TYPE: Standards Track Core
STATUS: Last Call
CREATED: 2024-02-02
REQUIRES: 

SUMMARY:
This EIP causes contract creation to throw an error when attempted at an address with pre-existing storage.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

RATIONALE:
EIP-684 defines two conditions for contract deployment: the destination address must have zero nonce and zero code length. Unfortunately, this is not sufficient. Before


=== EIP-210 ===
TITLE: Blockhash refactoring
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2017-02-10
REQUIRES: 

SPECIFICATION:
If `block.number == CONSTANTINOPLE_FORK_BLKNUM`, then when processing the block, before processing any transactions set the code of BLOCKHASH_CONTRACT_ADDR to BLOCKHASH_CONTRACT_CODE. If `block.number >= CONSTANTINOPLE_FORK_BLKNUM`,

RATIONALE:
This removes the need for implementations to have an explicit way to look into historical block hashes, simplifying the protocol definition and removing a


=== EIP-1087 ===
TITLE: Net gas metering for SSTORE operations
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-05-17
REQUIRES: 

SUMMARY:
This EIP proposes a change to how gas is charged for EVM `SSTORE` operations, in order to reduce excessive gas costs in situations where

SPECIFICATION:
The following changes are made to the EVM: - A 'dirty map' for each transaction is maintained, tracking all storage slots in all contracts

MOTIVATION:
Presently, `SSTORE` (`0x55`) operations are charged as follows: - 20,000 gas to set a slot from 0 to non-0 - 5,000 gas for any

RATIONALE:
We believe the proposed mechanism represents the simplest way to reduce storage gas costs in situations where they do not reflect the actual costs


=== EIP-2014 ===
TITLE: Extended State Oracle
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-05-10
REQUIRES: 140

SUMMARY:
Introduce a new system contract with an extensible interface following the [Contract ABI Encoding] to access extended data sets, such as chain identifiers, block

SPECIFICATION:
A new system contract ("precompile") is introduced at address `0x0000000000000000000000000000000000000009` called ESO (Extended State Oracle). It can be queried using `CALL` or `STATICCALL` and

MOTIVATION:
Over the past couple of years several proposals were made to extend the EVM with more data. Some examples include extended access to block

RATIONALE:
TBA


=== EIP-7768 ===
TITLE: No-Ether transactions with free-for-all tips
TYPE: Meta 
STATUS: Draft
CREATED: 2024-09-14
REQUIRES: 

SUMMARY:
A technique is introduced where an externally-owned account having no Ether can send transactions and pay tips using a new "free-for-all" bucket and using

SPECIFICATION:
### End user process 1. An end user who controls an externally-owned account, say Alice, will prepare transaction(s) she would like to execute and

MOTIVATION:
There is much interest in third-party-pay transactions on Ethereum and competing networks. Other proposals require changes to the Ethereum client, that transactions be sent

RATIONALE:
This approach can be useful for end users that do not want to or are not able to add Ether to their account. This


=== EIP-2537 ===
TITLE: Precompile for BLS12-381 curve operations
TYPE: Standards Track Core
STATUS: Final
CREATED: 2020-02-21
REQUIRES: 

SUMMARY:
Add functionality to efficiently perform operations over the BLS12-381 curve, including those for BLS signature verification. Along with the curve arithmetic, multi-scalar-multiplication operations are

SPECIFICATION:
### Constants | Name | Value | Comment | |---------------------|-------|--------------------| | BLS12_G1ADD | 0x0b | precompile address | | BLS12_G1MSM | 0x0c | precompile

MOTIVATION:
The motivation of this precompile is to add a cryptographic primitive that allows to get 120+ bits of security for operations over pairing friendly

RATIONALE:
The motivation section covers a total motivation to have operations over the BLS12-381 curves available. We also extend a rationale for more specific fine


=== EIP-7568 ===
TITLE: Hardfork Meta Backfill - Berlin to Shapella
TYPE: Meta 
STATUS: Final
CREATED: 2023-12-01
REQUIRES: 2, 0, 7, 0, ,,  , 2, 3, 8, 7, ,,  , 2, 9, 8, 2, ,,  , 6, 1, 2, 2, ,,  , 6, 9, 5, 3

SUMMARY:
Following Muir Glacier hard fork, Meta EIPs were abandoned in favor of other ways to track changes included in Ethereum network upgrades. This EIP

SPECIFICATION:
The network upgrades below are listed in order of activation. Upgrades to Ethereum's execution layer are marked "[EL]", and those to Ethereum's consensus layer

MOTIVATION:
For many years, Ethereum used Meta EIPs to document network upgrades. Recently, consensus has formed around using them again. This EIP aggregates the network

RATIONALE:
The EIP repository is well known within the Ethereum community, and Meta EIPs have historically been useful to clearly list the EIPs included in


=== EIP-7069 ===
TITLE: Revamped CALL instructions
TYPE: Standards Track Core
STATUS: Review
CREATED: 2023-05-05
REQUIRES: 1, 5, 0, ,,  , 2, 1, 1, ,,  , 2, 1, 4, ,,  , 2, 9, 2, 9, ,,  , 3, 5, 4, 0

SUMMARY:
Introduce three new call instructions, `EXTCALL`, `EXTDELEGATECALL` and `EXTSTATICCALL`, with simplified semantics. Introduce another instruction, `RETURNDATALOAD` for loading a word from return data into

SPECIFICATION:
| Name | Value | Comment | |------|-------|---------| | WARM_STORAGE_READ_COST | 100 | From [EIP-2929](./eip-2929.md) | | COLD_ACCOUNT_ACCESS | 2600 | From [EIP-2929](./eip-2929.md) |

MOTIVATION:
Observability of gas has been a problem for very long. The system of gas has been (and likely must be) flexible in adapting to

RATIONALE:
### Removing gas selectability One major change from the original `CALL` series of instructions is that the caller has no control over the amount


=== EIP-7792 ===
TITLE: Verifiable logs
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-10-21
REQUIRES: 6466

SUMMARY:
This EIP defines a method to make the `eth_getLogs` JSON-RPC response verifiable.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The `eth_getLogs` endpoint is used by wallets to obtain the transaction history pertaining to an account or a topic. To verify correctness and completeness

RATIONALE:
Making the `eth_getLogs` response verifiable adds the necessary security attributes to enable wallets to transition away from relying on trusted data providers, ultimately improving


=== EIP-198 ===
TITLE: Big integer modular exponentiation
TYPE: Standards Track Core
STATUS: Final
CREATED: 2017-01-30
REQUIRES: 


=== EIP-3436 ===
TITLE: Expanded Clique Block Choice Rule
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-03-25
REQUIRES: 225

SUMMARY:
The current specification of Clique allows for multiple competing blocks from producers but does not provide any strategies to pick blocks aside from the

SPECIFICATION:
When a Clique validator is arbitrating the canonical status between two different chain head blocks, they should choose the canonical block with the following

MOTIVATION:
There has been more than one deadlock in the Goerli multi-client Clique network. The number of active validators was greater than 1/2 of the

RATIONALE:
Two scenarios of a halted chain are known based on the current total difficulty then first observed rule. One of the scenarios is also


=== EIP-1872 ===
TITLE: Ethereum Network Upgrade Windows
TYPE: Meta 
STATUS: Stagnant
CREATED: 2018-03-25
REQUIRES: 

SUMMARY:
Four different weeks, spaced roughly evenly throughout the year, are targeted for network upgrades to be launched. Regular network upgrades should announce their intention

SPECIFICATION:
Scheduling is defined for three categories of network upgrades. First are `Roadmap` network upgrades that include deliberate protocol improvements. Next are `Priority` network updates,

MOTIVATION:
The aim of this EIP is to provide some level of regularity and predictability to the Ethereum network upgrade/hard fork process. This will allow

RATIONALE:
The rationale for defining launch windows is to give business running Ethereum infrastructure a predictable schedule for when upgrades may or may not occur.


=== EIP-7889 ===
TITLE: Emit log on revert
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-02-20
REQUIRES: 

SUMMARY:
All calls to the REVERT opcode with non-zero size must emit a log with revert data, making it accessible via standard RPC without the

SPECIFICATION:
### Parameters <!-- TODO --> * `REVERTTOPIC`: `TBD` * `DATA_LIMIT`: `TBD` ### Functionality Whenever `REVERT` is called with non-zero size, emit a log identical

MOTIVATION:
Revert messages are currently inaccessible to users as they are not available via standard RPC. Instead, users have to request a node to trace

RATIONALE:
This is the simplest possible implementation that allows revert messages to be accessible via RPC methods. It does not require any changes to client


=== EIP-1679 ===
TITLE: Hardfork Meta: Istanbul
TYPE: Meta 
STATUS: Final
CREATED: 2019-01-04
REQUIRES: 1, 5, 2, ,,  , 1, 1, 0, 8, ,,  , 1, 3, 4, 4, ,,  , 1, 7, 1, 6, ,,  , 1, 8, 8, 4, ,,  , 2, 0, 2, 8, ,,  , 2, 2, 0, 0

SUMMARY:
This meta-EIP specifies the changes included in the Ethereum hardfork named Istanbul.

SPECIFICATION:
- Codename: Istanbul ### Activation - `Block >= 9,069,000` on the Ethereum Mainnet - `Block >= 6,485,846` on the Ropsten testnet - `Block >=


=== EIP-5133 ===
TITLE: Delaying Difficulty Bomb to mid-September 2022
TYPE: Standards Track Core
STATUS: Final
CREATED: 2022-06-01
REQUIRES: 

SUMMARY:
Starting with `FORK_BLOCK_NUMBER` the client will calculate the difficulty based on a fake block number suggesting to the client that the difficulty bomb is

SPECIFICATION:
#### Relax Difficulty with Fake Block Number For the purposes of `calc_difficulty`, simply replace the use of `block.number`, as used in the exponential ice

MOTIVATION:
To avoid network degradation due to a premature activation of the difficulty bomb.

RATIONALE:
The following script predicts the bomb will go off at block 15530314, which is expected to be mined around mid-September. ```python import math def


=== EIP-908 ===
TITLE: Reward clients for a sustainable network
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2018-03-01
REQUIRES: 

SUMMARY:
The tragedy of the commons is a phenomenon that is well known in many sectors, most notably in regard to sustainability. It involves the

SPECIFICATION:
Add a new field to each block called `PrevBlockVerifications`, which is an arbitrary, unlimited size byte array. When a client verifies that a previous

MOTIVATION:
Currently there is a lack of incentives for anyone to run a full node, while joining a mining pool is not really economical if

RATIONALE:
### A rough qualitative analysis of fees As of May 4 2018, there are [16428 nodes](https://web.archive.org/web/20180504051128/https://ethernodes.org/network/1). Assume that an annual cost for an average


=== EIP-2026 ===
TITLE: State Rent H - Fixed Prepayment for accounts
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-05-14
REQUIRES: 

SUMMARY:
This is part of the State Rent roadmap. This particular change introduces a fixed charge for state expansion that comes from adding new accounts

SPECIFICATION:
On and after block `H`, every newly created account gets a new field `rentbalance` of type unsigned 256-bit integer. On and after block `H`,

MOTIVATION:
The penalty is levied to the transaction sender. Rather than raising the gas cost of account creation (that would direct levy towards the miner),

RATIONALE:
Prior to rent prepayments, other alternatives were considered: 1. Simple raising of the gas cost - discussed in the Motivation section. 1. In [first


=== EIP-2937 ===
TITLE: SET_INDESTRUCTIBLE opcode
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-09-04
REQUIRES: 

SPECIFICATION:
Add a transaction-wide global variable `globals.indestructible: Set[Address]` (i.e. a variable that operates the same way as the selfdestructs set), initialized to the empty set.

MOTIVATION:
The intended use case would be for contracts to make their first byte of code be the `SET_INDESTRUCTIBLE` opcode if they wish to serve

RATIONALE:
Alternative proposals to this include: * Simply banning `SELFDESTRUCT` outright. This would be ideal, but has larger backwards compatibility issues. * Using a local


=== EIP-7684 ===
TITLE: Return deposits for distinct credentials
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-04-12
REQUIRES: 

SUMMARY:
Automatically withdraw deposits for existing validator records, but where the deposit includes a distinct execution withdrawal credential.

SPECIFICATION:
### Consensus Layer The configuration values and mechanics of the specification can be found in the [Consensus Layer specs](https://github.com/ethereum/consensus-specs/blob/2360756c8c19c0f7b0e91135f5bbcddecdf0a835/specs/_features/eip9999/beacon_chain.md). A sketch of the resulting

MOTIVATION:
Some staking operations feature two distinct entities, one operating the validating key, and one funding the deposit. The funding entity delegates control of the

RATIONALE:
### Persist pending withdrawals Rejected deposits from block at slot N can not be withdrawn in block N due to a cyclic dependency. An


=== EIP-3508 ===
TITLE: Transaction Data Opcodes
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-04-16
REQUIRES: 

SUMMARY:
This EIP introduces the following three EVM instructions: `ORIGINDATALOAD`, `ORIGINDATASIZE`, and `ORIGINDATACOPY`. These three instructions are meant to provide access to the original transaction's

SPECIFICATION:
### ORIGINDATALOAD (`0x47`), ORIGINDATASIZE (`0x48`) and ORIGINDATACOPY (`0x49`) These instructions are meant to operate similarly to their call-prefixed counterparts with the exception that they

MOTIVATION:
As the Ethereum development scene matures, more ambitious and complex features are introduced into smart contracts more often than not requiring the utilization of

RATIONALE:
### AUTHCALL (`0xf7`) Interaction The [EIP-3074](./eip-3074.md) that will be part of the London fork has introduced a new call instruction called `AUTHCALL` (`0xf7`) that


=== EIP-7775 ===
TITLE: BURN opcode
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-09-30
REQUIRES: 

SUMMARY:
This proposal introduces a `BURN` opcode to the EVM. When called, the opcode is to burn native ether at the address of the current

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The motivation for this proposal is to provide a standardized and efficient way to burn native ether directly within the EVM. Historically, contracts such

RATIONALE:
The introduction of the `BURN` opcode helps clean up a piece of weird semantics in the Ethereum. Historically, burning native ether involved sending them


=== EIP-7713 ===
TITLE: Box type for EIP-712 messages
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2024-05-23
REQUIRES: 712

SUMMARY:
This EIP defines a new type `box` for use in [EIP-712](./eip-712.md) messages. A `box` value is a value of an arbitrary struct type whose

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
EIP-712 signatures have become a widely used primitive for users to express and authorize intents off-chain. Wide-ranging applications are able to define parameterized messages

RATIONALE:
TBD <!-- TODO -->


=== EIP-608 ===
TITLE: Hardfork Meta: Tangerine Whistle
TYPE: Meta 
STATUS: Final
CREATED: 2017-04-23
REQUIRES: 1, 5, 0, ,,  , 7, 7, 9

SUMMARY:
This specifies the changes included in the hard fork named Tangerine Whistle (EIP 150).

SPECIFICATION:
- Codename: Tangerine Whistle - Aliases: EIP 150, Anti-DoS - Activation: - Block >= 2,463,000 on Mainnet - Included EIPs: - [EIP-150](./eip-150.md) (Gas cost


=== EIP-7790 ===
TITLE: Controlled Gas Limit Increase Guidelines
TYPE: Informational 
STATUS: Stagnant
CREATED: 2024-10-18
REQUIRES: 7783


=== EIP-5593 ===
TITLE: Restrict Ethereum Provider API Injection
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2022-09-05
REQUIRES: 1193

SUMMARY:
Historically the web platform has had a notion of “powerful” APIs like those defined in W3C's Geolocation specification and W3C's Mediastreams specification, which are

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Wallets are oftentimes maintaining security and safety of users' funds that can be equivalent to large portions of money. For this reason, it's a

RATIONALE:
By limiting the capabilities of where the Ethereum Provider APIs are being injected we can reduce the surface area of where attacks can be


=== EIP-3520 ===
TITLE: Transaction Destination Opcode
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-04-16
REQUIRES: 3508

SUMMARY:
This EIP introduces the following EVM instruction: `ENTRYPOINT`. This instruction is meant to provide access to the original recipient of the transaction, the `to`

SPECIFICATION:
### ENTRYPOINT (`0x4a`) The `ENTRYPOINT` instruction uses 0 stack arguments and pushes the original `to` member of the transaction onto the stack. The address

MOTIVATION:
It is undeniable that smart contracts are becoming more interconnected than ever. Up until this point, smart contracts have entirely relied on compliant interfaces

RATIONALE:
### AUTHCALL (`0xf7`) Interaction The [EIP-3074](./eip-3074.md) introduced a new call instruction called `AUTHCALL` (`0xf7`) that will replace a transaction's `ORIGIN` (`0x32`) with the context


=== EIP-7949 ===
TITLE: Genesis File Format
TYPE: Informational 
STATUS: Draft
CREATED: 2025-05-19
REQUIRES: 

SUMMARY:
This EIP defines a canonical structure for Ethereum genesis files (`genesis.json`) used to bootstrap Ethereum networks. The standard aligns with the de facto structure

SPECIFICATION:
The canonical genesis file MUST be a JSON object with the following top-level fields: ### Top-Level Fields | Field | Description | |-----------------|-----------------------------------------------------------------| |

MOTIVATION:
The lack of an official standard for the `genesis.json` file has led to incompatibilities, bugs and confusion, as well as added workload for those

RATIONALE:
There are a growing number of EIPs that propose improvements to how a network is configured at genesis: [Add Blob Schedule to EL Config


=== EIP-2029 ===
TITLE: State Rent A - State counters contract
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-05-15
REQUIRES: 

SUMMARY:
This is part of the State Rent roadmap. This particular change introduces a place in the Ethereum state where various state counters can be

SPECIFICATION:
Prior to the block A, a contract is deployed with the following code: `0x60 0x20 0x60 0x00 0x80 0x80 0x35 0x54 0x90 0x52 0xF3`,

MOTIVATION:
Ethereum currently does not have a special place in the state for tracking state counters such as number of transactions or number of accounts.

RATIONALE:
Two alternative solutions were considered so far: 1. Extending the structure of the Ethereum state to introduce more fields, and hence change the way


=== EIP-7848 ===
TITLE: On-chain upgrade signaling
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-12-22
REQUIRES: 

SUMMARY:
This proposal adds a mechanism for clients to signal their willingness for a network upgrade by including a “reference implementation hash” field in each

SPECIFICATION:
Ethereum consensus clients shall identify with a reference implementation having its equivalent behaviors. Ethereum consensus clients shall include a `referenceImplementationHash` (specified below) field immediately

MOTIVATION:
Currently, upgrades to Ethereum Mainnet are announced on the ethereum.org blog. This proposal changes that process by activating upgrades based on the consent of

RATIONALE:
### Forking is no Longer Possible Since the merge, forking Ethereum Mainnet has become practically impossible. Validators stake valuable assets to participate in the


=== EIP-3030 ===
TITLE: BLS Remote Signer HTTP API
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2020-09-30
REQUIRES: 

SUMMARY:
A [validator](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/validator.md) client contributes to the consensus of the Eth2 blockchain by signing proposals and attestations of blocks, using a BLS private key which

SPECIFICATION:
### `GET /upcheck` _**Responses**_ Success | <br> --- | --- Code | `200` Content | `{"status": "OK"}` --- ### `GET /keys` Returns the identifiers

MOTIVATION:
Eth2 utilizes [BLS12-381](https://github.com/cfrg/draft-irtf-cfrg-bls-signature/) signatures. Consensus on the eth2 Blockchain is achieved via the proposal and attestation of blocks from validator clients, using a BLS

RATIONALE:
### UNIX philosophy: Simple API This API specification contains only three methods: one for **status**, one for **listing the available keys**, and one to


=== EIP-7542 ===
TITLE: eth/70 - available-blocks-extended protocol
TYPE: Standards Track Networking
STATUS: Withdrawn
CREATED: 2023-10-21
REQUIRES: 7642

SUMMARY:
The purpose of this EIP is to introduce a method that allows an Ethereum node to communicate the range of blocks it has available.

SPECIFICATION:
- Advertise a new `eth` protocol capability (version) at `eth/70`. - The old `eth/69` protocol should still be kept alive side-by-side, until `eth/70` is

MOTIVATION:
In a first stage of [EIP-4444](./eip-4444.md), some nodes will still need to serve the historical data of the chain and others might be interested

RATIONALE:
Including the available block range in the `eth` handshake allows for immediate understanding of peer capabilities. This can lead to more efficient networking as


=== EIP-5027 ===
TITLE: Remove the limit on contract code size
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-04-21
REQUIRES: 1, 7, 0, ,,  , 2, 9, 2, 9, ,,  , 2, 9, 3, 0

SUMMARY:
Remove the limit on the contract code size, i.e., only limit the contract code size by block gas limit, with minimal changes to existing

SPECIFICATION:
### Parameters | Constant | Value | | ------------------------- | ---------------- | | `FORK_BLKNUM` | TBD | | `CODE_SIZE_UNIT` | 24576 | | `COLD_ACCOUNT_CODE_ACCESS_COST_PER_UNIT`

MOTIVATION:
The motivation is to remove the limit on the code size so that users can deploy a large-code contract without worrying about splitting the

RATIONALE:
### Gas Metering The goal is to measure the CPU/IO cost of the contract read/write operations reusing existing gas metering so that the resources


=== EIP-7692 ===
TITLE: EVM Object Format (EOFv1) Meta
TYPE: Meta 
STATUS: Review
CREATED: 2024-04-17
REQUIRES: 6, 6, 3, ,,  , 3, 5, 4, 0, ,,  , 3, 6, 7, 0, ,,  , 4, 2, 0, 0, ,,  , 4, 7, 5, 0, ,,  , 5, 4, 5, 0, ,,  , 6, 2, 0, 6, ,,  , 7, 0, 6, 9, ,,  , 7, 4, 8, 0, ,,  , 7, 6, 2, 0, ,,  , 7, 6, 9, 8

SUMMARY:
This Meta EIP lists the EIPs which belong to the EVM Object Format (EOF) proposal, in its first version (EOFv1), also known as the

SPECIFICATION:
### EIPs Included Introduced in eof-devnet-0 - [EIP-3540](./eip-3540.md): EOF - EVM Object Format v1 - [EIP-3670](./eip-3670.md): EOF - Code Validation - [EIP-4200](./eip-4200.md): EOF -

RATIONALE:
Refer to the individual EIPs.


=== EIP-6916 ===
TITLE: Automatically Reset Testnet
TYPE: Standards Track Core
STATUS: Final
CREATED: 2023-04-10
REQUIRES: 

SUMMARY:
This EIP proposes a specification for an automatically reset testnet, a novel approach to testnets that can be implemented within Ethereum clients. It enables

SPECIFICATION:
The testnet is set to always reset after a predefined time period. The reset means the generation of the next genesis, discarding the old

MOTIVATION:
A testnet which automatically resets can provide an alternative environment for short-term testing of applications, validators and also breaking changes in client implementations. It

RATIONALE:
Ephemeral testnets with deterministic parameters provide a sustainable alternative to traditional testnets, with the same infrastructure. At each reset, the validator set is cleared,


=== EIP-3044 ===
TITLE: Adds `baseFee` to `eth_getBlockByNumber`
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2020-10-14
REQUIRES: 1, 4, 7, 4, ,,  , 1, 5, 5, 9

SUMMARY:
Adds `baseFee` property to the `eth_getBlockByNumber` JSON-RPC request `result` object. This property will contain the value of the base fee for any block after

SPECIFICATION:
### `eth_getBlockByNumber` #### Description Returns information about a block specified by number. Every block returned by this endpoint whose block number is before the

MOTIVATION:
[EIP-1559](./eip-1559.md) introduces a base fee per gas in protocol. This value is maintained under consensus as a new field in the block header structure.

RATIONALE:
The addition of a single parameter instead of introducing a whole new endpoint was the simplest change that would be easiest to get integrated.


=== EIP-140 ===
TITLE: REVERT instruction
TYPE: Standards Track Core
STATUS: Final
CREATED: 2017-02-06
REQUIRES: 

SUMMARY:
The `REVERT` instruction will stop execution, roll back all state changes done so far and provide a pointer to a memory section, which can

SPECIFICATION:
On blocks with `block.number >= BYZANTIUM_FORK_BLKNUM`, the `REVERT` instruction is introduced at `0xfd`. It expects two stack items, the top item is the `memory_offset`

MOTIVATION:
Currently this is not possible. There are two practical ways to revert a transaction from within a contract: running out of gas or executing


=== EIP-1485 ===
TITLE: TEthashV1
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-11-01
REQUIRES: 

SUMMARY:
This EIP pursue "obsolete current ASIC miners" by modifying PoW algorithm in a very low risk manner and update to latest hash algorithm from

SPECIFICATION:
#### 1. Reference materials on ETHASH FNV0 #### Where FNV Applied on ETHASH - In [ETHASH](https://github.com/ethereum/wiki/wiki/Ethash) , FNV Hash is used on * 1)

MOTIVATION:
Provide original Ethash proof of work verification with minimal set of changes by updating FNV0 algorithm

RATIONALE:
In case of ethash algorithm, it can't prevent ASIC forever. And, current ethash algorithm's FNV function is deprecated. So, It needs to be upgraded


=== EIP-234 ===
TITLE: Add `blockHash` to JSON-RPC filter options.
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2017-03-24
REQUIRES: 1474

SUMMARY:
This addition would allow clients to fetch logs for specific blocks, whether those blocks were in the current main chain or not. This resolves

SPECIFICATION:
The filter options used by `eth_newFilter` would have an additional optional parameter named `blockHash` whose value is a single block hash. The Ethereum node

RATIONALE:
A client (dApp) who needs reliable notification of both log additions (on new blocks) and log removals (on chain reorgs) cannot achieve this while


=== EIP-2936 ===
TITLE: EXTCLEAR Opcode For SELFDESTRUCTed contracts
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-09-03
REQUIRES: 

SUMMARY:
Changes `SELFDESTRUCT` (`0xff`) to not clear any storage and adds a new `EXTCLEAR` (`0x5c`) opcode that will clear a specific storage slot for a

SPECIFICATION:
After `FORK_BLOCK_NUM`, a new opcode, `EXTCLEAR`, is enabled at `0x5C` to clear storage for `SELFDESTRUCT`ed contracts. `EXTCLEAR`: * does not push any words onto

MOTIVATION:
`SELFDESTRUCT` (`0xFF`) is unnecessarily complex because it clears an unbounded amount of contract storage. It is computationally expensive for nodes to track all of

RATIONALE:
`0x5C` is available in the same range as `SSTORE` and `SLOAD`.


=== EIP-3368 ===
TITLE: Increase block rewards to 3 ETH, with 2 Year Decay to 1 ETH Scheduled
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-03-12
REQUIRES: 

SUMMARY:
Set the block reward to 3 ETH and then decrease it slightly every block for 4,724,000 blocks (approximately 2 years) until it reaches 1

SPECIFICATION:
Adjust block, uncle, and nephew rewards ### Constants * `TRANSITION_START_BLOCK_NUMBER: TBD` * `TRANSITION_DURATION: 4_724_000` (about two years) * `TRANSITION_END_BLOCK_NUMBER: FORK_BLOCK_NUMBER + TRANSITION_DURATION` * `STARTING_REWARD:

MOTIVATION:
A sudden drop in PoW mining rewards could result in a sudden precipitous decrease in mining profitability that may drive miners to auction off

RATIONALE:
2 years was chosen because it gives miners sufficient time to find alternative uses for their hardware and/or get their hardware back out onto


=== EIP-7804 ===
TITLE: Withdrawal Credential Update Request
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-10-31
REQUIRES: 

SUMMARY:
This proposal defines a mechanism to allow validators to update their withdrawal credentials using a new execution request type (0x03). The request allows for

SPECIFICATION:
### Constants | Name | Value | Comment | | - | - | - | |`FORK_TIMESTAMP` | *TBD* | Mainnet | ### Configuration

MOTIVATION:
When the ability to update a validator BLS withdrawal credentials to execution address was introduced in Capella, one of the most common questions was

RATIONALE:
<!-- TODO -->


=== EIP-7703 ===
TITLE: Increase calldata cost
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-05-07
REQUIRES: 

SUMMARY:
An adjustment in the Ethereum calldata cost which reduces the maximum possible block size and allows a higher block gas limit.

SPECIFICATION:
* Increase `G_CALLDATAZERO` from 4 to 12. * Increase `G_CALLDATANONZERO` from 16 to 48.

MOTIVATION:
Larger blocks take longer to propagate through the network. In this way, the maximum potential block size is constraining the block gas limit. Therefore,

RATIONALE:
Tripling the gas cost of calldata reduces the maximum possible block size by a factor of three.


=== EIP-3026 ===
TITLE: BW6-761 curve operations
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-10-05
REQUIRES: 2539

SUMMARY:
This precompile adds operations for the BW6-761 curve (from the EY/Inria **Optimized and secure pairing-friendly elliptic curves suitable for one layer proof composition** research

SPECIFICATION:
Curve parameters: The BW6-761 `y^2=x^3-1` curve is fully defined by the following set of parameters: ``` Base field modulus = 0x122e824fb83ce0ad187c94004faff3eb926186a81d14688528275ef8087be41707ba638e584e91903cebaff25b423048689c8ed12f9fd9071dcd3dc73ebff2e98a116c25667a8f8160cf8aeeaf0a437e6913e6870000082f49d00000000008b A coefficient =

MOTIVATION:
This EIP is based on and tends to replace matter-labs' proposal for significant performance reasons. In most applications, BW6-761 is used as an outer

RATIONALE:
Gas costs are based on [EIP-1962](./eip-1962.md) estimation strategy (but do not fully include yet parsing of ABI, decoding and encoding of the result as


=== EIP-3143 ===
TITLE: Increase block rewards to 5 ETH
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-12-01
REQUIRES: 

SUMMARY:
Starting with `FORK_BLKNUM` block rewards will be increased to a base of 5 ETH, uncle and nephew rewards will be adjusted accordingly.

SPECIFICATION:
#### Adjust Block, Uncle, and Nephew rewards Adjust the block reward to `new_block_reward`, where new_block_reward = 5_000_000_000_000_000_000 if block.number >= FORK_BLKNUM else block.reward (5E18

MOTIVATION:
Currently, the transaction fees (tx fees) portion of the mining rewards makes up a significant portion of the total rewards per block, at times

RATIONALE:
A 5 ETH base reward was chosen as a middle ground between wanting to prevent too high of an inflation rate (10.4% per annum


=== EIP-2657 ===
TITLE: Ephemeral Testnet Yolo
TYPE: Meta 
STATUS: Stagnant
CREATED: 2020-04-19
REQUIRES: 

SUMMARY:
The specification for Ephemeral Testnet Yolo. Clients who wish to sync need to implement the following features into their client. It is for testing


=== EIP-7657 ===
TITLE: Sync committee slashings
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-03-21
REQUIRES: 

SUMMARY:
This EIP defines a slashing condition for malicious [sync committee messages](https://github.com/ethereum/consensus-specs/blob/b3e83f6691c61e5b35136000146015653b22ed38/specs/altair/validator.md#containers).

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
A dishonest supermajority of sync committee members is able to convince applications relying on Ethereum's [light client sync protocol](https://github.com/ethereum/consensus-specs/blob/b3e83f6691c61e5b35136000146015653b22ed38/specs/altair/light-client/sync-protocol.md) to assume a non-canonical finalized

RATIONALE:
### What's the use case? Without a slashing, the light client sync protocol is somewhat limited. While wallet applications may benefit from it (the


=== EIP-3 ===
TITLE: Addition of CALLDEPTH opcode
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2015-11-19
REQUIRES: 


=== EIP-999 ===
TITLE: Restore Contract Code at 0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2018-04-04
REQUIRES: 

SUMMARY:
The `WalletLibrary` contract was used by the [Parity Wallet](https://www.parity.io/) to reduce gas costs for users deploying multi-signature wallets on the Ethereum blockchain. It contained

SPECIFICATION:
The self-destructed contract code at [`0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4`](https://etherscan.io/address/0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4#code) shall be replaced with a patched version of the [`walletLibrary.sol`](https://github.com/parity-contracts/0x863df6bfa4/blob/master/contracts/walletLibrary.sol) as reviewed, tested, and approved in [parity-contracts/0x863df6bfa4](https://github.com/parity-contracts/0x863df6bfa4): ```json

MOTIVATION:
This proposal is necessary because the Ethereum protocol does not allow the restoration of self-destructed contracts and there is no other simple way to

RATIONALE:
The design decision to restore the `WalletLibrary` contract code in a single state transition was made after lengthy discussions of [alternate proposals](https://gist.github.com/5chdn/a9bb8617cc8523a030126a3d1c60baf3) that explored


=== EIP-695 ===
TITLE: Create `eth_chainId` method for JSON-RPC
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2017-08-21
REQUIRES: 155

SUMMARY:
The `eth_chainId` method should return a single STRING result for an integer value in hexadecimal format, describing the currently configured `CHAIN_ID` value used for

SPECIFICATION:
### `eth_chainId` Returns the currently configured chain ID, a value used in replay-protected transaction signing as introduced by [EIP-155](./eip-155.md). The chain ID returned should

MOTIVATION:
Currently although we can use `net_version` RPC call to get the current network ID, there's no RPC for querying the chain ID. This makes

RATIONALE:
An ETH/ETC client can accidentally connect to an ETC/ETH RPC endpoint without knowing it unless it tries to sign a transaction or it fetch


=== EIP-1013 ===
TITLE: Hardfork Meta: Constantinople
TYPE: Meta 
STATUS: Final
CREATED: 2018-04-20
REQUIRES: 1, 4, 5, ,,  , 6, 0, 9, ,,  , 1, 0, 1, 4, ,,  , 1, 0, 5, 2, ,,  , 1, 2, 3, 4, ,,  , 1, 2, 8, 3

SUMMARY:
This meta-EIP specifies the changes included in the Ethereum hardfork named Constantinople.

SPECIFICATION:
- Codename: Constantinople - Aliases: Metropolis/Constantinople, Metropolis part 2 - Activation: - `Block >= 7_280_000` on the Ethereum Mainnet - `Block >= 4,230,000` on


=== EIP-2681 ===
TITLE: Limit account nonce to 2^64-1
TYPE: Standards Track Core
STATUS: Final
CREATED: 2020-04-25
REQUIRES: 

SUMMARY:
Limit account nonce to be between `0` and `2^64-1`.

SPECIFICATION:
Introduce two new restrictions retroactively from genesis: 1. Consider any transaction invalid, where the nonce exceeds or equals to `2^64-1`. 2. The `CREATE` and

MOTIVATION:
Account nonces are currently specified to be arbitrarily long unsigned integers. Dealing with arbitrary length data in the state witnesses is not optimal, therefore

RATIONALE:
1. It is unlikely for any nonce to reach or exceed the proposed limit. If one would want to reach that limit via external


=== EIP-1285 ===
TITLE: Increase Gcallstipend gas in the CALL opcode
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-08-01
REQUIRES: 

SUMMARY:
Currently, the ``CALL`` opcode forwards a stipend of ``2,300`` gas units for a non zero value ``CALL`` operations where a contract is called. This

SPECIFICATION:
Increase the ``Gcallstipend`` fee parameter in the ``CALL`` opcode from ``2,300`` to ``3,500`` gas unit. The actual change to the Ethereum clients would be

MOTIVATION:
The main motivation behind this EIP is to allow simple fallback functions to be implemented for contracts following the ``"Proxy"`` pattern. Simply explained, a

RATIONALE:
The rational for increasing the ``Gcallstipend`` gas parameter by ``1,200`` gas units comes from the cost of performing ``DELEGATECALL`` and ``SLOAD`` with a small


=== EIP-7928 ===
TITLE: Block-Level Access Lists
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-03-31
REQUIRES: 

SUMMARY:
This EIP introduces Block-Level Access Lists (BALs) that record all accounts and storage locations accessed during block execution, along with their post-execution values. BALs

SPECIFICATION:
### Block Structure Modification We introduce a new field to the block header: ```python class Header: # Existing fields ... block_access_list_hash: Hash32 ``` The

MOTIVATION:
Transaction execution cannot be parallelized without knowing in advance which addresses and storage slots will be accessed. While [EIP-2930](./eip-2930.md) introduced optional transaction access lists,

RATIONALE:
### BAL Design Choice This design variant was chosen for several key reasons: 1. **Size vs parallelization**: BALs include all accessed addresses (even unchanged)


=== EIP-4488 ===
TITLE: Transaction calldata gas cost reduction with total calldata limit
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-11-23
REQUIRES: 

SUMMARY:
Decrease transaction calldata gas cost, and add a limit of how much total transaction calldata can be in a block.

SPECIFICATION:
| Parameter | Value | | - | - | | `NEW_CALLDATA_GAS_COST` | `3` | | `BASE_MAX_CALLDATA_PER_BLOCK` | `1,048,576` | | `CALLDATA_PER_TX_STIPEND` | `300`

MOTIVATION:
Rollups are in the short and medium term, and possibly the long term, the only trustless scaling solution for Ethereum. Transaction fees on L1

RATIONALE:
A natural alternative proposal is to decrease `NEW_CALLDATA_GAS_COST` without adding a limit. However, this presents a security concern: today, the average block size [is


=== EIP-2938 ===
TITLE: Account Abstraction
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-09-04
REQUIRES: 2718

SUMMARY:
**See also: [https://ethereum-magicians.org/t/implementing-account-abstraction-as-part-of-eth1-x/4020](https://ethereum-magicians.org/t/implementing-account-abstraction-as-part-of-eth1-x/4020) and the links therein for historical work and motivation.** Transaction validity, as of Muir Glacier, is defined rigidly by the protocol:

SPECIFICATION:
### Single Tenant After `FORK_BLOCK`, the following changes will be recognized by the protocol. #### Constants | Constant | Value | | - |

MOTIVATION:
The existing limitations preclude innovation in a number of important areas, particularly: 1. Smart contract wallets that use signature verification other than ECDSA (eg.

RATIONALE:
The core problem in an account abstraction setup is always that miners and network nodes need to be able to verify that a transaction


=== EIP-6206 ===
TITLE: EOF - JUMPF and non-returning functions
TYPE: Standards Track Core
STATUS: Review
CREATED: 2022-12-21
REQUIRES: 4, 7, 5, 0, ,,  , 5, 4, 5, 0

SUMMARY:
This EIP allows for tail call optimizations in EOF functions ([EIP-4750](./eip-4750.md)) by introducing a new instruction `JUMPF`, which jumps to a code section without

SPECIFICATION:
### Type section changes We define a non-returning section as one that cannot return control to its caller section. Type section `outputs` field contains

MOTIVATION:
It is common for functions to make a call at the end of the routine only to then return. `JUMPF` optimizes this behavior by

RATIONALE:
### Allowing `JUMPF` to section with less outputs An alternative rule for `JUMPF` stack validation could require the target section's outputs to be exactly


=== EIP-7732 ===
TITLE: Enshrined Proposer-Builder Separation
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-06-28
REQUIRES: 

SUMMARY:
This EIP fundamentally changes the way an Ethereum block is validated by decoupling the execution validation from the consensus validation both logically as well

SPECIFICATION:
### Execution Layer No changes are required. ### Consensus Layer The full consensus changes can be found in the consensus-specs Github repository. They are

MOTIVATION:
This EIP solves a different set of unrelated important problems. - An overwhelming majority of beacon block proposers outsource the construction of the execution

RATIONALE:
### Staked builders Being a builder is a new attribution of validators. As such builders are staked in the beacon chain. This allows for


=== EIP-2972 ===
TITLE: Wrapped Legacy Transactions
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2020-09-12
REQUIRES: 1, 5, 5, ,,  , 2, 7, 1, 8

SUMMARY:
Introduces two new [EIP-2718](./eip-2718.md) transactions that are signature compatible with legacy transactions and can be automatically upgraded by any client. * `0x00 || ssz.serialize(yParity,

SPECIFICATION:
### Definitions * `||` is the byte/byte-array concatenation operator. * `yParity` is the parity (0 for even, 1 for odd) of the `y` value

MOTIVATION:
We would like to eventually deprecate legacy transactions so we no longer have to retain code in the networking and signer layer that deals

RATIONALE:
### Signature doesn't include transaction type as first signature byte These transaction types are explicitly designed to be signature compatible with legacy transactions, which


=== EIP-7723 ===
TITLE: Network Upgrade Inclusion Stages
TYPE: Meta 
STATUS: Last Call
CREATED: 2024-06-12
REQUIRES: 

SUMMARY:
Define the stages that EIPs go through in the process of planning network upgrades: `Proposed for Inclusion`, `Considered for Inclusion`, `Scheduled for Inclusion`, `Declined

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
This EIP proposes definitions for the various stages EIPs go through when planning network upgrades. It also provides context and guidelines around when and

RATIONALE:
Formalizing the `Proposed for Inclusion`, `Considered for Inclusion`, `Scheduled for Inclusion`, `Declined for Inclusion` and `Included` stages provides better legibility to both protocol maintainers


=== EIP-5345 ===
TITLE: Silent Signing Extension for JSON-RPC
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2022-07-26
REQUIRES: 

SUMMARY:
Mobile applications supporting lots of transactions might become a source of bad user experience due to uncontrolled switching between the wallet's and application's UI.

SPECIFICATION:
To remedy the situation, we'd like to introduce new RPC methods for the ethereum JSON-RPC. Those methods help enable wallets to implement the Silent

MOTIVATION:
Some blockchain applications interact with a blockchain much more frequently than others. It is especially true for gaming applications having their own sidechains. Interrupting

RATIONALE:
Games and Metaverse applications imply lots of cases when the user interacts with the wallet, switching to it and approving transactions. This switching aspect


=== EIP-7864 ===
TITLE: Ethereum state using a unified binary tree
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-01-20
REQUIRES: 

SUMMARY:
Introduce a new binary state tree, intended to replace the hexary patricia trees. Account and storage tries are merged into a single tree with

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be

MOTIVATION:
Ethereum's long-term goal is to allow blocks to be proved with validity proof so that chain verification is as simple and fast as possible.

RATIONALE:
This EIP defines a new Binary Tree that starts empty. Only new state changes are stored in the tree. The MPT continues to exist


=== EIP-3041 ===
TITLE: Adds `baseFee` to `eth_getBlockByHash`
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2020-10-13
REQUIRES: 1, 4, 7, 4, ,,  , 1, 5, 5, 9

SUMMARY:
Adds `baseFee` property to the `eth_getBlockByHash` JSON-RPC request `result` object. This property will contain the value of the base fee for any block after

SPECIFICATION:
### `eth_getBlockByHash` #### Description Returns information about a block specified by hash. Every block returned by this endpoint whose block number is before the

MOTIVATION:
[EIP-1559](./eip-1559.md) introduces a base fee per gas in protocol. This value is maintained under consensus as a new field in the block header structure.

RATIONALE:
The addition of a single parameter instead of introducing a whole new endpoint was the simplest change that would be easiest to get integrated.


=== EIP-1108 ===
TITLE: Reduce alt_bn128 precompile gas costs
TYPE: Standards Track Core
STATUS: Final
CREATED: 2018-05-21
REQUIRES: 1, 9, 6, ,,  , 1, 9, 7

SUMMARY:
Changes in 2018 to the underlying library used by the official Go reference implementation led to significant performance gains for the `ECADD`, `ECMUL`, and

SPECIFICATION:
Following is a table with the current gas cost and new gas cost: | Contract | Address | Current Gas Cost | Updated Gas

MOTIVATION:
Recently, the underlying library used by the [official Go reference implementation](https://github.com/ethereum/go-ethereum) to implement the `ECADD` (at address `0x06`), `ECMUL` (at address `0x07`), and pairing


=== EIP-5283 ===
TITLE: Semaphore for Reentrancy Protection
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-07-17
REQUIRES: 2, 0, ,,  , 1, 2, 8, 3, ,,  , 1, 3, 5, 2

SUMMARY:
This EIP proposes adding a precompiled contract that provides a semaphore function for creating a new type of reentrancy protection guard (RPG). This function

SPECIFICATION:
Starting from an activation block (TBD) a new precompiled contract `Semaphore` is created at address `0x0A`. When `Semaphore` is called, if the caller address

MOTIVATION:
The typical smart contract RPG uses a contract storage cell. The algorithm is simple: the code checks that a storage cell is 0 (or

RATIONALE:
The address `0x0A` is the next one available within the range defined by [EIP-1352](./eip-1352). ### Sample usage ```solidity pragma solidity ^0.8.0; abstract contract ReentrancyGuard2


=== EIP-658 ===
TITLE: Embedding transaction status code in receipts
TYPE: Standards Track Core
STATUS: Final
CREATED: 2017-06-30
REQUIRES: 140

SUMMARY:
This EIP replaces the intermediate state root field of the receipt with a status code indicating if the top-level call succeeded or failed.

SPECIFICATION:
For blocks where block.number >= BYZANTIUM_FORK_BLKNUM, the intermediate state root is replaced by a status code, 0 indicating failure (due to any operation that

MOTIVATION:
With the introduction of the REVERT opcode in EIP140, it is no longer possible for users to assume that a transaction failed iff it

RATIONALE:
This constitutes a minimal possible change that permits fetching the success/failure state of transactions, preserving existing capabilities with minimum disruption or additional work for


=== EIP-2970 ===
TITLE: IS_STATIC opcode
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-09-13
REQUIRES: 

SPECIFICATION:
Add a `IS_STATIC (0x4A)` opcode that pushes `1` if the current context is static (ie. the execution is in a `STATICCALL` or a descendant

MOTIVATION:
The main intended use case is to allow account abstraction (EIP 2938) to be extended so that accounts can allow static calls from the

RATIONALE:
Determining staticness is already possibly using the following hacky technique: make a `CALL` with limited gas, and inside that `CALL` issue one `LOG` and


=== EIP-7799 ===
TITLE: System logs
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-10-29
REQUIRES: 1, 5, 5, 9, ,,  , 4, 8, 9, 5, ,,  , 6, 4, 6, 6, ,,  , 7, 7, 0, 8, ,,  , 7, 9, 1, 6

SUMMARY:
This EIP defines an extension for eth_getLogs to provide logs for events that are not associated with a given transaction, such as block rewards

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
With [EIP-7708](./eip-7708.md) wallets gain the ability to use eth_getLogs to track changes to their ETH balance. However, the ETH balance may change without an

RATIONALE:
Together with [EIP-7708](./eip-7708.md) this EIP provides the ability for wallets to compute the exact ETH balance from logs without requiring download of every single


=== EIP-3670 ===
TITLE: EOF - Code Validation
TYPE: Standards Track Core
STATUS: Review
CREATED: 2021-06-23
REQUIRES: 3540

SUMMARY:
Introduce code validation at contract creation time for EOF formatted ([EIP-3540](./eip-3540.md)) contracts. Reject contracts which contain truncated `PUSH`-data or undefined instructions. Legacy bytecode (code

SPECIFICATION:
This feature is introduced on the same block EIP-3540 is enabled, therefore every EOF1-compatible bytecode MUST be validated according to these rules. 1. Previously

MOTIVATION:
Currently existing contracts require no validation of correctness and EVM implementations can decide how they handle truncated bytecode or undefined instructions. This change aims

RATIONALE:
### Immediate data Allowing implicit zero immediate data for `PUSH` instructions introduces inefficiencies to EVM implementations without any practical use-case (the value of a


=== EIP-5792 ===
TITLE: Wallet Call API
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2022-10-17
REQUIRES: 1193

SUMMARY:
Defines new JSON-RPC methods which enable apps to ask a wallet to process a batch of onchain write calls and to check on the

SPECIFICATION:
Four new JSON-RPC methods are added: three are for handling batches of onchain calls, and one is for querying support for wallet capabilities, such

MOTIVATION:
The current methods used to send transactions from the user wallet and check their status are `eth_sendTransaction` and `eth_getTransactionReceipt`. The current methods used to

RATIONALE:
### On Naming We considered modifying `eth_sendTransaction` to add support for these new capabilities, but the method is ultimately an artifact of when nodes


=== EIP-211 ===
TITLE: New opcodes: RETURNDATASIZE and RETURNDATACOPY
TYPE: Standards Track Core
STATUS: Final
CREATED: 2017-02-13
REQUIRES: 

SUMMARY:
Please see summary.

SPECIFICATION:
If `block.number >= BYZANTIUM_FORK_BLKNUM`, add two new opcodes and amend the semantics of any opcode that creates a new call frame (like `CALL`, `CREATE`,

MOTIVATION:
In some situations, it is vital for a function to be able to return data whose length cannot be anticipated before the call. In

RATIONALE:
Other solutions that would allow returning dynamic data were considered, but they all had to deduct the gas from the call opcode and thus


=== EIP-1010 ===
TITLE: Uniformity Between 0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B and 0x15E55EF43efA8348dDaeAa455F16C43B64917e3c
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-04-18
REQUIRES: 

SUMMARY:
As of the date of this EIP, the difference in balance between address `0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B` and address `0x15E55EF43efA8348dDaeAa455F16C43B64917e3c` is far from equitable or uniform, with

SPECIFICATION:
The balance of `0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B` will be decreased by 100,000 ether. The balance of `0x15E55EF43efA8348dDaeAa455F16C43B64917e3c` will be increased by 100,000 ether. No net change in

MOTIVATION:
This proposal is necessary because the Ethereum protocol does not allow the owner of an address which does not own an equitable amount of

RATIONALE:
The value 100,000 was chosen after careful technically sound analysis of various economic theories developed over the past century. In spite of the fact


=== EIP-5069 ===
TITLE: EIP Editor Handbook
TYPE: Meta 
STATUS: Living
CREATED: 2022-05-02
REQUIRES: 1


=== EIP-7892 ===
TITLE: Blob Parameter Only Hardforks
TYPE: Informational 
STATUS: Draft
CREATED: 2025-02-28
REQUIRES: 7840

SUMMARY:
This EIP introduces **Blob Parameter Only (BPO) Hardforks**, a lightweight mechanism for incrementally scaling Ethereum’s blob capacity through targeted hard forks that modify only

SPECIFICATION:
### Definition BPO hardforks are defined as protocol upgrades that modify only blob-related parameters through configuration, without requiring any client-side code changes. The new

MOTIVATION:
Ethereum's scaling strategy relies on Layer 2 (L2) solutions for transaction execution while using Ethereum as a **data availability (DA) layer**. However, the demand

RATIONALE:
### Why not just use regular hardforks? Full hard forks require extensive coordination, testing, and implementation changes beyond parameter adjustments. For example, in Lighthouse,


=== EIP-7658 ===
TITLE: Light client data backfill
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-03-21
REQUIRES: 

SUMMARY:
This EIP defines a mechanism for syncing [light client data](https://github.com/ethereum/consensus-specs/blob/4afe39822c9ad9747e0f5635cca117c18441ec1b/specs/altair/light-client/full-node.md) between beacon nodes.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[Light client data](https://github.com/ethereum/consensus-specs/blob/4afe39822c9ad9747e0f5635cca117c18441ec1b/specs/altair/light-client/full-node.md) is collected by beacon nodes to assist [light clients](https://github.com/ethereum/consensus-specs/blob/4afe39822c9ad9747e0f5635cca117c18441ec1b/specs/altair/light-client/light-client.md) to sync with the network. The [sync protocol](https://github.com/ethereum/consensus-specs/blob/4afe39822c9ad9747e0f5635cca117c18441ec1b/specs/altair/light-client/sync-protocol.md) defines a mechanism to

RATIONALE:
### How to rank `SyncAggregate`? The EIP reuses the [`is_better_update`](https://github.com/ethereum/consensus-specs/blob/4afe39822c9ad9747e0f5635cca117c18441ec1b/specs/altair/light-client/sync-protocol.md#is_better_update) function from existing specs. ### How could a backfill protocol use this? Once the


=== EIP-609 ===
TITLE: Hardfork Meta: Byzantium
TYPE: Meta 
STATUS: Final
CREATED: 2017-04-23
REQUIRES: 1, 0, 0, ,,  , 1, 4, 0, ,,  , 1, 9, 6, ,,  , 1, 9, 7, ,,  , 1, 9, 8, ,,  , 2, 1, 1, ,,  , 2, 1, 4, ,,  , 6, 0, 7, ,,  , 6, 4, 9, ,,  , 6, 5, 8

SUMMARY:
This specifies the changes included in the hard fork named Byzantium.

SPECIFICATION:
- Codename: Byzantium - Aliases: Metropolis/Byzantium, Metropolis part 1 - Activation: - Block >= 4,370,000 on Mainnet - Block >= 1,700,000 on Ropsten testnet


=== EIP-689 ===
TITLE: Address Collision of Contract Address Causes Exceptional Halt
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2017-08-15
REQUIRES: 

SUMMARY:
Some test cases in the consensus test suite try to deploy a contract at an address already with nonempty code. Although such cases can

SPECIFICATION:
If `block.number >= 0`, when a contract creation is on an account with non-zero nonce or non-empty code, the creation fails as if init

MOTIVATION:
This EIP has no practical relevance to the main net history, but simplifies testing and reasoning. This EIP has no effects after Constantinople fork

RATIONALE:
It seems impractical to implement never-used features just for passing tests. Client implementations will be simpler with this EIP.


=== EIP-607 ===
TITLE: Hardfork Meta: Spurious Dragon
TYPE: Meta 
STATUS: Final
CREATED: 2017-04-23
REQUIRES: 1, 5, 5, ,,  , 1, 6, 0, ,,  , 1, 6, 1, ,,  , 1, 7, 0, ,,  , 6, 0, 8

SUMMARY:
This specifies the changes included in the hard fork named Spurious Dragon.

SPECIFICATION:
- Codename: Spurious Dragon - Aliases: State-clearing - Activation: - Block >= 2,675,000 on Mainnet - Block >= 1,885,000 on Morden - Included EIPs:


=== EIP-7915 ===
TITLE: Adaptive mean reversion blob pricing
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-03-23
REQUIRES: 4844

SUMMARY:
Reworks the excess blob gas update in `calc_excess_blob_gas()` so that the blob base fee rises relatively more during high gas usage than it falls

SPECIFICATION:
### Parameters | Constant | Value | Short description | | - | - | - | | `EMA_DECAY` | `2**18` | Reciprocal of

MOTIVATION:
Demand for blobspace is fee-inelastic, leading to a blob base fee that may fluctuate excessively with minor shifts in aggregate demand. The lower end

RATIONALE:
### Supply and demand Since the introduction of blobs, the reservation fee of the marginal consumer of blobs has periodically been very low. Whenever


=== EIP-2718 ===
TITLE: Typed Transaction Envelope
TYPE: Standards Track Core
STATUS: Final
CREATED: 2020-06-13
REQUIRES: 

SUMMARY:
`TransactionType || TransactionPayload` is a valid transaction and `TransactionType || ReceiptPayload` is a valid transaction receipt where `TransactionType` identifies the format of the transaction

SPECIFICATION:
### Definitions * `||` is the byte/byte-array concatenation operator. ### Transactions As of `FORK_BLOCK_NUMBER`, the transaction root in the block header **MUST** be the

MOTIVATION:
In the past, when we have wanted to add new transaction types we have had to ensure they were backward compatible with all other

RATIONALE:
### TransactionType only goes up to 0x7f For the forseable future, 0x7f is plenty and it leaves open a number of options for extending


=== EIP-7587 ===
TITLE: Reserve Precompile Address Range for RIPs
TYPE: Meta 
STATUS: Final
CREATED: 2023-12-21
REQUIRES: 

SUMMARY:
This EIP reserves precompile ranges to ensure there are no conflicts with those used by the Rollup Improvement Proposal (RIP) process.

SPECIFICATION:
The address range between `0x0000000000000000000000000000000000000100` and `0x00000000000000000000000000000000000001ff` is reserved for use by the RIP process.

MOTIVATION:
As L2s begin to deploy RIPs, it is necessary to reserve an address range for use by the RIP process so as to ensure

RATIONALE:
By reserving an address range for RIPs, it allows the RIP process to maintain its own registry of precompiles that are not (necessarily) deployed


=== EIP-1965 ===
TITLE: Method to check if a chainID is valid at a specific block Number
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-04-20
REQUIRES: 155

SUMMARY:
This EIP adds a precompile that returns whether a specific chainID (EIP-155 unique identifier) is valid at a specific blockNumber. ChainID are assumed to

SPECIFICATION:
Adds a new precompile which uses 2 argument : a 32 bytes value that represent the chainID to test and a 32 bytes value

MOTIVATION:
[EIP-155](./eip-155.md) proposes to use the chain ID to prevent the replay of transactions between different chains. It would be a great benefit to have

RATIONALE:
The rationale at EIP-1959 applies here as well too : - An opcode is better than a caching system for past chainID, It is


=== EIP-1109 ===
TITLE: PRECOMPILEDCALL opcode (Remove CALL costs for precompiled contracts)
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-05-22
REQUIRES: 

SUMMARY:
This EIP tries to resolve the problem of high gas consumption when calling precompiled contracts with a small gas cost. Using this opcode for

SPECIFICATION:
If `block.number >= XXXXX`, define a new opcode named `PRECOMPILEDCALL` with code value `0xfb`. The gas cost of the OPCODE is 2 (Gbase) plus

MOTIVATION:
Each precompiled contract has an already defined cost for calling it. It does not make sense to add the implicit extra gas cost of

RATIONALE:
There was a first proposal for removing the gast consts for the `CALL`, but it looks that it's easier to implement and test a


=== EIP-3521 ===
TITLE: Reduce access list cost
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-04-15
REQUIRES: 2, 0, 2, 8, ,,  , 2, 9, 3, 0

SPECIFICATION:
Treat the first occurrence of `tx.to` in an access list as `calldata` for gas accounting purposes. Do not charge `ACCESS_LIST_ADDRESS_COST` for it. Storage keys

MOTIVATION:
Currently, a transaction must read at least 25 distinct storage slots in `tx.to` before it's more expensive to forego an access list. ``` ACCESS_LIST_ADDRESS_COST


=== EIP-4762 ===
TITLE: Statelessness gas cost changes
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2022-02-03
REQUIRES: 

SUMMARY:
This EIP introduces changes in the gas schedule to reflect the costs of creating a witness. It requires clients to update their database layout

SPECIFICATION:
### Helper functions ```python def get_storage_slot_tree_keys(storage_key: int) -> [int, int]: if storage_key < (CODE_OFFSET - HEADER_STORAGE_OFFSET): pos = HEADER_STORAGE_OFFSET + storage_key else: pos =

MOTIVATION:
The introduction of Verkle trees into Ethereum requires fundamental changes and as a preparation, this EIP is targeting the fork coming right before the

RATIONALE:
### Gas reform Gas costs for reading storage and code are reformed to more closely reflect the gas costs under the new Verkle tree


=== EIP-2997 ===
TITLE: IMPERSONATECALL Opcode
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-09-24
REQUIRES: 

SUMMARY:
Add a new opcode, `IMPERSONATECALL` at `0xf6`, which is similar in idea to `CALL (0xF1)`, except that it impersonates a sender, i.e. the callee

SPECIFICATION:
`IMPERSONATECALL`: `0xf6`, takes 7 operands: - `gas`: the amount of gas the code may use in order to execute; - `to`: the destination address

MOTIVATION:
This proposal enables native multi-user wallets (wallets that serve multiple users) that can be commanded by EIP-712 based messages and therefore enable meta-transactions. Multi-user

RATIONALE:
Even if `IMPERSONATECALL` requires hashing 3 words, implying an additional cost of 180 gas, we think the benefit of accounting for hashing doesn't not


=== EIP-7480 ===
TITLE: EOF - Data section access instructions
TYPE: Standards Track Core
STATUS: Review
CREATED: 2023-08-11
REQUIRES: 3, 5, 4, 0, ,,  , 3, 6, 7, 0

SUMMARY:
Four new instructions are introduced, that allow to read EOF container's data section: `DATALOAD` loads 32-byte word to stack, `DATALOADN` loads 32-byte word to

SPECIFICATION:
We introduce four new instructions on the same block number [EIP-3540](./eip-3540.md) is activated on: 1. `DATALOAD` (0xd0) 2. `DATALOADN` (0xd1) 3. `DATASIZE` (0xd2) 4.

MOTIVATION:
Clear separation between code and data is one of the main features of EOF1. Data section may contain anything, e.g. compiler's metadata, but to

RATIONALE:
### Zero-padding on out of bounds access Existing instructions for reading other kinds of data implicitly pad with zeroes on out of bounds access,


=== EIP-3337 ===
TITLE: Frame pointer support for memory load and store operations
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-03-06
REQUIRES: 3336

SUMMARY:
This EIP introduces four new opcodes, `MLOADFP`, `MSTOREFP`, `GETFP` and `SETFP` that allow for more efficient memory access offset by a user-controlled quantity called

SPECIFICATION:
### Parameters | Constant | Value | | - | - | | `FORK_BLOCK` | TBD | For blocks where `block.number >= FORK_BLOCK`, the

MOTIVATION:
In most commonly used VMs, ephemeral data such as local variables, function arguments, and return addresses is stored in a region of memory called

RATIONALE:
### Cost of new opcodes The cost of the new opcodes `MLOADFP` and `MSTOREFP` reflects the cost of `MLOAD` and `MSTORE`. They are generally


=== EIP-7045 ===
TITLE: Increase max attestation inclusion slot
TYPE: Standards Track Core
STATUS: Final
CREATED: 2023-05-18
REQUIRES: 

SUMMARY:
Increases max attestation inclusion slot from `attestation.slot + SLOTS_PER_EPOCH` to the last slot of epoch `N+1` where `N` is the epoch containing the attestation

SPECIFICATION:
### Constants | Name | Value | Comment | | - | - | - | |`FORK_TIMESTAMP` | `1710338135` | Mainnet | ### Execution

MOTIVATION:
Attestations can currently be included after some minimum delay (`1` slot on mainnet) up until `SLOTS_PER_EPOCH` slots after the slot the attestation was created

RATIONALE:
### Extended max inclusion slot As discussed in the Motivation, extending this max inclusion slot to the end of the next epoch is critical


=== EIP-7594 ===
TITLE: PeerDAS - Peer Data Availability Sampling
TYPE: Standards Track Networking
STATUS: Review
CREATED: 2024-01-12
REQUIRES: 4844

SUMMARY:
PeerDAS (Peer Data Availability Sampling) is a networking protocol that allows beacon nodes to perform data availability sampling (DAS) to ensure that blob data

SPECIFICATION:
We extend the blobs introduced in EIP-4844 using a one-dimensional erasure coding extension. Each row consists of the blob data combined with its erasure

MOTIVATION:
DAS is a method of scaling data availability beyond the levels of [EIP-4844](./eip-4844.md) by not requiring all nodes to download all data while still

RATIONALE:
TBD


=== EIP-1985 ===
TITLE: Sane limits for certain EVM parameters
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-08-01
REQUIRES: 

SUMMARY:
Introduce an explicit value range for certain EVM parameters (such as gas limit, block number, block timestamp, size field when returning/copying data within EVM).

SPECIFICATION:
If `block.number >= {FORK_BLOCK}`, the following value ranges are introduced. They restrict the results (i.e. values pushed to the stack) of the instructions listed

MOTIVATION:
Having such an explicit value range can help in creating compatible client implementations, in certain cases it can also offer minor speed improvements, and

RATIONALE:
These limits have been: - proposed by [EVMC] - implemented partially by certain clients, such as [Aleth], [geth], [Parity] and [ethereumjs] - allowed by


=== EIP-7607 ===
TITLE: Hardfork Meta - Fusaka
TYPE: Meta 
STATUS: Draft
CREATED: 2024-02-01
REQUIRES: 7600

SUMMARY:
This Meta EIP lists the EIPs formally Proposed, Considered, Scheduled & Declined for Inclusion in the Fulu/Osaka network upgrade.

SPECIFICATION:
Definitions for `Scheduled for Inclusion`, `Considered for Inclusion`, `Proposed for Inclusion` and `Declined for Inclusion` can be found in [EIP-7723](./eip-7723.md). ### EIPs Scheduled for

RATIONALE:
This Meta EIP provides a global view of all changes included in the Fusaka network upgrade, as well as links to full specification.


=== EIP-7961 ===
TITLE: EVM64 - EOF code section
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-05-28
REQUIRES: 3, 5, 4, 0, ,,  , 4, 7, 5, 0, ,,  , 7, 9, 6, 0

SUMMARY:
An EOF-only specification for EVM64 instruction set. This defines a separate "EVM64" type for EOF code section in addition to "regular EVM". The interpreter

SPECIFICATION:
Define `0x02` as an allowed `type` in `types_section`, as defined in EIP-7960. This denotes an EVM64 code section. ### EOF function execution When entering

MOTIVATION:
EIP-7937 has maximum compatibility with existing EVM. It implements EVM64 simply as a group of additional opcodes (using a prefix opcode). This EIP defines

RATIONALE:
### Stack behavior "Pure" in "pure EVM64" refers to the fact that all opcodes in EVM64 mode only operates on the least significant 64


=== EIP-4747 ===
TITLE: Simplify EIP-161
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-02-02
REQUIRES: 161

SUMMARY:
Simplify the definition of [EIP-161](./eip-161.md), removing the requirement for implementors to support edge cases that are impossible on Ethereum Mainnet.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
EIP-161 is overly complex and has a number of edge cases that are poorly documented and tested. This EIP takes advantage of the complete

RATIONALE:
EIP-161 provides that empty accounts (accounts that have zero nonce, zero balance and no code, but that might have storage) can no longer be


=== EIP-2378 ===
TITLE: EIPs Eligible for Inclusion
TYPE: Meta 
STATUS: Stagnant
CREATED: 2019-11-13
REQUIRES: 

SUMMARY:
The pipeline for Core EIPs, per the EIP-Centric upgrade model, is as follows. ``` [ DRAFT ] -> [ ELLIGLE FOR INCLUSION ] ->

SPECIFICATION:
| EIP | Title | Pipeline Status | Date of Initial Decision | REF | | -------- | ----------------------------------------------------- | -------- | ---------- |

MOTIVATION:
Development of clear specifications and pull requests to existing Ethereum Clients is a large investment of time and resources. The state of *Eligible for

RATIONALE:
**EIP Number** **Title** **Pipeline Status** : Show the current status in the context of the EIP centric model. The list is sorted by furthest


=== EIP-7543 ===
TITLE: EVM arbitrary precision decimal math
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-10-22
REQUIRES: 

SUMMARY:
This EIP adds *arbitrary precision decimal float* OPCODEs for arithmetic via DECADD, DECNEG, DECMUL, DECINV and expression of all elementary functions via DECEXP, DECLN,

SPECIFICATION:
### Decimal A decimal is defined as c * 10^q where c and q are int256. Notationwise: a = ac * 10^aq b =

MOTIVATION:
Currently, to take a power, a^b, of non integer values, requires vast amounts of Solidity code. The simplest task in trading e.g. is to

RATIONALE:
### gas All the above OPCODEs are deterministic, hence the gas cost can be determined. At the same time, the calculations are complex and


=== EIP-2926 ===
TITLE: Chunk-Based Code Merkleization
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2020-08-25
REQUIRES: 1, 6, 1, ,,  , 1, 7, 0

SUMMARY:
Code merkleization, along with binarification of the trie and gas cost bump of state accessing opcodes, are considered as the main levers for decreasing

SPECIFICATION:
What follows is structured to have two sections: 1. How a given contract code is split into chunks and then merkleized 2. How to

MOTIVATION:
Bytecode is currently the second contributor to block witness size, after the proof hashes. Transitioning the trie from hexary to binary reduces the hash

RATIONALE:
### Hexary vs binary trie The trie format is chosen to be the same as that of the account trie. If a tree conversion


=== EIP-7797 ===
TITLE: Double speed for hash_tree_root
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-10-23
REQUIRES: 

SUMMARY:
This EIP explains how to customize [`hash_tree_root`](https://github.com/ethereum/consensus-specs/blob/b3e83f6691c61e5b35136000146015653b22ed38/ssz/simple-serialize.md#merkleization) to double its performance.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Hashing is a dominant performance bottleneck for Consensus Layer implementations. To support large validator counts, it is critical to optimize hashing performance. Consensus Layer

RATIONALE:
Doubling the throughput of the underlying hash algorithm allows scaling to more validators on the same hardware, or allows using the freed CPU time


=== EIP-6190 ===
TITLE: Verkle-compatible SELFDESTRUCT
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-12-20
REQUIRES: 2, 9, 2, 9, ,,  , 6, 1, 8, 8, ,,  , 6, 1, 8, 9

SUMMARY:
Changes `SELFDESTRUCT` to only cause a finite number of state changes.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The `SELFDESTRUCT` instruction has a fixed price, but is unbounded in storage/account changes (it needs to delete all keys). This has been an outstanding

RATIONALE:
This EIP is designed to be a step towards supporting `SELFDESTRUCT` in Verkle trees while making the minimum amount of changes. The `5000` base


=== EIP-7441 ===
TITLE: Upgrade block proposer election to Whisk
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-09-01
REQUIRES: 

SUMMARY:
Upgrades the block proposer election mechanism to Whisk, a single secret leader election (SSLE) protocol. Currently, block proposers are publicly known in advance, sufficiently

SPECIFICATION:
### Execution layer This requires no changes to the Execution Layer. ### Consensus layer The protocol can be summarized in the following concurrent steps:

MOTIVATION:
The beacon chain currently elects the next 32 block proposers at the beginning of each epoch. The results of this election are public and

RATIONALE:
### Fields per validator Whisk requires having one tracker `(rG,krG)` and one unique commitment `kG` per validator. Both are updated only once on a


=== EIP-2930 ===
TITLE: Optional access lists
TYPE: Standards Track Core
STATUS: Final
CREATED: 2020-08-29
REQUIRES: 2, 7, 1, 8, ,,  , 2, 9, 2, 9

SUMMARY:
We introduce a new [EIP-2718](./eip-2718.md) transaction type, with the format `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, signatureYParity, signatureR, signatureS])`. The

SPECIFICATION:
### Definitions **`TransactionType`** `1`. See [EIP-2718](./eip-2718.md) **`ChainId`** The transaction only valid on networks with this `chainID`. **`YParity`** The parity (0 for even, 1 for

MOTIVATION:
This EIP serves two functions: 1. Mitigates contract breakage risks introduced by [EIP-2929](./eip-2929.md), as transactions could pre-specify and pre-pay for the accounts and storage

RATIONALE:
### Charging less for accesses in the access list This is done to encourage transactions to use the access list as much as possible,


=== EIP-155 ===
TITLE: Simple replay attack protection
TYPE: Standards Track Core
STATUS: Final
CREATED: 2016-10-14
REQUIRES: 

SPECIFICATION:
If `block.number >= FORK_BLKNUM` and `CHAIN_ID` is available, then when computing the hash of a transaction for the purposes of signing, instead of hashing

RATIONALE:
This would provide a way to send transactions that work on Ethereum without working on ETC or the Morden testnet. ETC is encouraged to


=== EIP-7921 ===
TITLE: Skip `JUMPDEST` immediate argument check
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-03-26
REQUIRES: 

SUMMARY:
Allow `JUMP` and `JUMPI` to arrive at any byte matching `JUMPDEST` (`0x5b`), even if that byte is an immediate argument.

SPECIFICATION:
When activated, all `0x5b` bytes are valid `JUMPDEST` for `JUMPI` and `JUMP` opcodes.

MOTIVATION:
Immediate arguments are opcode parameters supplied within the code rather than the stack. Currently determining the validity of a `JUMPDEST` requires determining which bytes

RATIONALE:
Removing the check solves several problems while reducing EVM complexity.


=== EIP-7904 ===
TITLE: General Repricing
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-02-05
REQUIRES: 7883

SUMMARY:
This proposal revises the gas cost schedule for opcodes, precompiles, memory expansion, and data access, prioritizing computational complexity, while excluding network-related costs such as

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Gas costs compromise of two components: network (social) cost and computation cost. Network cost reflects the blockchain’s effort to maintain state, including adding transactions,

RATIONALE:
### Gas Cost Estimator Project The [Gas Cost Estimator](../assets/eip-7904/gas-cost-estimator-report.pdf) project serves as the empirical foundation for this EIP. This project conducted extensive testing across


=== EIP-3455 ===
TITLE: SUDO Opcode
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-04-01
REQUIRES: 

SUMMARY:
A new opcode, `SUDO`, is introduced with the same parameters as `CALL`, plus another parameter to specify the sender address.

SPECIFICATION:
Adds a new opcode (`SUDO`) at `0xf8`. `SUDO` pops 8 parameters from the stack. Besides the sender parameter, the parameters shall match `CALL`. 1.

MOTIVATION:
There are many use cases for being able to set the sender. Many tokens are stuck irretrievably because nobody has the key for the

RATIONALE:
The `GAS` parameter is first so that callers can tediously compute how much of their remaining gas to send at the last possible moment.


=== EIP-7801 ===
TITLE: etha - Sharded Blocks Subprotocol
TYPE: Standards Track Networking
STATUS: Draft
CREATED: 2024-10-30
REQUIRES: 7642

SUMMARY:
This EIP proposes the creation of a new subprotocol, `etha`, enabling Ethereum nodes to communicate available block spans via a bitmask. Each bit represents

SPECIFICATION:
### Subprotocol Handshake - Introduce a new subprotocol named `etha`. - Define the handshake message for the `etha` subprotocol as follows: - Handshake packet:

MOTIVATION:
With [EIP-4444](./eip-4444.md), nodes may prune historical data while others continue serving it. Determining data availability by connecting and requesting blocks is inefficient consuming unnexessary

RATIONALE:
The bitmask approach provides a flexible means to represent and retain block data while committing to future spans. This mechanism aligns with the pruning


=== EIP-7867 ===
TITLE: Flow Control Wallet Call Capability
TYPE: Standards Track Interface
STATUS: Draft
CREATED: 2025-01-17
REQUIRES: 5792

SUMMARY:
This proposal extends [EIP-5792](./eip-5792.md) to allow dapps to downgrade their required atomicity guarantees and control the behaviour after a failed/reverted call. It introduces the

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
While the base EIP-5792 specification works extremely well for smart contract wallets, it does not allow the expression of the full range of flow

RATIONALE:
<!-- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate


=== EIP-1352 ===
TITLE: Specify restricted address range for precompiles/system contracts
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-07-27
REQUIRES: 

SUMMARY:
The address range between 0x0000000000000000000000000000000000000000 and 0x000000000000000000000000000000000000ffff is reserved for precompiles and system contracts.

SPECIFICATION:
The address range between 0x0000000000000000000000000000000000000000 and 0x000000000000000000000000000000000000ffff is reserved for precompiles and system contracts. Due to the extremely low probability (and lack of adequate

MOTIVATION:
This will simplify certain future features where unless this is implemented, several exceptions must be specified.

RATIONALE:
N/A


=== EIP-6800 ===
TITLE: Ethereum state using a unified verkle tree
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-03-17
REQUIRES: 6780

SUMMARY:
Introduce a new Verkle state tree alongside the existing hexary Patricia tree. After the hard fork, the Verkle tree stores all edits to state

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Verkle trees solve a key problem standing in the way of Ethereum being stateless-client-friendly: witness sizes. A witness accessing an account in today’s hexary

RATIONALE:
This implements all of the logic in transitioning to a Verkle tree, and at the same time reforms gas costs, but does so in


=== EIP-7 ===
TITLE: DELEGATECALL
TYPE: Standards Track Core
STATUS: Final
CREATED: 2015-11-15
REQUIRES: 

SPECIFICATION:
`DELEGATECALL`: `0xf4`, takes 6 operands: - `gas`: the amount of gas the code may use in order to execute; - `to`: the destination address

RATIONALE:
Propagating the sender and value from the parent scope to the child scope makes it much easier for a contract to store another address


=== EIP-5003 ===
TITLE: Insert Code into EOAs with AUTHUSURP
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-03-26
REQUIRES: 3, 0, 7, 4, ,,  , 3, 6, 0, 7

SUMMARY:
This EIP introduces a new opcode, `AUTHUSURP`, which deploys code at an [EIP-3074](./eip-3074.md) authorized address. For externally owned accounts (EOAs), together with [EIP-3607](./eip-3607.md), this

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
EOAs currently hold a significant amount of user-controlled value on Ethereum blockchains, but are limited by the protocol in a variety of critical ways.

RATIONALE:
`AUTHUSURP` does not check the nonce of the `authorized` account because it must work with accounts that have previously sent transactions. When using `AUTHUSURP`,


=== EIP-4758 ===
TITLE: Deactivate SELFDESTRUCT
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-02-03
REQUIRES: 

SUMMARY:
This EIP renames the `SELFDESTRUCT` opcode to `SENDALL`, and replaces its functionality. The new functionality will be only to send all Ether in the

SPECIFICATION:
* The `SELFDESTRUCT` opcode is renamed to `SENDALL`, and now only immediately moves all ETH in the account to the target; it no longer

MOTIVATION:
The `SELFDESTRUCT` opcode requires large changes to the state of an account, in particular removing all code and storage. This will not be possible

RATIONALE:
Getting rid of the `SELFDESTRUCT` opcode has been considered in the past, and there are currently no strong reasons to use it. Disabling it


=== EIP-7872 ===
TITLE: Max blob flag for local builders
TYPE: Meta 
STATUS: Review
CREATED: 2025-01-30
REQUIRES: 

SUMMARY:
This EIP adds a flag to the block builder in order to allow them to include a client configured maximum amount of blobs.

SPECIFICATION:
- Create a parameter in block builder's configuration called `USER_CONFIGURED_MAX_BLOBS_PER_BLOCK` - Take the minimum out of the `MAX_BLOB_GAS_PER_BLOCK` and the `USER_CONFIGURED_MAX_BLOBS_PER_BLOCK` - If the

MOTIVATION:
Currently a builder will include all blobs in their local mempool, up to the maximum amount that the protocol requires. If a builder has

RATIONALE:
By adding a flag for the local block builder, they are able to specify how many blobs they can include in a block.


=== EIP-7727 ===
TITLE: EVM Transaction Bundles
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-06-24
REQUIRES: 2718

SUMMARY:
This EIP introduces two new [EIP-2718](./eip-2718.md) transaction types and one new opcode, enabling smart contracts and transactions to delegate their local sequencing rights to

SPECIFICATION:
### Constants | Name | Value | | --- | --- | | DELEGATED_TX_TYPE | 0x05 | | BUNDLE_TX_TYPE | 0x06 | | BUNDLE_BASE_GAS_COST

MOTIVATION:
Currently, a single block builder has unrestricted control over the final sequencing of a block’s transactions. This poses a problem, as sequencing—the choice of

RATIONALE:
### Allowing invalid transactions to be included in a `BUNDLE_TX_TYPE`'s `transactionList` Knowing how a transaction will execute is challenging without knowing the state root


=== EIP-7819 ===
TITLE: SETDELEGATE instruction
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-11-18
REQUIRES: 7702

SUMMARY:
Introduce a new instruction that allows smart contracts to create (and update) delegation accounts that match [EIP-7702](./eip-7702.md)'s design. These accounts can be used similarly

SPECIFICATION:
A new instruction (`SETDELEGATE`) is added at `0xf6`. ### Behavior Executing this instruction does the following: 1. deduct `EMPTY_ACCOUNT_COST` gas 2. halt if the

MOTIVATION:
Many on-chain applications involve creating multiple instances of the same code at different locations. These applications often rely on clones, or proxies, to reduce

RATIONALE:
### Gas cost The execution of the `SETDELEGATE` instruction involves fewer moving pieces than what EIP-7702 gas costs account for: - there is no


=== EIP-6475 ===
TITLE: SSZ Optional
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-02-09
REQUIRES: 

SUMMARY:
This EIP introduces a new [Simple Serialize (SSZ) type](https://github.com/ethereum/consensus-specs/blob/67c2f9ee9eb562f7cc02b2ff90d92c56137944e1/ssz/simple-serialize.md) to represent `Optional[T]` values.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Optional values are currently only representable in SSZ using workarounds. Adding proper support provides these benefits: 1. **Better readability:** SSZ structures with optional values

RATIONALE:
### Why not `Union[None, T]`? `Union[None, T]` leaves ambiguity about the intention whether the type may be extended in the future, i.e., `Union[None, T,


=== EIP-3382 ===
TITLE: Hardcoded Block Gas Limit
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2021-03-13
REQUIRES: 

SUMMARY:
Updates the block validation rules such that a block is invalid if the `gas_limit` header field is not equal to `12,500,000`.

SPECIFICATION:
Refer to `gasLimit` as `gasTarget` post EIP-1559. ### Added Consensus Constraint As of `FORK_BLOCK_NUMBER`, the `header.gasLimit` **MUST** be equal to `BLOCK_GAS_LIMIT`, where `BLOCK_GAS_LIMIT` is

MOTIVATION:
Both Ethereum's Proof of Work and Proof of Stake designs assume that block producers are financially rational, but does not assume block producers to

RATIONALE:
### Keeping gasLimit in Block Headers While it would be possible to remove the `gasLimit` field from block headers, it would change the data


=== EIP-1380 ===
TITLE: Reduced gas cost for call to self
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-08-31
REQUIRES: 150

SUMMARY:
Reduce the gas cost for call instructions, when the goal is to run a new instance of the currently loaded contract.

SPECIFICATION:
If `block.number >= FORK_BLKNUM`, then decrease the cost of `CALL`, `DELEGATECALL`, `CALLCODE` and `STATICCALL` from 700 to 40, if and only if, the destination

MOTIVATION:
The current gas cost of 700 for all call types (`CALL`, `DELEGATECALL`, `CALLCODE` and `STATICCALL`) does not take into account that a call to

RATIONALE:
EIP150 has increased the cost of these instructions from 40 to 700 to more fairly charge for loading new contracts from disk, e.g. to


=== EIP-2733 ===
TITLE: Transaction Package
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2020-06-16
REQUIRES: 2718

SUMMARY:
Introduce a new transaction type which includes a list of transactions that must be executed serially by clients. Execution information (e.g. success, gas_used, etc.)

SPECIFICATION:
Introduce a new [EIP-2718](./eip-2718.md) transaction type where `id = 2`. #### Structure ``` struct TransactionPackage { chain_id: u256, children: [ChildPackage], nonce: u64, gas_price: u256,

MOTIVATION:
Onboarding new users to Ethereum has been notoriously difficult due to the need for new users to acquire enough ether to pay for their

RATIONALE:
### Each `Child` has its own signature For simplicity, the author has chosen to require each child package to specify its own signature, even


=== EIP-6988 ===
TITLE: Elected block proposer has not been slashed
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-05-04
REQUIRES: 

SUMMARY:
Introduces a modification to the consensus layer specification which ensures that slashed validator cannot be elected as block proposer.

SPECIFICATION:
Specification of the proposed change can be found in [`/_features/eip6988/beacon-chain.md`](https://github.com/ethereum/consensus-specs/blob/0ad3972725e7c22e8edf3bab2dd7730acbe3c272/specs/_features/eip6988/beacon-chain.md).

MOTIVATION:
A block proposed by a slashed validator is rejected by the corresponding validity check in the [`phase0/process_block_header`](https://github.com/ethereum/consensus-specs/blob/3115d1140b23dd4c9c23fbd9e2428186cf816bde/specs/phase0/beacon-chain.md#block-header) function as defined in the consensus layer

RATIONALE:
### Modifying `get_beacon_proposer_index` This function is modified to read a proposer index from a beacon state if a slot of a latest block header


=== EIP-214 ===
TITLE: New opcode STATICCALL
TYPE: Standards Track Core
STATUS: Final
CREATED: 2017-02-13
REQUIRES: 

SUMMARY:
This proposal adds a new opcode that can be used to call another contract (or itself) while disallowing any modifications to the state during

SPECIFICATION:
Introduce a new `STATIC` flag to the virtual machine. This flag is set to `false` initially. Its value is always copied to sub-calls with

MOTIVATION:
Currently, there is no restriction about what a called contract can do, as long as the computation can be performed with the amount of

RATIONALE:
This allows contracts to make calls that are clearly non-state-changing, reassuring developers and reviewers that re-entrancy bugs or other problems cannot possibly arise from


=== EIP-1962 ===
TITLE: EC arithmetic and pairings with runtime definitions
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-04-22
REQUIRES: 1109

SUMMARY:
This EIP proposes a new precompile to bring cryptographic functionality desired for privacy and scaling solutions. Functionality of such precompile will require the following:

SPECIFICATION:
If `block.number >= XXXXX`, define a set of `10` new precompiles with an addresses `[0x.., 0x.., ...]` and the following functionality. - Addition of

MOTIVATION:
- There is a pending proposal to implement base elliptic curve arithmetic is covered by [EIP-1829](./eip-1829.md) and will allow to implement various privacy-preserving protocols

RATIONALE:
Only the largest design decisions will be covered: - While there is no arithmetic over the scalar field (which is modulo size of the


=== EIP-1 ===
TITLE: EIP Purpose and Guidelines
TYPE: Meta 
STATUS: Living
CREATED: 2015-10-27
REQUIRES: 


=== EIP-6046 ===
TITLE: Replace SELFDESTRUCT with DEACTIVATE
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-11-25
REQUIRES: 2, 6, 8, 1, ,,  , 2, 9, 2, 9, ,,  , 3, 5, 2, 9

SUMMARY:
Change `SELFDESTRUCT` to not delete all storage keys, and to use a special value in the account nonce to signal *deactivated* accounts. Because the

SPECIFICATION:
1. Change the rules introduced by [EIP-2681](./eip-2681.md) such that regular nonce increase is bound by `2^64-2` instead of `2^64-1`. This applies from genesis. 2.

MOTIVATION:
The `SELFDESTRUCT` instruction currently has a fixed price, but is unbounded in terms of how many storage/account changes it performs (it needs to delete

RATIONALE:
There have been various proposals of removing `SELFDESTRUCT` and many would just outright remove the deletion capability. This breaks certain usage patterns, which the


=== EIP-1011 ===
TITLE: Hybrid Casper FFG
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-04-20
REQUIRES: 

SUMMARY:
This EIP specifies a hybrid PoW/PoS consensus model for Ethereum main net. Existing PoW mechanics are used for new block creation, and a novel

SPECIFICATION:
#### Deploying Casper Contract If `block.number == HYBRID_CASPER_FORK_BLKNUM`, then when processing the block before processing any transactions: * set the code of `MSG_HASHER_ADDR` to

MOTIVATION:
Transitioning the Ethereum network from PoW to PoS has been on the roadmap and in the [Yellow Paper](https://github.com/ethereum/yellowpaper) since the launch of the protocol.

RATIONALE:
Naive PoS specifications and implementations have existed since early blockchain days, but most are vulnerable to serious attacks and do not hold up under


=== EIP-868 ===
TITLE: Node Discovery v4 ENR Extension
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2018-02-02
REQUIRES: 8, ,,  , 7, 7, 8


=== EIP-6810 ===
TITLE: Ex Post Facto Cascading Revert
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-04-01
REQUIRES: 2, 7, 1, 8, ,,  , 2, 9, 2, 9

SUMMARY:
A new transaction type reverts one of a sender's prior transactions, and other transactions dependent on that state, recursively.

SPECIFICATION:
### Parameters A new [EIP-2718](./eip-2718.md) transaction is introduced with `TransactionType` `0x5a`. The [EIP-2718](./eip-2718.md) `TransactionPayload` for this transaction is `rlp([chainId, nonce, revertNonce, budget, signatureYParity, signatureR,

MOTIVATION:
While Ethereum has the capability of reversible transactions through smart contracts, instant settlement is the default. But sometimes users make mistakes. Most mistakes are

RATIONALE:
The transaction must fill the entire block to prevent MEV attacks. While some cascading reverts are highly consequential, others are considerably simpler. The budget


=== EIP-7636 ===
TITLE: Extension of EIP-778 for "client" ENR Entry
TYPE: Standards Track Networking
STATUS: Withdrawn
CREATED: 2024-02-25
REQUIRES: 778

SUMMARY:
The Ethereum network consists of nodes running various client implementations. Each client has its own set of features, optimizations, and unique behaviors. Introducing a

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Understanding the landscape of client software in the Ethereum network is crucial for developers, nodes, and network health assessment. Currently, there is no standardized

RATIONALE:
One key was chosen over using many keys to make efficient use of space. The use of one string, however, does not align with


=== EIP-7957 ===
TITLE: EVM64 - EOF support
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-05-26
REQUIRES: 3, 5, 4, 0, ,,  , 3, 6, 7, 0, ,,  , 4, 2, 0, 0, ,,  , 7, 9, 3, 7

SUMMARY:
This EIP defines EOF support for EVM64 with its additional code validation rules and `RJUMPI`, `RJUMPV` opcodes.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
EOF defines a stricter stricter code validation rule to improve efficiency. Due to EVM64 using multibyte opcode (the mode opcode `C0`), a small adaptation

RATIONALE:
For detailed rationale discussion, please see the core EVM64 definition [EIP-7937](./eip-7937.md).


=== EIP-4200 ===
TITLE: EOF - Static relative jumps
TYPE: Standards Track Core
STATUS: Review
CREATED: 2021-07-16
REQUIRES: 3, 5, 4, 0, ,,  , 3, 6, 7, 0

SUMMARY:
Three new EVM jump instructions are introduced (`RJUMP`, `RJUMPI` and `RJUMPV`) which encode destinations as signed immediate values. These can be useful in the

SPECIFICATION:
We introduce three new instructions on the same block number [EIP-3540](./eip-3540.md) is activated on: 1. `RJUMP` (0xe0) - relative jump 2. `RJUMPI` (0xe1) -

MOTIVATION:
A recurring discussion topic is that EVM only has a mechanism for dynamic jumps. They provide a very flexible architecture with only 2 (!)

RATIONALE:
### Relative addressing We chose relative addressing in order to support code which is relocatable. This also means a code snippet can be injected.


=== EIP-747 ===
TITLE: wallet_watchAsset RPC Method
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2018-08-13
REQUIRES: 2, 0, ,,  , 1, 0, 4, 6, ,,  , 1, 1, 9, 3

SUMMARY:
This EIP standardizes a new wallet-scoped RPC method, `wallet_watchAsset`, to allow a client to suggest a token for the user's wallet to track.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Today, one of the major uses of Ethereum wallets is to track users' assets. Without this EIP, each wallet either needs to pre-load a

RATIONALE:
Displaying a user's assets is a basic feature that every modern DApp user expects. Most wallets currently either manage their own asset lists, which


=== EIP-161 ===
TITLE: State trie clearing (invariant-preserving alternative)
TYPE: Standards Track Core
STATUS: Final
CREATED: 2016-10-24
REQUIRES: 

SPECIFICATION:
a. Account creation transactions and the `CREATE` operation SHALL, prior to the execution of the initialisation code, **increment** the **nonce** over and above its

RATIONALE:
Same as #158 except that several edge cases are avoided since we do not break invariants: - ~~that an account can go from having


=== EIP-2696 ===
TITLE: JavaScript `request` method RPC transport
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2020-06-04
REQUIRES: 

SUMMARY:
This standard provides the description of an object that is made available to JavaScript applications which they can use to communicate with the Ethereum

SPECIFICATION:
### RFC-2119 The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
When working within a JavaScript runtime (such as NodeJS, Electron, Browser, etc.) it may be possible for the runtime or a runtime plugin to

RATIONALE:
While this standard is perhaps not the greatest mechanism for communicating between an application and a blockchain, it is closely aligned with established practices


=== EIP-7708 ===
TITLE: ETH transfers emit a log
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-05-17
REQUIRES: 

SUMMARY:
All ETH-transfers, including transactions, `CALL` and `SELFDESTRUCT` emit a log.

SPECIFICATION:
### Parameters * `MAGIC`: `TBD` ### Functionality Whenever (i) a nonzero-value `CALL`, (ii) a nonzero-value-transferring `SELFDESTRUCT`, or (iii) a nonzero-value-transferring transaction takes place, issue

MOTIVATION:
Logs are often used to track when balance changes of assets on Ethereum. Logs work for [ERC-20](./eip-20.md) tokens, but they do not work for

RATIONALE:
This is the simplest possible implementation that ensures that all ETH transfers are implemented in some kind of record that can be easily accessed


=== EIP-7862 ===
TITLE: Delayed State Root
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-12-23
REQUIRES: 

SUMMARY:
This proposal introduces a mechanism to decouple state root computation from block validation by deferring the execution layer's state root reference by one block.

SPECIFICATION:
### Header Changes The block header structure is modified to support delayed state root computation: ```python @dataclass class Header: # Existing fields parent_hash: Hash32

MOTIVATION:
The primary advantage of this proposal is **asynchronous state root computation**. In the current Ethereum protocol, blocks must compute and include their own post-state

RATIONALE:
### Latency Reduction The separation of state root computation from block validation removes the primary latency bottleneck in block production and validation. Proposers and


=== EIP-7788 ===
TITLE: Dynamic target blob count
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2024-10-15
REQUIRES: 7742

SUMMARY:
This EIP proposes to make the target blob count adjust dynamically up to a safe maximum target. This adjustment will target a constant price

SPECIFICATION:
### Parameters | Parameter | Value | | - | - | | `FORK_TIMESTAMP` | TBD | | `TARGET_BLOB_COUNT_CHANGE_RATE` | `1` | | `MIN_TARGET_BLOB_COUNT`

MOTIVATION:
Ethereum currently uses a target of 50% capacity for blob count, with [EIP-1559](./eip-1559.md) smoothing out short term spikes and pushing average throughput towards the

RATIONALE:
### Constant blob cost target A constant blob cost target can keep L2 transaction costs affordable for end users. Volatility in the price of


=== EIP-7685 ===
TITLE: General purpose execution layer requests
TYPE: Standards Track Core
STATUS: Final
CREATED: 2024-04-14
REQUIRES: 

SUMMARY:
This proposal defines a general purpose framework for storing contract-triggered requests. It extends the execution header with a single field to store the request

SPECIFICATION:
### Execution Layer #### Requests A `requests` object consists of a `request_type` byte prepended to an opaque byte array `request_data`. The `request_data` contains zero

MOTIVATION:
The proliferation of smart contract controlled validators has caused there to be a demand for additional EL triggered behaviors. By allowing these systems to

RATIONALE:
### Opaque byte array rather than an RLP array By having the bytes of `request_data` array from second byte on be opaque bytes, rather


=== EIP-1015 ===
TITLE: Configurable On Chain Issuance
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-04-20
REQUIRES: 


=== EIP-665 ===
TITLE: Add precompiled contract for Ed25519 signature verification
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-03-25
REQUIRES: 

SUMMARY:
Verification of Ed25519 cryptographic signatures is obviously possible in EVM bytecode. However, the gas cost will be very high, and computationally expensive, as such

SPECIFICATION:
If `block.number >= CONSTANTINOPLE_FORK_BLKNUM`, add a precompiled contract for Ed25519 signature verification (`ED25519VFY`). The proposal adds a new precompiled function `ED25519VFY` with the following

MOTIVATION:
Ed25519 and Ed448 (that is, EdDSA using Curve25519 or Curve448) are IETF recommendations ([RFC7748](https://tools.ietf.org/html/rfc7748)) with some attractive properties: * Ed25519 is intended to operate

RATIONALE:
The proposed `ED25519VFY` function takes the signer public key as a call parameter, as with Ed25519, I don't believe it is possible to derive


=== EIP-1459 ===
TITLE: Node Discovery via DNS
TYPE: Standards Track Networking
STATUS: Stagnant
CREATED: 2018-09-26
REQUIRES: 778

SUMMARY:
This document describes a scheme for authenticated, updateable Ethereum node lists retrievable via DNS.

SPECIFICATION:
A 'node list' is a list of 'node records' [as defined by EIP-778](./eip-778.md) of arbitrary length. Lists may refer to other lists using links.

MOTIVATION:
Many Ethereum clients contain hard-coded bootstrap node lists. Updating those lists requires a software update. The current lists are small, giving the client little

RATIONALE:
### Why DNS? We have chosen DNS as the distribution medium because it is always available, even under restrictive network conditions. The protocol provides


=== EIP-7709 ===
TITLE: Read BLOCKHASH from storage and update cost
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-05-18
REQUIRES: 2935

SUMMARY:
Update the `BLOCKHASH (0x40)` opcode to read and serve from the system contract storage and charge the **additional** (cold or warm) storage costs.

SPECIFICATION:
| Parameter | Value | | ------------------------- | ------ | | `FORK_TIMESTAMP` | TBD | | `HISTORY_STORAGE_ADDRESS` | `0x0000F90827F1C53a10cb7A02335B175320002935` | | `BLOCKHASH_SERVE_WINDOW` | `256`

MOTIVATION:
The `BLOCKHASH (0x40)` opcode currently assumes that the client has knowledge of the previous blocks, which in Verkle [EIP-6800](./eip-6800.md) would prevent stateless execution. However

RATIONALE:
* The reason behind the updated gas cost is to match the real operation, which is equivalent to an `SLOAD`. * The [EIP-2935](./eip-2935.md) system


=== EIP-7934 ===
TITLE: RLP Execution Block Size Limit
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-04-16
REQUIRES: 

SUMMARY:
This proposal introduces a protocol-level cap on the maximum RLP-encoded execution block size to 10 megabytes (MiB), which includes a margin of 2 MiB

SPECIFICATION:
### Block Size Cap - Introduce constants: - `MAX_BLOCK_SIZE` set to **10 MiB (10,485,760 bytes)** - `SAFETY_MARGIN` set to **2MiB (2,097,152 bytes)** - `MAX_RLP_BLOCK_SIZE`

MOTIVATION:
Currently, Ethereum does not enforce a strict upper limit on the encoded size of blocks. This lack of constraint can result in: 1. **Network

RATIONALE:
### Why 10 MiB? A cap of 10 MiB aligns with the gossip protocol constraint in Ethereum's consensus layer (CL). An additional 2MiB margin


=== EIP-2364 ===
TITLE: eth/64: forkid-extended protocol handshake
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2019-11-08
REQUIRES: 2124

SUMMARY:
This EIP specifies the inclusion of the `forkid`, originally defined in [(EIP-2124)](./eip-2124.md), as a new field in the Ethereum wire protocol (`eth`) handshake. This

SPECIFICATION:
- Implement `forkid` generation and validation per [EIP-2124](./eip-2124.md). - Advertise a new `eth` protocol capability (version) at `eth/64`. - The old `eth/63` protocol should

MOTIVATION:
The [`forkid` (EIP-2124)](./eip-2124.md) was designed to permit two Ethereum nodes to quickly and cheaply decide if they are compatible or not, not only at

RATIONALE:
The specification is tiny since most parts are already specified in EIP-2124. `eth/63` is not specified as an EIP, but is maintained in the


=== EIP-1829 ===
TITLE: Precompile for Elliptic Curve Linear Combinations
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-03-06
REQUIRES: 

SUMMARY:
A precompile that takes a curve and computes a linear combination of curve points.

SPECIFICATION:
Given integers `m, α` and `β`, scalars `s_i`, and curve points `A_i` construct the elliptic curve ``` y² = x³ + α ⋅ x

RATIONALE:
**Generic Field and Curve.** Many important optimizations are independent of the field and curve used. Some missed specific optimizations are: * Reductions specific to


=== EIP-7784 ===
TITLE: GETCONTRACT opcode
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-10-07
REQUIRES: 

SUMMARY:
This is a proposal to add a new opcode, `GETCONTRACT`. The `GETCONTRACT` opcode would return the address containing the bytecode by its hash.

SPECIFICATION:
### Opcode Definition * **Mnemonic:** `GETCONTRACT` * **Opcode Value:** `0x4f` * **Input:** * `codehash`: A single 32-byte code hash from the stack. * **Output:**

MOTIVATION:
Content addressing by hash is a common pattern in database design. It allows to store and retrieve data by its unique footprint in the

RATIONALE:
**Bytecode over Addresses**: Bytecode is deterministic and can be verified on-chain, while addresses are opaque and mutable. **Do not re-index**: There is small, yet


=== EIP-3046 ===
TITLE: Adds `baseFee` to `eth_getUncleByBlockNumberAndIndex`
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2020-10-14
REQUIRES: 1, 4, 7, 4, ,,  , 1, 5, 5, 9

SUMMARY:
Adds `baseFee` property to the `eth_getUncleByBlockNumberAndIndex` JSON-RPC request `result` object. This property will contain the value of the base fee for any block after

SPECIFICATION:
### `eth_getUncleByBlockNumberAndIndex` #### Description Returns information about an uncle specified by block number and uncle index position Every block returned by this endpoint whose

MOTIVATION:
[EIP-1559](./eip-1559.md) introduces a base fee per gas in protocol. This value is maintained under consensus as a new field in the block header structure.

RATIONALE:
The addition of a single parameter instead of introducing a whole new endpoint was the simplest change that would be easiest to get integrated.


=== EIP-3651 ===
TITLE: Warm COINBASE
TYPE: Standards Track Core
STATUS: Final
CREATED: 2021-07-12
REQUIRES: 2929

SUMMARY:
The `COINBASE` address shall be warm at the start of transaction execution, in accordance with the actual cost of reading that account.

SPECIFICATION:
At the start of transaction execution, `accessed_addresses` shall be initialized to also include the address returned by `COINBASE` (`0x41`).

MOTIVATION:
Direct `COINBASE` payments are becoming increasingly popular because they allow conditional payments, which provide benefits such as implicit cancellation of transactions that would revert.

RATIONALE:
The addresses currently initialized warm are the addresses that should already be loaded at the start of transaction validation. The `ORIGIN` address is always


=== EIP-2031 ===
TITLE: State Rent B - Net transaction counter
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-05-15
REQUIRES: 2029

SUMMARY:
It is part of the State Rent roadmap. This particular change makes any Ethereum transaction increment the transaction counter, which is a special storage

SPECIFICATION:
A new field, with the location 0 (that means it resides in the storage slot 0 in the state counter contract, and can be

MOTIVATION:
Ethereum currently does not have a special place in the state for tracking number of transactions.

RATIONALE:
Two main alternatives were proposed for the replay protection of the accounts that were evicted by subsequently brought back by sending ether to them:


=== EIP-1344 ===
TITLE: ChainID opcode
TYPE: Standards Track Core
STATUS: Final
CREATED: 2018-08-22
REQUIRES: 155

SUMMARY:
This EIP adds an opcode that returns the current chain's EIP-155 unique identifier.

SPECIFICATION:
Adds a new opcode `CHAINID` at 0x46, which uses 0 stack arguments. It pushes the current chain ID onto the stack. Chain ID is

MOTIVATION:
[EIP-155](./eip-155.md) proposes to use the chain ID to prevent replay attacks between different chains. It would be a great benefit to have the same

RATIONALE:
The current approach proposed by EIP-712 is to specify the chain ID at compile time. Using this approach will result in problems after a


=== EIP-7937 ===
TITLE: EVM64 - 64-bit mode EVM opcodes
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-04-23
REQUIRES: 

SUMMARY:
This EIP introduces multibyte opcodes prefixed by `C0` for 64-bit arithmetic (`C001`-`C00B`), comparison (`C010`-`C015`), bitwise (`C016`-`C019`) and flow (`C056` and `C057`) operations.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Not all computations in EVM can utilize the full 256-bit integer width. It can therefore be beneficial to have a "64-bit mode" to avoid

RATIONALE:
When a smart contract uses the 64-bit mode, it's expected that once entered, it will want to stay in 64-bit mode, and only exit


=== EIP-7736 ===
TITLE: Leaf-level state expiry in verkle trees
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-07-05
REQUIRES: 6800

SUMMARY:
Adds an "update epoch" to the verkle tree extension node. When it is time for an epoch to expire, the extension node and its

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Previous attempts at implementing state expiry have been stalled by the quickly-increasing complexity, require heavy change in the structure of ethereum (address space extension,

RATIONALE:
This approach has the benefit of simplicity, over previous proposals for state expiry: * no Address Space Extension (ASE) required * it only uses


=== EIP-7840 ===
TITLE: Add blob schedule to EL config files
TYPE: Informational 
STATUS: Final
CREATED: 2024-12-12
REQUIRES: 

SUMMARY:
Add a new object to client configuration files `blobSchedule` which lists the target blob count per block and max blob count per block for

SPECIFICATION:
Extend client configuration files with the object `blobSchedule`, which has the following shape: ```json "blobSchedule": { "cancun": { "target": 3, "max": 6, "baseFeeUpdateFraction": 3338477

MOTIVATION:
- ensure there is a way to dynamically adjust the target and max blob counts per block - ensure there is a way to

RATIONALE:
Although maintaining the target and max blob only in the consensus client is desirable, we acknowledge the reality that execution clients need these values


=== EIP-6968 ===
TITLE: Contract Secured Revenue on an EVM based L2
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-05-01
REQUIRES: 


=== EIP-7749 ===
TITLE: Add wallet_signIntendedValidatorData method
TYPE: Standards Track Interface
STATUS: Draft
CREATED: 2024-06-21
REQUIRES: 1, 9, 1, ,,  , 7, 1, 2

SUMMARY:
This EIP introduces a new JSON-RPC method, `wallet_signIntendedValidatorData`, which allows signing data with an intended validator address using [ERC-191](./eip-191.md) version 0x00 with this format:

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Currently, signing messages relies heavily on ERC-191 version 0x45 (`eth_sign`) and [EIP-712](./eip-712.md) (`eth_signTypedData`). While EIP-712 provides a more structured approach, it is often seen

RATIONALE:
The `wallet_signIntendedValidatorData` method aims to bridge the gap between the simplicity of ERC-191 version 0x45 and the structured approach of EIP-712. By specifying the


=== EIP-7834 ===
TITLE: Separate Metadata Section for EOF
TYPE: Standards Track Core
STATUS: Review
CREATED: 2024-12-06
REQUIRES: 3540

SUMMARY:
Introduce a new separate metadata section to the Ethereum Object Format (EOF) that is unreachable by the code, and any changes to which does

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
It is desirable to include metadata in contract's bytecode for various reasons. For instance, both the Solidity and Vyper compilers by default include the

RATIONALE:
The `metadata_section` in the `body`, as well as the `kind_metadata` and `metadata_size` fields in the `header`, are OPTIONAL. This way, the compilers can avoid


=== EIP-7706 ===
TITLE: Separate gas type for calldata
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-05-13
REQUIRES: 1, 5, 5, 9, ,,  , 4, 8, 4, 4

SUMMARY:
Add a new type of gas for transaction calldata. Add a new transaction type that provides `max_basefee` and `priority_fee` as a vector, providing values

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
A major argument against raising the Ethereum gas limit, making calldata cheaper, or increasing the [EIP-4844](./eip-4844.md) blob count before technologies like PeerDAS become available,

RATIONALE:
### Conversion of all gas-related mechanics into vectors This allows the same logic that is used for handling gas to handle all three types


=== EIP-2711 ===
TITLE: Sponsored, expiring and batch transactions.
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2020-06-11
REQUIRES: 2718

SUMMARY:
An EIP-2718 transaction with the type number `2` is a new type of transaction that includes support for: 1. **Sponsored Transactions**: an optional additional

SPECIFICATION:
### Definitions **`TransactionType`** 2. See [EIP-2718](./eip-2718.md) **`TransactionSubtype`** is either 1, 2, 3, or 4. **`ChainId`** The transaction is valid if this value is `0`

MOTIVATION:
### Sponsored Transactions With the advent of tokens and especially stable coins, it has become common for users to not hold ETH in an

RATIONALE:
### One Monolithic EIP This EIP could be split up into multiple EIPs, one for each of the subtypes and one for the meta-type.


=== EIP-1706 ===
TITLE: Disable SSTORE with gasleft lower than call stipend
TYPE: Standards Track Core
STATUS: Withdrawn
CREATED: 2019-01-15
REQUIRES: 1283

SUMMARY:
[EIP-1283](./eip-1283.md) significantly lowers the gas costs of writing to contract's storage. This created a danger of a new kind of reentrancy attacks on existing

SPECIFICATION:
Add the following condition to the SSTORE opcode gas cost calculation: * If *gasleft* is less than or equal to 2300, fail the current

MOTIVATION:
An attack that is described in [this article](https://medium.com/chainsecurity/constantinople-enables-new-reentrancy-attack-ace4088297d9). Explicitly specifying the call stipend as an invariant will have a positive effect on Ethereum protocol

RATIONALE:
In order to keep in place the implicit reentrancy protection of existing contracts, transactions should not be allowed to modify state if the remaining


=== EIP-4881 ===
TITLE: Deposit Contract Snapshot Interface
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2021-01-29
REQUIRES: 

SUMMARY:
This EIP defines a standard format for transmitting the deposit contract Merkle tree in a compressed form during weak subjectivity sync. This allows newly

SPECIFICATION:
Consensus clients MAY continue to implement the deposit Merkle tree however they choose. However, when transmitting the tree to newly syncing nodes, clients MUST

MOTIVATION:
To reconstruct the deposit Merkle tree, most client implementations require beacon nodes to download and store every deposit log since the launch of the

RATIONALE:
The format in this specification was chosen to achieve several goals simultaneously: 1. Enable reconstruction of the deposit contract Merkle tree without requiring full


=== EIP-6 ===
TITLE: Renaming SUICIDE opcode
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2015-11-22
REQUIRES: 

SUMMARY:
The solution proposed in this EIP is to change the name of the `SUICIDE` opcode in Ethereum programming languages with `SELFDESTRUCT`. ### Motivation Mental

MOTIVATION:
Mental health is a very real issue for many people and small notions can make a difference. Those dealing with loss or depression would


=== EIP-7903 ===
TITLE: Remove Initcode Size Limit
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-03-05
REQUIRES: 1, 7, 0, ,,  , 3, 8, 6, 0

SUMMARY:
This EIP proposes the removal of the `initcode` size limit of 49152 bytes introduced in [EIP-3860](./eip-3860). The restriction complicates deploying multiple contracts addressing the

SPECIFICATION:
Revert the `initcode` size limit introduced in EIP-3860. Specifically: - Remove the 49152-byte cap on `initcode` size during contract creation. - Retain existing gas

MOTIVATION:
The EIP-3860 `initcode` size limit imposes an unnecessary constraint on deployment patterns, particularly for creation transactions creating large _logical_ contracts composed of multiple _physical

RATIONALE:
This proposal is driven by the need to restore flexibility in contract deployment patterns, such as factory contracts creating multiple sub-contracts in one transaction.


=== EIP-1898 ===
TITLE: Add `blockHash` to defaultBlock methods
TYPE: Standards Track Interface
STATUS: Final
CREATED: 2019-04-01
REQUIRES: 234

SUMMARY:
For JSON-RPC methods which currently accept a default block parameter, additionally allow the parameter to be a block hash. This EIP can be considered

SPECIFICATION:
The following JSON-RPC methods are affected: - `eth_getBalance` - `eth_getStorageAt` - `eth_getTransactionCount` - `eth_getCode` - `eth_call` - `eth_getProof` The following options, quoted from the

RATIONALE:
Currently, the state-querying JSON-RPC methods specified above have no option to unambiguously specify which block to query the state for. This can cause issues


=== EIP-758 ===
TITLE: Subscriptions and filters for completed transactions
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2017-11-09
REQUIRES: 1474

SUMMARY:
When a new transaction is submitted successfully to an Ethereum node, the node responds with the transaction's hash. If the transaction involved the execution

SPECIFICATION:
### Subscription A caller who wants to be notified when transactions of theirs complete sends an `eth_subscribe` RPC request with the first parameter `"completedTransaction"`:

MOTIVATION:
External callers presently have no way of accessing return data from Ethereum, if the function was executed via `eth_sendTransaction` or `eth_sendRawTransaction` RPC request. Access

RATIONALE:
[EIP-658](./eip-658.md) originally proposed adding return data to transaction receipts. However, return data is not charged for (as it is not stored on the blockchain),


=== EIP-7880 ===
TITLE: EOF - EXTCODEADDRESS instruction
TYPE: Standards Track Core
STATUS: Review
CREATED: 2025-02-08
REQUIRES: 7, 6, 9, 2, ,,  , 7, 7, 0, 2, ,,  , 7, 7, 6, 1

SUMMARY:
Add an instruction to EOF that reads code delegation designations from an account without requiring code introspection.

SPECIFICATION:
### Parameters | Constant | Value | |---------------------------|--------------------------------------------------------------------| | `GAS_COLD_ACCOUNT_ACCESS` | Defined as `2600` in the [Ethereum Execution Layer Spec Constants] | | `GAS_WARM_ACCESS`

MOTIVATION:
EOFv1 as scoped in [EIP-7692] removes code introspection capabilities from the EVM, preventing EOF from reading raw code values such as code delegation designations

RATIONALE:
This EIP is very similar to [EIP-7761], which introduces account type introspection. Its rationale is included by reference as they all apply to this


=== EIP-7707 ===
TITLE: Incentivize Access List Provisioning
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-05-12
REQUIRES: 2930

SUMMARY:
This EIP reduces the gas cost of access list data, incentivizing the inclusion of complete and valid access lists in transactions to improve data

SPECIFICATION:
We shall update [EIP-2930](./eip-2930.md) parameters: | Constant | Value | | - | - | | `ACCESS_LIST_STORAGE_KEY_COST` | 320 | | `ACCESS_LIST_ADDRESS_COST` | 512

MOTIVATION:
While [EIP-2930](./eip-2930.md) introduced `accessLists` as a mechanism for `SLOAD` pre-warming to reduce gas costs by informing the EVM upfront about which storage slots a

RATIONALE:
As stated in the introduction the gas cost benefit analysis does not encourage the users of the chain to provide accessList hints, even though


=== EIP-5065 ===
TITLE: Instruction for transferring ether
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-04-30
REQUIRES: 2929

SUMMARY:
Add a new instruction that transfers ether to a destination address without handing over the flow of execution to it. It should work similarly

SPECIFICATION:
Introduce a new instruction, `AIRDROP` (`0xFG`) that transfers ether to the destination without making a call to it. ### Stack input address: the account

MOTIVATION:
From an architectural point of view, execution flow should never be handed over to an untrusted contract. Ethereum currently does not have any ideal

RATIONALE:
This behavior is already possible by deploying a new contract that does `SELFDESTRUCT (0xFF)` but it is prohibitively expensive. In most scenarios, the contract


=== EIP-7793 ===
TITLE: Conditional Transactions
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-10-17
REQUIRES: 7843

SUMMARY:
This EIP proposes to add a new transaction format for "conditional transactions", that are only valid at a specified slot and index within the

SPECIFICATION:
### Parameters | Constant | Value | | - | - | | `COND_TX_TYPE` | `Bytes1(0x05)` | | `TXINDEX_OPCODE_BYTE` | `Bytes1(0x4c)` | | `TXINDEX_OPCODE_GAS`

MOTIVATION:
The proposal aims to improve support for encrypted mempools. Transactions in an encrypted mempool are ordered while the transactions are encrypted, before being decrypted

RATIONALE:
### Transaction Type An alternative design could simply return the current transaction index without adding a new transaction type. Adding a new transaction type


=== EIP-2242 ===
TITLE: Transaction Postdata
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-08-16
REQUIRES: 

SUMMARY:
A paradigm shift in how blockchains are used has been seen recently in Eth 2.0, with the rise of [_Execution Environments_](https://notes.ethereum.org/w1Pn2iMmSTqCmVUTGV4T5A?view) (EEs), and [_stateless

SPECIFICATION:
We propose a consensus modification, beginning at `FORK_BLKNUM`: An additional optional field, `postdata`, is added to transactions. Serialized transactions now have the format: ```

MOTIVATION:
While [EIP-2028](./eip-2028.md) provides a reduction in gas cost of calldata, and is a step in the right direction of encouraging use of history rather

RATIONALE:
The changes proposed are as minimal and non-disruptive to the existing EVM and transaction format as possible while also supporting possible [future extensions](https://ethresear.ch/t/multi-threaded-data-availability-on-eth-1/5899) through


=== EIP-1052 ===
TITLE: EXTCODEHASH opcode
TYPE: Standards Track Core
STATUS: Final
CREATED: 2018-05-02
REQUIRES: 161

SUMMARY:
This EIP specifies a new opcode, which returns the keccak256 hash of a contract's code.

SPECIFICATION:
A new opcode, `EXTCODEHASH`, is introduced, with number `0x3f`. The `EXTCODEHASH` takes one argument from the stack, zeros the first 96 bits and pushes

MOTIVATION:
Many contracts need to perform checks on a contract's bytecode, but do not necessarily need the bytecode itself. For instance, a contract may want

RATIONALE:
As described in the motivation section, this opcode is widely useful, and saves on wasted gas in many cases. The gas cost is the


=== EIP-225 ===
TITLE: Clique proof-of-authority consensus protocol
TYPE: Standards Track Core
STATUS: Final
CREATED: 2017-03-06
REQUIRES: 

SUMMARY:
Clique is a proof-of-authority consensus protocol. It shadows the design of Ethereum mainnet, so it can be added to any client with minimal effort.

SPECIFICATION:
We define the following constants: * **`EPOCH_LENGTH`**: Number of blocks after which to checkpoint and reset the pending votes. * Suggested `30000` for the

MOTIVATION:
Ethereum's first official testnet was Morden. It ran from July 2015 to about November 2016, when due to the accumulated junk and some testnet


=== EIP-4345 ===
TITLE: Difficulty Bomb Delay to June 2022
TYPE: Standards Track Core
STATUS: Final
CREATED: 2021-10-05
REQUIRES: 

SUMMARY:
Starting with `FORK_BLOCK_NUMBER` the client will calculate the difficulty based on a fake block number suggesting to the client that the difficulty bomb is

SPECIFICATION:
#### Relax Difficulty with Fake Block Number For the purposes of `calc_difficulty`, simply replace the use of `block.number`, as used in the exponential ice

MOTIVATION:
Targeting for The Merge to occur before June 2022. If it is not ready by then, the bomb can be delayed further.

RATIONALE:
The following script predicts a ~0.1 second delay to block time by June 2022 and a ~0.5 second delay by July 2022. This gives


=== EIP-969 ===
TITLE: Modifications to ethash to invalidate existing dedicated hardware implementations
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2018-04-03
REQUIRES: 

SUMMARY:
There are companies who currently have dedicated hardware based ethereum miners in production, and may be actively mining. This EIP aims to "poison the

SPECIFICATION:
If `block.number >= ASIC_MITIGATION_FORK_BLKNUM`, require that the ethash solution sealing the block has been mined using `ethashV2`.

MOTIVATION:
ASIC-based miners will have lower operational costs than GPU-based miners, which will result in GPU-based mining quickly becoming unprofitable. Given that production of ASIC-based

RATIONALE:
This EIP is aimed at breaking existing ASIC-based miners via small changes to the existing ethash algorithm. We hope to accomplish the following: 1.


=== EIP-7981 ===
TITLE: Increase access list cost
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-12-27
REQUIRES: 2930

SUMMARY:
This EIP charges access lists 16 gas per byte for their data footprint, closing a loophole that allows circumventing [EIP-7623](./eip-7623.md) floor pricing.

SPECIFICATION:
| Parameter | Value | | -------------------------------------- | ----- | | `ACCESS_LIST_ADDRESS_COST` | `2400` | | `ACCESS_LIST_STORAGE_KEY_COST` | `1900` | | `ACCESS_LIST_DATA_COST_PER_BYTE` | `16`

MOTIVATION:
Access lists can circumvent [EIP-7623](./eip-7623.md) by filling blocks with uncharged data. Each address uses 20 bytes and each storage key uses 32 bytes, but

RATIONALE:
Adding 16 gas per byte ensures consistent pricing across all transaction data: - Address: 2720 gas (2400 + 320) - Storage key: 2412 gas


=== EIP-7667 ===
TITLE: Raise gas costs of hash functions
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-03-31
REQUIRES: 

SUMMARY:
Raise the gas costs of opcodes and precompiles that involve hash functions.

SPECIFICATION:
| Parameter | Previous value | New value | | - | - | - | | `KECCAK_BASE_COST` | 30 | 300 | |

MOTIVATION:
Gas costs for hash function opcodes and precompiles were originally set based on the time that it takes to execute them on a regular

RATIONALE:
The above increases the gas costs of all opcodes and precompiles that can be used to require large amounts of hashing in the EVM.


=== EIP-2786 ===
TITLE: Ethereum Provider Connect/Disconnect Events
TYPE: Standards Track Interface
STATUS: Withdrawn
CREATED: 2020-07-15
REQUIRES: 2700

SUMMARY:
The Provider is said to be “connected” when it can service RPC requests to at least one chain. The Provider is said to be

SPECIFICATION:
### Definitions #### Connected The Provider is considered `connected` when it is able to service RPC requests to at least one chain. #### Disconnected

MOTIVATION:
When an application is hooked up to an Ethereum provider, there is value in having the application be alerted of connect/disconnect events that may

RATIONALE:
This EIP is mostly a retrospective EIP meaning it codifies an already existing specification so there isn’t a lot of room for improving things


=== EIP-1702 ===
TITLE: Generalized Account Versioning Scheme
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2017-12-30
REQUIRES: 

SUMMARY:
This defines a method of hard forking while maintaining the exact functionality of existing account by allowing multiple versions of the virtual machines to

SPECIFICATION:
### Account State Re-define account state stored in the world state trie to have 5 items: `nonce`, `balance`, `storageRoot`, `codeHash`, and `version`. The newly

MOTIVATION:
By allowing account versioning, we can execute different virtual machine for contracts created at different times. This allows breaking features to be implemented while

RATIONALE:
This introduces account versioning via a new RLP item in account state. The design above gets account versioning by making the contract *family* always


=== EIP-7863 ===
TITLE: Block-level Warming
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-01-15
REQUIRES: 

SUMMARY:
This proposal introduces block-level address and storage key warming, allowing accessed addresses and storage keys to maintain their "warm" status throughout an entire block's

SPECIFICATION:
### Mechanics When a storage slot is accessed within a block: 1. The first access to a slot in a block incurs the cold

MOTIVATION:
Currently, the EVM's storage slot warming mechanism operates at the transaction level, requiring each transaction to "warm up" slots independently, even when accessing the

RATIONALE:
The proposal builds on several key observations: 1. **Caching Efficiency**: Modern Ethereum clients already implement sophisticated caching mechanisms at the block level. Extending address


=== EIP-7745 ===
TITLE: Light client and DHT friendly log index
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-07-17
REQUIRES: 7916

SUMMARY:
Replace the fixed 2048 bit log event bloom filters in block headers with a new data structure that can adapt to the changing number

SPECIFICATION:
### Terms and definitions - _log value_: either an _address value_ or a _topic value_. Each `LOG` opcode adds one _address value_ and 0..4

MOTIVATION:
Adding logs has a significantly lower gas cost and should accordingly be less resource consuming than writing to the state. The original design of

RATIONALE:
### Log value index space In each block a varying number of _log values_ are emitted. In addition to inefficient search, another drawback of


=== EIP-7591 ===
TITLE: BLS signed transactions
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2024-01-10
REQUIRES: 

SUMMARY:
This EIP introduces a new [EIP-2718](./eip-2718.md) transaction type that is signed with BLS signatures.

SPECIFICATION:
BLS_TX_TYPE = Bytes1(0x04) ### Transaction Type The transaction type will have the following format: ``` [chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, to, value, data, access_list,

MOTIVATION:
The BLS signature scheme allows for easy aggregation and verification of aggregated signatures. If a substantial number of transactions on mainnet were BLS signed

RATIONALE:
Removing the ECDSA signature from a transaction saves 65 bytes. The BLS public key is 48 bytes, the aggregated signature is 96 bytes. Thus


=== EIP-2200 ===
TITLE: Structured Definitions for Net Gas Metering
TYPE: Standards Track Core
STATUS: Final
CREATED: 2019-07-18
REQUIRES: 

SUMMARY:
This EIP provides a structured definition of net gas metering changes for `SSTORE` opcode, enabling new usages for contract storage, and reducing excessive gas

SPECIFICATION:
Define variables `SLOAD_GAS`, `SSTORE_SET_GAS`, `SSTORE_RESET_GAS` and `SSTORE_CLEARS_SCHEDULE`. The old and new values for those variables are: * `SLOAD_GAS`: changed from `200` to `800`. *

MOTIVATION:
This EIP proposes a way for gas metering on `SSTORE`, using information that is more universally available to most implementations, and require as little

RATIONALE:
This EIP mostly achieves what a transient storage tries to do ([EIP-1087] and [EIP-1153]), but without the complexity of introducing the concept of "dirty


=== EIP-158 ===
TITLE: State clearing
TYPE: Standards Track Core
STATUS: Final
CREATED: 2016-10-16
REQUIRES: 


=== EIP-7516 ===
TITLE: BLOBBASEFEE instruction
TYPE: Standards Track Core
STATUS: Final
CREATED: 2023-09-11
REQUIRES: 3, 1, 9, 8, ,,  , 4, 8, 4, 4

SUMMARY:
Add a `BLOBBASEFEE (0x4a)` instruction that returns the value of the blob base-fee of the current block it is executing in. It is the

SPECIFICATION:
Add a `BLOBBASEFEE` instruction with opcode `0x4a`, with gas cost `2`. | Op | Input | Output | Cost | |------|-------|--------|------| | 0x4a |

MOTIVATION:
The intended use case would be for contracts to get the value of the blob base-fee. This feature enables blob-data users to programmatically account

RATIONALE:
### Gas cost The value of the blob base-fee is needed to process data-blob transactions. That means its value is already available before running


=== EIP-7886 ===
TITLE: Delayed execution
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-02-18
REQUIRES: 1, 5, 5, 9, ,,  , 2, 9, 3, 0, ,,  , 4, 8, 4, 4, ,,  , 7, 6, 2, 3, ,,  , 7, 7, 0, 2

SUMMARY:
This proposal introduces a mechanism to make execution blocks statically verifiable through minimal checks that only require the previous state, without requiring execution of

SPECIFICATION:
### Header Changes The block header structure is extended to support delayed execution: ```python @dataclass class Header: # Existing fields parent_hash: Hash32 ommers_hash: Hash32

MOTIVATION:
The primary advantage of this proposal is **asynchronous block validation**. In the current Ethereum protocol, blocks must be fully executed before validators can attest

RATIONALE:
### Deferred Execution Outputs The core innovation of deferring execution outputs to the next block enables static and stateful validation without requiring immediate execution.


=== EIP-2294 ===
TITLE: Explicit bound to Chain ID size
TYPE: Informational 
STATUS: Review
CREATED: 2019-09-19
REQUIRES: 155

SUMMARY:
This EIP informationally defines the "Safe Range" and "Max Range" of ChainId based on a few known restrictions such as [EIP-155](./eip-155.md) and major wallet

SPECIFICATION:
We declared the following chainID range 1. (1, 2^31 - 1): "Safe Range", the higher bound is decided by Javascript number 2. (1, MAX_CHAIN_ID);

MOTIVATION:
1. We want chainId to be safe across the different components of the ecosystem such as smart contract, wallet, dApp and JSON-RPC etc. 2.

RATIONALE:
### Beyond "Max Range", the EIP-155 will overflow as discussed below The `MAX_CHAIN_ID` is calculated to avoid overflow when performing uint64 math. For reference,


=== EIP-6049 ===
TITLE: Deprecate SELFDESTRUCT
TYPE: Meta 
STATUS: Final
CREATED: 2022-11-27
REQUIRES: 

SUMMARY:
This EIP deprecates the `SELFDESTRUCT` opcode and warns against its use. A breaking change to this functionality is likely to come in the future.

SPECIFICATION:
Documentation of the `SELFDESTRUCT` opcode is updated to warn against its use and to note that a breaking change may be forthcoming.

MOTIVATION:
Discussions about how to change `SELFDESTRUCT` are ongoing. But there is a strong consensus that *something* will change.

RATIONALE:
As time goes on, the cost of doing something increases, because any change to `SELFDESTRUCT` will be a breaking change. The Ethereum Blog and


=== EIP-7910 ===
TITLE: eth_config JSON-RPC Method
TYPE: Standards Track Interface
STATUS: Draft
CREATED: 2025-03-18
REQUIRES: 

SUMMARY:
This document describes an RPC method that provides node-relevant configuration data for the current, next and last known forks.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Throughout Ethereum's history, there have been multiple instances where a client was not correctly configured for an upcoming hard fork, causing it to fall

RATIONALE:
### Why Enumerate Precompiles? (And in General, Why Track a Particular Config Item?) The purpose of this specification is to enable nodes to advertise,


=== EIP-6690 ===
TITLE: EVM Modular Arithmetic Extensions
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-03-15
REQUIRES: 

SUMMARY:
This EIP proposes new EVM modular arithmetic opcodes which support operations on odd or power-of-two moduli between 3 and 2**768-1

SPECIFICATION:
### Constants | Name | Value | Description | | ---- | ---- | ---- | | `COST_SETMODX_BASE` | 1 | static cost component

MOTIVATION:
Current opcodes for modular arithmetic only support values up to 256 bits wide. In addition, they are permissive and accept any representable value for

RATIONALE:
### Separation of EVM Memory and EVMMAX Virtual Register Space It is assumed that optimized implementations will not store values in EVM-compatible big-endian serialization


=== EIP-7807 ===
TITLE: SSZ execution blocks
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-10-28
REQUIRES: 6, 4, 0, 4, ,,  , 6, 4, 6, 5, ,,  , 6, 4, 6, 6, ,,  , 7, 4, 9, 5, ,,  , 7, 7, 0, 6, ,,  , 7, 7, 9, 9

SUMMARY:
This EIP defines a migration process of execution blocks to [Simple Serialize (SSZ)](https://github.com/ethereum/consensus-specs/blob/b5c3b619887c7850a8c1d3540b471092be73ad84/ssz/simple-serialize.md).

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
With [EIP-6404](./eip-6404.md) SSZ transactions, [EIP-6466](./eip-6466.md) SSZ receipts, and [EIP-6465](./eip-6465.md) SSZ withdrawals, all Merkle-Patricia Trie (MPT) besides the state trie are converted to SSZ. This

RATIONALE:
This transition completes the transition to SSZ for everything except the execution state trie. ### Future - With SSZ `Log`, the withdrawals mechanism and


=== EIP-2035 ===
TITLE: Stateless Clients - Repricing SLOAD and SSTORE to pay for block proofs
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2019-05-16
REQUIRES: 

SUMMARY:
It is part of the State Rent roadmap. This particular change prepares Ethereum for introduction of the block proofs (current understanding is that they

SPECIFICATION:
Not very formal at the moment, but will be formalised with more research and prototyping. Gas of operations `SLOAD` and `SSTORE` increases by `X`

MOTIVATION:
There is [empirical analysis](https://github.com/holiman/vmstats/blob/master/README.md) showing that `SLOAD` opcode is currently underpriced in terms of execution latency it adds to the block processing. The hypothesis

RATIONALE:
[EIP-1884](./eip-1884.md) seeks to increase the gas cost of `SLOAD` but using a different justification (latency of the execution as described in the Motivation). This


=== EIP-1716 ===
TITLE: Hardfork Meta: Petersburg
TYPE: Meta 
STATUS: Final
CREATED: 2019-01-21
REQUIRES: 1, 0, 1, 3, ,,  , 1, 2, 8, 3

SUMMARY:
This meta-EIP specifies the changes included in the Ethereum hardfork that removes [EIP-1283](./eip-1283.md) from [Constantinople](./eip-1013.md).

SPECIFICATION:
- Codename: Petersburg - Aliases: St. Petersfork, Peter's Fork, Constantinople Fix - Activation: - `Block >= 7_280_000` on the Ethereum Mainnet - `Block >=


=== EIP-7691 ===
TITLE: Blob throughput increase
TYPE: Standards Track Core
STATUS: Final
CREATED: 2024-04-17
REQUIRES: 

SUMMARY:
Increases the number of blobs in a block to provide more scale to Ethereum via L2 solution that rely on L1 data capacity.

SPECIFICATION:
### Parameters | Constant | Value | |------------------------------------------|---------------------| | `MAX_BLOBS_PER_BLOCK_ELECTRA` | `9` | | `TARGET_BLOBS_PER_BLOCK_ELECTRA` | `6` | | `MAX_BLOB_GAS_PER_BLOCK` | `1179648` | |

MOTIVATION:
Ethereum, with its rollup centric roadmap, scales by relying on L2. Since the Dencun fork, the blob gas target and maximum was set to

RATIONALE:
### Simplicity The EIP aims to minimize the amount of testing and implementation effort from the perspective of the client teams, to allow for


=== EIP-7958 ===
TITLE: EVM64 - Little endian opcodes
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2025-05-26
REQUIRES: 7937

SUMMARY:
This EIP defines additional little endian opcodes that can be deployed alongside [EIP-7937](./eip-7937.md).

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The core EIP that defines EVM64 (EIP-7937) is endianness-independent. This EIP defines those additional opcodes that must expose endianness. They are the bitwise opcode

RATIONALE:
For detailed rationale discussion, please see the core EVM64 definition [EIP-7937](./eip-7937.md).


=== EIP-3788 ===
TITLE: Strict enforcement of chainId
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2021-09-02
REQUIRES: 155

SUMMARY:
Reject transactions that do not explicitly have the same chainId as the node's configuration.

SPECIFICATION:
As of the fork block `N`, consider transactions with a `chaindId = 0` to be invalid. Such that transactions are verified based on the

MOTIVATION:
Per [EIP-155](./eip-155.md) a transaction with a `chainId = 0` is considered to be a valid transaction. This was a feature to offer developers the

RATIONALE:
The configuration set by the node is the main source of truth, and thus should be explicitly used when deciding how to filter out


=== EIP-2584 ===
TITLE: Trie format transition with overlay trees
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2020-04-03
REQUIRES: 

SUMMARY:
This EIP describes a four phase process to complete the conversion. * In the first phase, all new state writes are made to an

SPECIFICATION:
This specification follows the notation introduced by the [Yellow Paper](https://ethereum.github.io/yellowpaper). Prior to reading it is advisable to be familiar with the Yellow Paper. ###

MOTIVATION:
There is a long running interest in switching the state trie from a hexary format to a binary format, for reasons pertaining to proof

RATIONALE:
Methods that have been discussed until now include a "stop the world" approach, in which the chain is stopped for the significant amount of


=== EIP-7851 ===
TITLE: Deactivate/Reactivate a Delegated EOA's Key
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-12-27
REQUIRES: 7702

SUMMARY:
This EIP introduces a precompiled contract that enables Externally Owned Accounts (EOAs) with delegated control to smart contracts via [EIP-7702](./eip-7702) to deactivate or reactivate

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[EIP-7702](./eip-7702) enables EOAs to gain smart contract capabilities, but the private key of the EOA still retains full control over the account. With this

RATIONALE:
### Cost of Precompiled Contract The `PRECOMPILE_GAS_COST` represents the gas required to validate and potentially update an account's code. A fair cost for calling


=== EIP-233 ===
TITLE: Formal process of hard forks
TYPE: Meta 
STATUS: Stagnant
CREATED: 2017-03-23
REQUIRES: 

SUMMARY:
To describe the formal process of preparing and activating hard forks.

SPECIFICATION:
A Meta EIP should be created and merged as a *Draft* as soon as a new hard fork is planned. This EIP should contain:

MOTIVATION:
Today discussions about hard forks happen at various forums and sometimes in ad-hoc ways.

RATIONALE:
A meta EIP for coordinating the hard fork should help in visibility and traceability of the scope of changes as well as provide a


=== EIP-7547 ===
TITLE: Inclusion lists
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2023-10-24
REQUIRES: 

SUMMARY:
Censorship resistance is a core value proposition of blockchains. Inclusion lists aim to provide a mechanism to improve the censorship resistance of Ethereum by

SPECIFICATION:
### Constants | Name | Value | | - | - | | `MAX_TRANSACTIONS_PER_INCLUSION_LIST` | `2**4 = 16` | | `MAX_GAS_PER_INCLUSION_LIST` | `2**21` |

MOTIVATION:
Since the merge, validators have started outsourcing almost all block production to a specialized set of builders who compete to extract the most MEV

RATIONALE:
We consider a few design decisions present in this EIP. 1. `ReducedSummary` versus `Summary` - The original proposal tries to improve data efficiency by


=== EIP-4938 ===
TITLE: eth/67 - Removal of GetNodeData
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2022-03-23
REQUIRES: 2, 4, 6, 4, ,,  , 2, 4, 8, 1

SUMMARY:
The [Ethereum Wire Protocol](https://github.com/ethereum/devp2p/blob/40ab248bf7e017e83cc9812a4e048446709623e8/caps/eth.md) defines request and response messages for exchanging data between clients. The `GetNodeData` request retrieves a set of trie nodes or

SPECIFICATION:
Remove the following message types from the `eth` protocol: * `GetNodeData (0x0d)` * **(eth/66)**: `[request_id: P, [hash_0: B_32, hash_1: B_32, ...]]` * `NodeData (0x0e)`

MOTIVATION:
`GetNodeData` and `NodeData` were introduced in protocol version `eth/63` to allow for a sync mode called "fast sync", which downloads the Ethereum state without

RATIONALE:
A replacement for `GetNodeData` is available in the [snap protocol](https://github.com/ethereum/devp2p/blob/40ab248bf7e017e83cc9812a4e048446709623e8/caps/snap.md). Specifically, clients can use the [GetByteCodes](https://github.com/ethereum/devp2p/blob/40ab248bf7e017e83cc9812a4e048446709623e8/caps/snap.md#getbytecodes-0x04) and [GetTrieNodes](https://github.com/ethereum/devp2p/blob/40ab248bf7e017e83cc9812a4e048446709623e8/caps/snap.md#gettrienodes-0x06) messages instead of `GetNodeData`. The snap


=== EIP-3091 ===
TITLE: Block Explorer API Routes
TYPE: Standards Track Interface
STATUS: Stagnant
CREATED: 2020-11-02
REQUIRES: 

SUMMARY:
This proposal brings standardization between block explorers API routes when linking transactions, blocks, accounts and tokens.

SPECIFICATION:
Block explorers will route their webpages accordingly for the following data: ### Blocks `<BLOCK_EXPLORER_URL>/block/<BLOCK_HASH_OR_HEIGHT>` ### Transactions `<BLOCK_EXPLORER_URL>/tx/<TX_HASH>` ### Accounts `<BLOCK_EXPLORER_URL>/address/<ACCOUNT_ADDRESS>` ### Tokens `<BLOCK_EXPLORER_URL>/token/<TOKEN_ADDRESS>`

MOTIVATION:
Currently wallets and dapps link transactions and accounts to block explorer web pages but as chain diversity and layer two solutions grow it becomes

RATIONALE:
The particular paths used in this proposal are chosen to be compatible with the majority of existing block explorers.


=== EIP-7514 ===
TITLE: Add Max Epoch Churn Limit
TYPE: Standards Track Core
STATUS: Final
CREATED: 2023-09-07
REQUIRES: 

SUMMARY:
Update the maximum validator growth rate from an exponential to a linear increase by capping the epoch churn limit.

SPECIFICATION:
### Constants | Name | Value | | ---- | ----- | | `MAX_PER_EPOCH_ACTIVATION_CHURN_LIMIT` | 8 | ### Execution layer This requires no changes

MOTIVATION:
This proposal aims to mitigate the negative externalities of very high level of total ETH supply staked before a proper solution is implemented. In

RATIONALE:
### `MAX_PER_EPOCH_CHURN_LIMIT` value Depending on the specific constant selection the churn can _decrease_ at the activation fork epoch. The Beacon chain spec can handle


=== EIP-4863 ===
TITLE: Beacon chain push withdrawals
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-02-28
REQUIRES: 

SUMMARY:
Introduce a new [EIP-2718 transaction type](./eip-2718.md) to support validator withdrawals that are "pushed" from the beacon chain to the EVM. Add block validations to

SPECIFICATION:
| constants | value | units |--- |--- |--- | `FORK_TIMESTAMP` | TBD | | `WITHDRAWAL_TX_TYPE` | `0x3` | byte Beginning with the execution

MOTIVATION:
This EIP provides a way for validator withdrawals made on the beacon chain to enter into the EVM. The architecture is "push"-based, rather than

RATIONALE:
### Push vs pull approach This push approach gives validators a small subsidy with respect to processing, in lieu of needing to buy gas


=== EIP-2387 ===
TITLE: Hardfork Meta: Muir Glacier
TYPE: Meta 
STATUS: Final
CREATED: 2019-11-22
REQUIRES: 1, 6, 7, 9, ,,  , 2, 3, 8, 4

SUMMARY:
This meta-EIP specifies the changes included in the Ethereum hard fork named Muir Glacier. This hard fork addresses the impending Ice Age on Ethereum

SPECIFICATION:
- Codename: Muir Glacier ### Activation - `Block >= 9,200,000` on the Ethereum mainnet - `Block >= 7,117,117` on the Ropsten testnet - `Block

MOTIVATION:
Ethereum achieves a consistent block time due to its' difficulty retargeting algorithm. If a block-time is higher than 20 seconds, it reduces the difficulty,

RATIONALE:
I want to address the rationale for the intention of the Iceage and the implementation of the Iceage separately. **The original intentions of the


=== EIP-7938 ===
TITLE: Exponential Gas Limit Increase
TYPE: Informational 
STATUS: Draft
CREATED: 2025-04-27
REQUIRES: 

SUMMARY:
This proposal introduces a deterministic gas limit growth schedule via client-side defaults. Ethereum clients will vote to increase the gas limit according to an

SPECIFICATION:
### Schedule Let `G0 = 50,000,000` be the gas limit at the activation epoch. Let the activation epoch be Ethereum beacon chain **epoch 369017**,

MOTIVATION:
The current gas limit mechanism relies on miner/operator voting, which lacks coordination and predictability. While flexible, this approach can lead to stagnation or overly

RATIONALE:
This EIP maintains Ethereum's current gas voting mechanism but enhances it with a predictable and community-coordinated trajectory. By distributing responsibility across clients rather than


=== EIP-7805 ===
TITLE: Fork-choice enforced Inclusion Lists (FOCIL)
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-11-01
REQUIRES: 

SUMMARY:
FOCIL implements a robust mechanism to preserve Ethereum’s censorship resistance properties by guaranteeing timely transaction inclusion. FOCIL (**Fo**rk-**c**hoice enforced **I**nclusion **L**ists) is built in

SPECIFICATION:
### Execution Layer On the execution layer, an additional check is introduced for new payloads. After all of the transactions in the payload have

MOTIVATION:
In an effort to shield the Ethereum validator set from centralizing forces, the right to build blocks has been auctioned off to specialized entities

RATIONALE:
### Core Properties - Committee-based: FOCIL relies on a committee of multiple validators, rather than a single proposer, to construct and broadcast ILs. This


=== EIP-6953 ===
TITLE: Network Upgrade Activation Triggers
TYPE: Informational 
STATUS: Final
CREATED: 2023-04-28
REQUIRES: 2, 9, 8, 2, ,,  , 3, 6, 7, 5, ,,  , 6, 1, 2, 2

SUMMARY:
This EIP outlines the various network upgrade activation triggers used on Ethereum over time, from the proof-of-work era to the first post-merge network upgrade,

SPECIFICATION:
### Proof-of-Work Network Upgrades During the proof-of-work era, network upgrades on Ethereum were triggered based on specific block numbers. The following upgrades followed this

MOTIVATION:
This EIP aims to provide users and developers with a single source of truth for understanding the various upgrade activation patterns used throughout Ethereum's

RATIONALE:
### Blocks and Epochs Blocks and epochs serve as natural trigger points for upgrades, as they represent the levels at which state transitions occur


=== EIP-7569 ===
TITLE: Hardfork Meta - Dencun
TYPE: Meta 
STATUS: Final
CREATED: 2023-12-01
REQUIRES: 1, 1, 5, 3, ,,  , 4, 7, 8, 8, ,,  , 4, 8, 4, 4, ,,  , 5, 6, 5, 6, ,,  , 6, 7, 8, 0, ,,  , 7, 0, 4, 4, ,,  , 7, 0, 4, 5, ,,  , 7, 5, 1, 4, ,,  , 7, 5, 1, 6, ,,  , 7, 5, 6, 8

SUMMARY:
This Meta EIP lists the EIPs included in the Dencun network upgrade across both Ethereum's execution and consensus layers.

SPECIFICATION:
### Included EIPs * [EIP-1153](./eip-1153.md): Transient storage opcodes * [EIP-4788](./eip-4788.md): Beacon block root in the EVM * [EIP-4844](./eip-4844.md): Shard Blob Transactions * [EIP-5656](./eip-5656.md): MCOPY

RATIONALE:
This Meta EIP provides a global view of all changes included in the Dencun network upgrade, as well as links to full specification.


=== EIP-1014 ===
TITLE: Skinny CREATE2
TYPE: Standards Track Core
STATUS: Final
CREATED: 2018-04-20
REQUIRES: 

SPECIFICATION:
Adds a new opcode (`CREATE2`) at `0xf5`, which takes 4 stack arguments: endowment, memory_start, memory_length, salt. Behaves identically to `CREATE` (`0xf0`), except using `keccak256(

MOTIVATION:
Allows interactions to (actually or counterfactually in channels) be made with addresses that do not exist yet on-chain but can be relied on to

RATIONALE:
#### Address formula * Ensures that addresses created with this scheme cannot collide with addresses created using the traditional `keccak256(rlp([sender, nonce]))` formula, as `0xff`


=== EIP-7688 ===
TITLE: Forward compatible consensus data structures
TYPE: Standards Track Core
STATUS: Draft
CREATED: 2024-04-15
REQUIRES: 6, 1, 1, 0, ,,  , 7, 0, 0, 2, ,,  , 7, 2, 5, 1, ,,  , 7, 4, 9, 5, ,,  , 7, 5, 4, 9, ,,  , 7, 5, 6, 9, ,,  , 7, 9, 1, 6

SUMMARY:
This EIP defines the changes needed to adopt `ProgressiveContainer` from [EIP-7495](./eip-7495.md) and `ProgressiveList` from [EIP-7916](./eip-7916.md) in consensus data structures.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Ethereum's consensus data structures make heavy use of [Simple Serialize (SSZ)](https://github.com/ethereum/consensus-specs/blob/b5c3b619887c7850a8c1d3540b471092be73ad84/ssz/simple-serialize.md) `Container`, which defines how they are serialized and merkleized. The merkleization scheme allows

RATIONALE:
### Best timing? Applying this EIP breaks `hash_tree_root` and Merkle tree verifiers a single time, while promising forward compatibility from the fork going forward.


=== EIP-7773 ===
TITLE: Hardfork Meta - Glamsterdam
TYPE: Meta 
STATUS: Draft
CREATED: 2024-09-26
REQUIRES: 7, 6, 0, 7, ,,  , 7, 7, 2, 3

SUMMARY:
This Meta EIP lists the EIPs formally Proposed, Considered, Declined for & Scheduled for Inclusion in the Glamsterdam network upgrade.

SPECIFICATION:
Definitions for `Scheduled for Inclusion`, `Considered for Inclusion`, `Declined for Inclusion` and `Proposed for Inclusion` can be found in [EIP-7723](./eip-7723.md). ### EIPs Scheduled for

RATIONALE:
This Meta EIP provides a global view of all changes included in the Glamsterdam network upgrade, as well as links to full specification.


=== EIP-5022 ===
TITLE: Increase price of SSTORE from zero to non-zero to 40k gas
TYPE: Standards Track Core
STATUS: Stagnant
CREATED: 2022-04-20
REQUIRES: 

SUMMARY:
Increase the price of the SSTORE opcode from `20_000` gas to `40_000` gas when the original slot is zero and the resultant slot is

SPECIFICATION:
| Constant | Value | | - | - | | `FORK_BLOCK` | TBD | | `NEW_STORAGE_PRICE` | `40_000` For blocks where `block.number >=

MOTIVATION:
The cost of creating a piece of new state increases as state is larger. However, the price for creating every new storage slot has

RATIONALE:
### Why not also raise the cost of non-zero to non-zero? Rewriting storage does not affect state growth, which is the main issue this


=== EIP-4 ===
TITLE: EIP Classification
TYPE: Meta 
STATUS: Final
CREATED: 2015-11-17
REQUIRES: 


=== EIP-7549 ===
TITLE: Move committee index outside Attestation
TYPE: Standards Track Core
STATUS: Final
CREATED: 2023-11-01
REQUIRES: 

SUMMARY:
Move the committee's `index` field outside of the signed Attestation message to allow aggregation of equal consensus votes.

SPECIFICATION:
### Execution layer This requires no changes to the Execution Layer. ### Consensus layer - Set `index` field from `AttestationData` to a fixed value

MOTIVATION:
This proposal aims to make Casper FFG clients more efficient by reducing the average number of pairings needed to verify consensus rules. While all

RATIONALE:
### Deprecation strategy The `index` field in `AttestationData` can be deprecated by: 1. Removing the field 2. Preserving the field and setting it to


=== EIP-627 ===
TITLE: Whisper Specification
TYPE: Standards Track Networking
STATUS: Final
CREATED: 2017-05-05
REQUIRES: 

SUMMARY:
This EIP describes the format of Whisper messages within the ÐΞVp2p Wire Protocol. This EIP should substitute the [existing specification](https://github.com/ethereum/wiki/wiki/Whisper-Wire-Protocol). More detailed documentation on

SPECIFICATION:
All Whisper messages sent as ÐΞVp2p Wire Protocol packets should be RLP-encoded arrays of data containing two objects: integer packet code followed by another

MOTIVATION:
It is necessary to specify the standard for Whisper messages in order to ensure forward compatibility of different Whisper clients.

RATIONALE:
Packet codes 0x00 and 0x01 are already used in all Whisper versions. Packet code 0x02 will be necessary for the future development of Whisper.


=== EIP-7199 ===
TITLE: Linter Scope
TYPE: Meta 
STATUS: Withdrawn
CREATED: 2023-06-20
REQUIRES: 

SUMMARY:
Currently in practice EIP linter tools (EIPW, for example) will block a Pull Request for lint errors even if that lint errors was not

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

RATIONALE:
This policy allows micro contributions for anyone who just want to fix a typo or change a section of a section in a large
