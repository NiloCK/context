=== ERC-7722 ===
TITLE: Opaque Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-06-09
REQUIRES: 

SUMMARY:
This ERC proposes a specification for an opaque token that enhances privacy by concealing balance information. Privacy is achieved by representing balances as off-chain

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Smart contract accounts serve as well-defined identities that can have reusable claims and attestations attached to them, making them highly useful for various applications.

RATIONALE:
### Breaking the ERC-20 Compatibility The transparency inherent in ERC-20 tokens presents a significant issue for reusable blockchain identities. To address this, we prioritize


=== ERC-5485 ===
TITLE: Legitimacy, Jurisdiction and Sovereignty
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-08-17
REQUIRES: 1, 6, 5, ,,  , 5, 2, 4, 7

SUMMARY:
Provide a way for compliant smart contracts to declare their legitimacy lineage, jurisdiction they observe, and sovereignty if they choose to not fall onto

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Today, smart contracts have no standard way to specify their legitimacy lineage, jurisdiction, or sovereignty relationship. The introduction of such a standard, supports better

RATIONALE:
Needs discussion.


=== ERC-6617 ===
TITLE: Bit Based Permission
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-02-27
REQUIRES: 

SUMMARY:
This EIP offers a standard for building a bit-based permission and role system. Each permission is represented by a single bit. By using an

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

RATIONALE:
Currently permission and access control is performed using a single owner ([ERC-173](./eip-173.md)) or with `bytes32` roles ([ERC-5982](./eip-5982.md)). However, using bitwise and bitmask operations allows


=== ERC-7845 ===
TITLE: Universal Orchestrator RPC
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-11-07
REQUIRES: 

SUMMARY:
> "Hey smart speaker, swap my Shiba Inu for Pillar" > "Assistant, how much USDC can I buy with what's in my wallet?" >

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Data model standards can be written in any shape. A system will often expose their external interface but require that the request to the

RATIONALE:
- Uses the Ethereum JSON-RPC JSON wrapper for greater compatibility. - The interface definitions use only generic primitive types to ensure wide compatibility for


=== ERC-1328 ===
TITLE: WalletConnect URI Format
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-08-15
REQUIRES: 

SUMMARY:
This standard defines how the data to connect some application and a wallet can be encoded with a URI. This URI can then be

SPECIFICATION:
### Syntax WalletConnect request URI with the following parameters: request = "wc" ":" topic [ "@" version ][ "?" parameters ] topic = STRING

RATIONALE:
This proposal moves away from the JSON format used in the alpha version of the WalletConnect protocol because it suffered from very inefficient parsing


=== ERC-1175 ===
TITLE: Wallet & shop standard for all tokens (erc20)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-06-21
REQUIRES: 20

SUMMARY:
The mutual trust between the wallet and the shop created by the authenticated contract allows you to pay for and purchase items at a

SPECIFICATION:
![workflow](../assets/eip-1175/workflow.png)

MOTIVATION:
New standards with improvements have been released, but the majority of tokens currently being developed are erc20 tokens. So I felt I needed a


=== ERC-1592 ===
TITLE: Address and ERC20-compliant transfer rules
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-09
REQUIRES: 

SUMMARY:
This standard proposal should answer the following challenges: - Enable integration of rules with interacting platforms such as exchanges, decentralized wallets and DApps. -

SPECIFICATION:
We define below an interface for a rule. Rules are meant to be as simple as possible, to limit gas expenditure, since that logic

MOTIVATION:
ERC20 was designed as a standard interface allowing any token on Ethereum to be handled by other applications: from wallets to decentralized exchanges. This


=== ERC-165 ===
TITLE: Standard Interface Detection
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-01-23
REQUIRES: 214

SUMMARY:
Herein, we standardize the following: 1. How interfaces are identified 2. How a contract will publish the interfaces it implements 3. How to detect

SPECIFICATION:
### How Interfaces are Identified For this standard, an *interface* is a set of [function selectors as defined by the Ethereum ABI](https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector). This a

MOTIVATION:
For some "standard interfaces" like [the ERC-20 token interface](./eip-20.md), it is sometimes useful to query whether a contract supports the interface and if yes,

RATIONALE:
We tried to keep this specification as simple as possible. This implementation is also compatible with the current Solidity version.


=== ERC-5437 ===
TITLE: Security Contact Interface
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-09
REQUIRES: 165

SUMMARY:
An interface for security notice using asymmetric encryption. The interface exposes a asymmetric encryption key and a destination of delivery.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Currently there is no consistent way to specify an official channel for security researchers to report security issues to smart contract maintainers.

RATIONALE:
1. For simplicity, this EIP specifies a simple GPG scheme with a given encryption scheme and uses email addresses as a contact method. It's


=== ERC-7651 ===
TITLE: Fractionally Represented Non-Fungible Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-03-05
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal introduces a standard for fractionally represented non-fungible tokens, allowing NFTs to be managed and owned fractionally within a single contract. This approach

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Fractional ownership of NFTs has historically relied on external protocols that manage division and reconstitution of individual NFTs into fractional representations. The approach of

RATIONALE:
This standard unifies the representation of fractional ownership with the non-fungible token model, aligning closely with [ERC-721](./eip-721.md) principles while enabling the functionality of [ERC-20](./eip-20.md)


=== ERC-1450 ===
TITLE: ERC-1450 A compatible security token for issuing and trading SEC-compliant securities
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-25
REQUIRES: 

SUMMARY:
`ERC-1450` facilitates the recording of ownership and transfer of securities sold in compliance with the [Securities Act Regulations CF, D and A](https://www.sec.gov/smallbusiness/exemptofferings). The issuance

SPECIFICATION:
`ERC-1450` extends `ERC-20`. ### `ERC-1450` `ERC-1450` requires that only the Issuer can create a token representing the security that only the RTA manages. Instantiating

MOTIVATION:
With the advent of the [JOBS Act](https://www.sec.gov/spotlight/jobs-act.shtml) in 2012 and the launch of Regulation Crowdfunding and the amendments to Regulation A and Regulation D

RATIONALE:
The are currently no token standards that facilitate compliance with SEC regulations. The closest token is [ERC-884 (Delaware General Corporations Law (DGCL) compatible share


=== ERC-1207 ===
TITLE: DAuth Access Delegation Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-07-10
REQUIRES: 

SUMMARY:
The DAuth protocol defines a set of standard API allowing identity delegations between smart contracts without the user's private key. Identity delegations include accessing

SPECIFICATION:
![Rationale](../assets/eip-1207/rationale.png) **Resource owner**: the authorizer **Resource contract**: the contract providing data and operators **API**: the resource contract APIs that the grantee contract can invoke

MOTIVATION:
The inspiration for designing DAuth comes from OAuth protocol that is extensively used in web applications. But unlike the centralized authorization of OAuth, DAuth

RATIONALE:
**Current Limitations** The current design of many smart contracts only considers the user invokes the smart contract functions by themselves using the private key.


=== ERC-3009 ===
TITLE: Transfer With Authorization
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-09-28
REQUIRES: 2, 0, ,,  , 7, 1, 2

SUMMARY:
A set of functions to enable meta-transactions and atomic interactions with [ERC-20](./eip-20.md) token contracts via signatures conforming to the [EIP-712](./eip-712.md) typed message signing specification.

SPECIFICATION:
### Event ```solidity event AuthorizationUsed( address indexed authorizer, bytes32 indexed nonce ); // keccak256("TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)") bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH

MOTIVATION:
There is an existing spec, [EIP-2612](./eip-2612), that also allows meta-transactions, and it is encouraged that a contract implements both for maximum compatibility. The two

RATIONALE:
### Unique Random Nonce, Instead of Sequential Nonce One might say transaction ordering is one reason why sequential nonces are preferred. However, sequential nonces


=== ERC-7604 ===
TITLE: ERC-1155 Permit Approvals
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-01-27
REQUIRES: 1, 6, 5, ,,  , 7, 1, 2, ,,  , 1, 1, 5, 5, ,,  , 1, 2, 7, 1, ,,  , 2, 0, 9, 8, ,,  , 5, 2, 1, 6

SUMMARY:
The "permit" approval flow for both [ERC-20](./eip-20.md) and [ERC-721](./eip-721.md) are large improvements for the existing UX of the token underlying each ERC. This ERC

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The permit structures outlined in both [ERC-4494](./eip-4494) and [ERC-2612](./eip-2612) allows a signed message to create an approval, but are only applicable to their respective

RATIONALE:
The `permit` function is sufficient for enabling a `safeTransferFrom` transaction to be made without the need for an additional transaction. The format avoids any


=== ERC-5269 ===
TITLE: ERC Detection and Discovery
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-07-15
REQUIRES: 5750

SUMMARY:
An interface for better identification and detection of ERC by numbers. It designates a field in which it's called `majorERCIdentifier` which is normally known

SPECIFICATION:
In the following description, we use ERC and ERC inter-exchangeably. This was because while most of the time the description applies to an ERC

MOTIVATION:
This ERC is created as a competing standard for [ERC-165](./eip-165.md). Here are the major differences between this ERC and [ERC-165](./eip-165.md). 1. [ERC-165](./eip-165.md) uses the

RATIONALE:
1. When data type `uint256 majorERCIdentifier`, there are other alternative options such as: - (1) using a hashed version of the ERC number, -


=== ERC-7517 ===
TITLE: Content Consent for AI/ML Data Mining
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-12
REQUIRES: 7, 2, 1, ,,  , 7, 0, 5, 3

SUMMARY:
This EIP proposes a standardized approach to declaring mining preferences for digital media content on the EVM-compatible blockchains. This extends digital media metadata standards

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
As digital assets become increasingly utilized in AI and machine learning workflows, it is critical that the rights and preferences of asset creators and

RATIONALE:
The technical decisions behind this EIP have been carefully considered to address specific challenges and requirements in the digital asset landscape. Here are the


=== ERC-55 ===
TITLE: Mixed-case checksum address encoding
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2016-01-14
REQUIRES: 


=== ERC-7895 ===
TITLE: API for Hierarchical Accounts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-02-18
REQUIRES: 

SUMMARY:
This ERC introduces a new wallet RPC, `wallet_addSubAccount`, which allows an app to request a wallet track a smart account that the wallet owns.

SPECIFICATION:
### Definitions The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document

MOTIVATION:
Embedded app accounts (onchain accounts specific to a single app) have led to a proliferation of user addresses, which can be difficult for users

RATIONALE:
### Naming Initial intent was to leverage existing RPCs, like `wallet_connect` (e.g. <!-- TODO: [ERC-7846](./eip-7846.md) --> with additional capabilities to add support for these


=== ERC-7861 ===
TITLE: ERC-721 Verifiable Credential Extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-01-14
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md) that adds verifiable credential properties at the contract level. A verifiable credential is a secure digital certificate

SPECIFICATION:
### Overview Each NFT in this standard is linked to a credential that can be stored in any compatible storage location. To retrieve credentials

MOTIVATION:
Many [ERC-721](./eip-721.md) contracts require additional properties to represent verifiable credentials. While it's possible to implement these properties in various ways, it creates an extra

RATIONALE:
<!-- TODO -->


=== ERC-4804 ===
TITLE: Web3 URL to EVM Call Message Translation
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-02-14
REQUIRES: 137

SUMMARY:
This standard translates an RFC 2396 URI like `web3://uniswap.eth/` to an EVM message such as: ``` EVMMessage { To: 0xaabbccddee.... // where uniswap.eth's address

SPECIFICATION:
This specification only defines read-only (i.e. Solidity's `view` functions) semantics. State modifying functions may be defined as a future extension. A Web3 URL is

MOTIVATION:
Currently, reading data from Web3 generally relies on a translation done by a Web2 proxy to Web3 blockchain. The translation is mostly done by

RATIONALE:
The purpose of the proposal is to add a decentralized presentation layer for Ethereum. With the layer, we are able to render any web


=== ERC-6604 ===
TITLE: Abstract Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-03
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
Abstract tokens provide a standard interface to: * Mint tokens off-chain as messages * Reify tokens on-chain via smart contract * Dereify tokens back

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Abstract tokens enable zero-cost token minting, facilitating high-volume applications by allowing token holders to reify tokens (place the tokens on-chain) as desired. Example use

RATIONALE:
### Meta format The abstract token message `meta` field is simply a byte array to preserve the widest possible accesibility. * Applications handling abstract


=== ERC-5139 ===
TITLE: Remote Procedure Call Provider Lists
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-06-06
REQUIRES: 1, 5, 5, ,,  , 1, 5, 7, 7

SUMMARY:
This proposal specifies a JSON schema for describing lists of remote procedure call (RPC) providers for Ethereum-like chains, including their supported [EIP-155](./eip-155.md) `CHAIN_ID`.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
The recent explosion of alternate chains, scaling solutions, and other mostly Ethereum-compatible ledgers has brought with it many risks for users. It has become

RATIONALE:
This specification has two layers (provider, then chain id) instead of a flatter structure so that wallets can choose to query multiple independent providers


=== ERC-7836 ===
TITLE: Wallet Call Preparation API
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-12-06
REQUIRES: 1, 1, 9, 3, ,,  , 5, 7, 9, 2

SUMMARY:
This proposal defines complementary JSON-RPC methods to [EIP-5792's `wallet_sendCalls`](./eip-5792.md) to enable an Application to sign over a call bundle (instead of the Wallet). Methods

SPECIFICATION:
In this specification, we define two new JSON-RPC methods: `wallet_prepareCalls` and `wallet_sendPreparedCalls`. ### `wallet_prepareCalls` Instructs a Wallet to prepare a call bundle according to

MOTIVATION:
Applications are increasingly seeking to use session keys and scoped permissions to make transactions on a user's behalf, without the user having to approve

RATIONALE:
These endpoints extend the interface established by EIP-5792, given the emergent needs of application developers. Adding new endpoints for this specific use case is


=== ERC-7405 ===
TITLE: Portable Smart Contract Accounts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-26
REQUIRES: 1, 9, 1, ,,  , 1, 9, 6, 7

SUMMARY:
Portable Smart Contract Accounts (PSCA) address the lack of portability and compatibility faced by Smart Contract Accounts (SCA) across different wallet providers. Based on

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
With the introduction of the [ERC-4337](./eip-4337.md) standard, AA related infrastructure and SCAs have been widely adopted in the community. However, unlike EOAs, SCAs have

RATIONALE:
The main challenge addressed by this EIP is the lack of portability in Smart Contract Accounts (SCAs). Currently, due to variations in SCA implementations


=== ERC-6735 ===
TITLE: L2 Aliasing of EVM-based Addresses
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-03-20
REQUIRES: 55

SUMMARY:
The document describes the minimal set of business and technical prerequisites, functional and non-functional requirements for Aliasing of EVM based Addresses that when implemented

SPECIFICATION:
### Typographical Convention: Requirement Ids A requirement is uniquely identified by a unique ID composed of its requirement level followed by a requirement number,

MOTIVATION:
The members of the L2 WG of the EEA Communities Project managed by OASIS have recognized that the ability to deterministically derive addresses of

RATIONALE:
The standard follows an already existing approach for address aliasing from Ethereum (L1) to EVM-based L2s such as Arbitrum and Optimism and between L2s,


=== ERC-5298 ===
TITLE: ENS Trust to hold NFTs under ENS name
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-12
REQUIRES: 1, 3, 7, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP standardizes an interface for smart contracts to hold of [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md) tokens on behalf of ENS domains.

SPECIFICATION:
1. Compliant contracts MUST implement `ERC721TokenReceiver`, as defined in [EIP-721](./eip-721.md). 2. Compliant contracts implement the following interface: ```solidity interface IERC_ENS_TRUST is ERC721Receiver, ERC1155Receiver {

MOTIVATION:
Currently, if someone wants to receive a token, they have to set up a wallet address. This EIP decouples NFT ownership from wallet addresses.

RATIONALE:
1. ENS was chosen because it is a well-established scoped ownership namespace. This is nonetheless compatible with other scoped ownership namespaces. 2. We didn't


=== ERC-7649 ===
TITLE: Bonding curve-embedded liquidity for NFTs
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-28
REQUIRES: 721

SUMMARY:
This proposal introduces a standard for embedding Bonding Curve-like liquidity into Non-Fungible Tokens (NFTs) without modifying the [ERC-721](./eip-721.md) standard. The proposed standard allows the

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The ERC-721 standard lacks a specific mechanism for embedding bonding curve-based liquidity, limiting the creative possibilities for NFT-based projects. This EIP addresses the need

RATIONALE:
The rationale behind the design choices for the embedded liquidity standard is deeply rooted in providing a robust and versatile framework for embedding Bonding


=== ERC-2009 ===
TITLE: Compliance Service
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-05-09
REQUIRES: 1066

SUMMARY:
A regulated token needs to comply with several legal requirements, especially [KYC][KYC-Wikipedia] and [AML][AML-Wikipedia]. If the necessary checks have to be made off-chain the

SPECIFICATION:
```solidity interface CompliantService { function checkTransferAllowed(bytes32 tokenId, address from, address to, uint256 value) external view returns (byte); function checkTransferFromAllowed(bytes32 tokenId, address sender, address from,

MOTIVATION:
Currently there is no proposal on how to accomplish decentralized compliance checks. [ERC-1462][ERC-1462] proposes a basic set of functions to check if `transfer`, `mint`

RATIONALE:
The usage of a token id instead of the address has been chosen to give tokens the possibility to update their smart contracts and


=== ERC-6865 ===
TITLE: On-Chain EIP-712 Visualization
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-10
REQUIRES: 712

SUMMARY:
Numerous protocols employ distinct [EIP-712](./eip-712.md) schemas, leading to unavoidable inconsistencies across the ecosystem. To address this issue, we propose a standardized approach for dApps

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The rapid expansion of the web3.0 ecosystem has unlocked numerous opportunities and innovations. However, this growth has also heightened users' vulnerability to security threats,

RATIONALE:
### on-chain One might argue that certain processes can be done off-chain, which is true, but our experience building an off-chain TypeScript SDK to


=== ERC-6220 ===
TITLE: Composable NFTs utilizing Equippable Parts
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-12-20
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 5, 7, 7, 3, ,,  , 6, 0, 5, 9

SUMMARY:
The Composable NFTs utilizing equippable parts standard extends [ERC-721](./eip-721.md) by allowing the NFTs to selectively add parts to themselves via equipping. Tokens can be

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time

RATIONALE:
Designing the proposal, we considered the following questions: 1. **Why are we using a Catalog in stead of supporting direct NFT equipping?**\ If NFTs


=== ERC-4834 ===
TITLE: Hierarchical Domains
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-02-22
REQUIRES: 

SUMMARY:
This is a standard for generic name resolution with arbitrarily complex access control and resolution. It permits a contract that implements this EIP (referred

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
The advantage of this EIP over existing standards is that it provides a minimal interface that supports name resolution, adds standardized access control, and

RATIONALE:
This EIP's goal, as mentioned in the abstract, is to have a simple interface for resolving names. Here are a few design decisions and


=== ERC-5218 ===
TITLE: NFT Rights Management
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-11
REQUIRES: 721

SUMMARY:
The following standard defines an API for managing NFT licenses. This standard provides basic functionality to create, transfer, and revoke licenses, and to determine

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
The [ERC-721](./eip-721.md) standard defines an API to track and transfer ownership of an NFT. When an NFT is to represent some off-chain asset, however,

RATIONALE:
This EIP aims to allow tracing all licenses to an NFT to facilitate right management. The ERC-721 standard only logs the property but not


=== ERC-5604 ===
TITLE: NFT Lien
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-09-05
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This ERC introduces NFT liens, a form of security interest over an item of property to secure the recovery of liability or performance of

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Liens are widely used for finance use cases, such as car and property liens. An example use case for an NFT lien is for

RATIONALE:
1. We only support `ERC-721` NFTs for simplicity and gas efficiency. We have not considered other ERCs, which can be left for future extensions.


=== ERC-7787 ===
TITLE: Soulbound Degradable Governance
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-15
REQUIRES: 20

SUMMARY:
This proposal introduces the Soulbound Degradable Governance (SDG) standard, where governance power should be granted as non-transferable tokens that decay over time unless renewed

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Traditional DAO governance models rely heavily on economic tokens, where voting power is proportional to token holdings. While effective for some use cases, this

RATIONALE:
The SDG standard ensures flexibility by not being tied to any specific token type, allowing DAOs to implement it with [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), [ERC-1155](./eip-1155.md), or


=== ERC-1613 ===
TITLE: Gas stations network
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-18
REQUIRES: 1077

SUMMARY:
Communicating with dapps currently requires paying ETH for gas, which limits dapp adoption to ether users. Therefore, contract owners may wish to pay for

SPECIFICATION:
The system consists of a `RelayHub` singleton contract, participating contracts inheriting the `RelayRecipient` contract, a decentralized network of `Relay` nodes, a.k.a. Gas Stations, and

MOTIVATION:
* Increase user adoption of smart contracts by: * Removing the user hassle of acquiring ETH. Transactions are still paid by ETH but costs

RATIONALE:
The rationale for the gas stations network design is a combination of two sets of requirements: Easy adoption, and robustness. For easy adoption, the


=== ERC-7399 ===
TITLE: ⚡ Flash Loans ⚡
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-07-25
REQUIRES: 20

SUMMARY:
A flash loan is a loan between lender and borrower smart contracts that must be repaid, plus an optional fee, before the end of

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The current state of the flash loan ecosystem is fragmented and lacks standardization, leading to several challenges for both lenders and borrowers. The absence

RATIONALE:
The interfaces described in this ERC have been chosen as to cover the known flash lending use cases, while allowing for safe and gas


=== ERC-7527 ===
TITLE: Token Bound Function Oracle AMM
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-03
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal outlines interfaces for wrapping [ERC-20](./eip-20.md) or ETH to [ERC-721](./eip-721.md) and unwrap ERC-721 to ERC-20 or ETH. A function oracle feeds mint/burn prices

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Liquidity can be a significant challenge in decentralized systems, especially for unique or less commonly traded tokens like NFTs. To foster a trustless NFT

RATIONALE:
### Prior Interfaces [ERC-5679](./eip-5679.md) proposed `IERC5679Ext721` interface for introducing a consistent way to extend [ERC-721](./eip-721.md) token standards for minting and burning. To ensure the


=== ERC-7774 ===
TITLE: Cache invalidation in ERC-5219 mode Web3 URL
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-09-20
REQUIRES: 5, 2, 1, 9, ,,  , 6, 9, 4, 4

SUMMARY:
In the context of the [ERC-6860](./eip-6860.md) `web3://` standard, this ERC extends the [ERC-6944](./eip-6944.md) resolve mode. It introduces mechanisms to address limitations that prevent the

SPECIFICATION:
This standard introduces the `evm-events` cache directive for the `Cache-Control` header of request responses, as an extension directive as defined in section 5.2.3 of

MOTIVATION:
Calls to Ethereum RPC providers are costly—both CPU-wise for local nodes and monetarily for paid external RPC providers. Furthermore, external RPC providers are rate-limited,

RATIONALE:
To stay as close as possible to standard HTTP, we reuse the HTTP caching mechanism headers. The use of the `evm-events` directive is necessary


=== ERC-1967 ===
TITLE: Proxy Storage Slots
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2019-04-24
REQUIRES: 

SUMMARY:
Delegating **proxy contracts** are widely used for both upgradeability and gas savings. These proxies rely on a **logic contract** (also known as implementation contract

SPECIFICATION:
Monitoring of proxies is essential to the security of many applications. It is thus essential to have the ability to track changes to the

MOTIVATION:
Delegating proxies are widely in use, as a means to both support upgrades and reduce gas costs of deployments. Examples of these proxies are

RATIONALE:
This EIP standardises the **storage slot** for the logic contract address, instead of a public method on the proxy contract. The rationale for this


=== ERC-1921 ===
TITLE: dType Functions Extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-04-06
REQUIRES: 1900

SUMMARY:
This proposal is part of a series of EIPs focused on expanding the concept of a Decentralized Type System, as explained in [EIP-1900](./eip-1900.md). The

SPECIFICATION:
This specification targets `pure` and `view` functions. For each function, we can store: * `name` - type `string` unique function name, as defined in

MOTIVATION:
In order to evolve the EVM into a Singleton Operating System, we need a way to register, find and address contract functions that we

RATIONALE:
The suggestion to treat each `pure` or `view` function as a separate entity instead of having a contract-based approach allows us to: * have


=== ERC-7837 ===
TITLE: Diffusive Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2024-12-07
REQUIRES: 

SUMMARY:
This ERC proposes a standard for a new type of fungible token, called **Diffusive Tokens (DIFF)**. Unlike traditional [ERC-20](./eip-20.md) tokens, transferring DIFF tokens does

SPECIFICATION:
### Terminology - **Diffusive Token**: A fungible token unit that is minted on transfers. - **Max Supply**: The maximum total supply the token can

MOTIVATION:
Traditional [ERC-20](./eip-20.md) tokens maintain a constant total supply and simply redistribute balances on transfers. While this model is widespread, certain use cases benefit from

RATIONALE:
**Design Decisions**: - **Unlimited Minting vs. Max Supply**: Allowing minting on every transfer provides a “diffusive” spread of tokens. The `maxSupply` prevents uncontrolled inflation.


=== ERC-1462 ===
TITLE: Base Security Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-10-01
REQUIRES: 2, 0, ,,  , 1, 0, 6, 6

SUMMARY:
This EIP defines a minimal set of additions to the default token standard such as [ERC-20](./eip-20.md), that allows for compliance with domestic and international

SPECIFICATION:
The ERC-20 token provides the following basic features: ```solidity contract ERC20 { function totalSupply() public view returns (uint256); function balanceOf(address who) public view returns

MOTIVATION:
There are several security token standards that have been proposed recently. Examples include [ERC-1400](https://github.com/ethereum/EIPs/issues/1411), also [ERC-1450](https://eips.ethereum.org/EIPS/eip-1450). We have concerns about each of them, mostly

RATIONALE:
This EIP targets both ERC-20 and ERC-777 based tokens, although the most emphasis is given to ERC-20 due to its widespread adoption. However, this


=== ERC-7847 ===
TITLE: Social Media NFTs
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-12-18
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This proposal defines a standardized format for representing decentralized social media posts as NFTs. The Nostr protocol has done most of the heavy lifting

SPECIFICATION:
### To derive the id To obtain the id, we sha256 the serialized attributes in this order. The serialization is done over the UTF-8

MOTIVATION:
With the continued censorship and manipulation of social media platforms, it becomes increasingly important for truly decentralized and permissionless social media to exist. Unlike

RATIONALE:
These attributes in the metadata are a 1:1 mapping of a Nostr-style event. Nostr is a blockchain compatible social media protocol because it uses


=== ERC-7795 ===
TITLE: Wallet Call Token Capabilities
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-22
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 5, 7, 9, 2

SUMMARY:
This ERC extends [EIP-5792](./eip-5792.md) by defining capabilities that allow dApps to specify common token prerequisites for transactions, such as having certain [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), or

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
It is fairly common for dApps to reside only on one network, but this comes at the cost of shrinking the direct liquidity that

RATIONALE:
This ERC extends [EIP-5792](./eip-5792.md) rather than defining new RPC methods because: 1. **Consistency**: Leverages existing capability discovery mechanism 2. **Composability**: Requirements can be combined


=== ERC-4885 ===
TITLE: Subscription NFTs and Multi Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-03-08
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
The following standard allows for the implementation of a standard API for subscribing to non-fungible and multi tokens. [EIP-20](./eip-20.md) tokens are deposited in exchange

SPECIFICATION:
The subscriber deposits EIP-20 to receive an NFT and subscription. Subscription tokens balance automatically decreases linearly over the lifetime of usage of the NFT,

MOTIVATION:
This standard offers a flexible, general purpose way to subscribe to the use of assets or services offered by [EIP-721](./eip-721.md) or [EIP-1155](./eip-1155.md) contracts. From

RATIONALE:
### Tokenisation of subscriptions The subscription itself has value when it is exchanged for a deposit. This proposal enables subscriptions to be 'tokenised' thus


=== ERC-1154 ===
TITLE: Oracle Interface
TYPE: Standards Track ERC
STATUS: Withdrawn
CREATED: 2018-06-13
REQUIRES: 

SUMMARY:
In order for ethereum smart contracts to interact with off-chain systems, oracles must be used. These oracles report values which are normally off-chain, allowing

SPECIFICATION:
<dl> <dt>Oracle</dt> <dd>An entity which reports data to the blockchain.</dd> <dt>Oracle consumer</dt> <dd>A smart contract which receives data from an oracle.</dd> <dt>ID</dt> <dd>A way

MOTIVATION:
The Ethereum ecosystem currently has many different oracle implementations available, but they do not provide a unified interface. Smart contract systems would be locked

RATIONALE:
The specs are currently very similar to what is implemented by ChainLink (which can use any arbitrarily-named callback) and Oraclize (which uses `__callback`). With


=== ERC-6150 ===
TITLE: Hierarchical NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-12-15
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension to [EIP-721](./eip-721.md). It proposes a multi-layer filesystem-like hierarchical NFTs. This standard provides interfaces to get parent NFT or children

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
This EIP standardizes the interface of filesystem-like hierarchical NFTs and provides a reference implementation. Hierarchy structure is commonly implemented for file systems by operating

RATIONALE:
As mentioned in the abstract, this EIP's goal is to have a simple interface for supporting Hierarchical NFTs. Here are a few design decisions


=== ERC-3440 ===
TITLE: ERC-721 Editions Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-04-20
REQUIRES: 7, 1, 2, ,,  , 7, 2, 1

SUMMARY:
ERC-3440 is an ERC-721 extension specifically designed to make NFTs more robust for works of art. This extends the original ERC-721 spec by providing

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
Currently the link between a NFT and the digital work of art is only enforced in the token metadata stored in the shared `tokenURI`

RATIONALE:
A major role of NFTs is to display uniqueness in digital art. Provenance is a desired feature of works of art, and this standard


=== ERC-7878 ===
TITLE: Bequeathable Contracts
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2025-02-01
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP proposes a standard interface for contracts to allow tokens to be inherited after the owner's death. The interface allows token owners to

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Crypto Tokens in general and NFTs in particular are starting to be used to tokenise real-world assets. In order for them to be adopted

RATIONALE:
The standard follows what currently happens in real life when preparing and executing a Will. 1. An owner writes a Will and in doing


=== ERC-5553 ===
TITLE: Representing IP and its Royalty Structure
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-17
REQUIRES: 2, 0, ,,  , 7, 2, 1

SUMMARY:
This proposal introduces a generic way to represent intellectual property on chain, along with a refined royalty representation mechanism and associated metadata link. This

MOTIVATION:
There is no accepted standard mechanism to license intellectual property or to represent it, except using traditional NFTs. However, regular NFTs only represent a

RATIONALE:
### Returning an array of EIP-20 tokens presents a more robust royalty portions structure/ Current royalty implementations deal only with a single type of


=== ERC-6997 ===
TITLE: ERC-721 with transaction validation step.
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-05-07
REQUIRES: 721

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It defines new validation functionality to avoid wallet draining: every `transfer` or `approve` will be locked waiting

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
The power of the blockchain is at the same time its weakness: giving the user full responsibility for their data. Many cases of NFT

RATIONALE:
### Universality The standard only defines the validation functions, but not how they should be used. It defines the validations as internal and lets


=== ERC-3643 ===
TITLE: T-REX - Token for Regulated EXchanges
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2021-07-09
REQUIRES: 2, 0, ,,  , 1, 7, 3

SUMMARY:
The T-REX token is an institutional grade security token standard. This standard provides a library of interfaces for the management and compliant transfer of

SPECIFICATION:
The proposed standard has the following requirements: - **MUST** be [ERC-20](./eip-20.md) compatible. - **MUST** be used in combination with an onchain Identity system -

MOTIVATION:
The advent of blockchain technology has brought about a new era of efficiency, accessibility, and liquidity in the world of asset transfer. This is

RATIONALE:
### Transfer Restrictions Transfers of securities can fail for a variety of reasons. This is in direct contrast to utility tokens, which generally only


=== ERC-2746 ===
TITLE: Rules Engine Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-06-20
REQUIRES: 

SUMMARY:
This standard proposes an interface that will allow the creation of hierarchal sets of rules (i.e., RuleTrees) that can be invoked to evaluate and

SPECIFICATION:
For the clarification of terminology, an Attribute is a registered data point within the data domain, representing data that exists either in the rules

MOTIVATION:
At the time of this draft, all development for Ethereum requires writing the code that forms smart contracts and then deploying those contracts to

RATIONALE:
### Attributes The data points are abstracted in order to let the implementation provide the mechanism for retrieving/populating the data. Data can be held


=== ERC-7254 ===
TITLE: Token Revenue Sharing
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-29
REQUIRES: 

SUMMARY:
With the aspiration of bringing forth unique functionality and enhancing value for holders of [ERC-20](./eip-20.md) tokens, our project aims to effortlessly reward token holders

SPECIFICATION:
### Methods #### maxTokenReward Returns max token reward. ``` js function maxTokenReward() public view returns (uint256) ``` #### informationOf Returns the account information of

RATIONALE:
TBD


=== ERC-3005 ===
TITLE: Batched meta transactions
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-09-25
REQUIRES: 

SUMMARY:
This EIP defines a new function called `processMetaBatch()` that extends any fungible token standard, and enables batched meta transactions coming from many senders in

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
Meta transactions have proven useful as a solution for Ethereum accounts that don't have any ether, but hold ERC-20 tokens and would like to

RATIONALE:
### All-in-one Alternative implementations (like GSN) use multiple smart contracts to enable meta transactions, although this increases gas usage. This implementation (EIP-3005) intentionally keeps


=== ERC-7512 ===
TITLE: Onchain Representation for Audits
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-05
REQUIRES: 712

SUMMARY:
The proposal aims to create a standard for an onchain representation of audit reports that can be parsed by contracts to extract relevant information

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be

MOTIVATION:
Audits are an integral part of the smart contract security framework. They are commonly used to increase the security of smart contracts and ensure

RATIONALE:
The current ERC deliberately does not define the `findings` of an audit. Such a definition would require alignment on the definition of what severities


=== ERC-1844 ===
TITLE: ENS Interface Discovery
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-03-15
REQUIRES: 1, 3, 7, ,,  , 1, 6, 5

SUMMARY:
This EIP specifies a method for exposing interfaces associated with an ENS name or an address (typically a contract address) and allowing applications to

SPECIFICATION:
A new profile for ENS resolvers is defined, consisting of the following method: ```solidity function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address); ```

MOTIVATION:
EIP 165 supports interface discovery - determining if the contract at a given address supports a requested interface. However, in many cases it's useful

RATIONALE:
A naive approach to this problem would involve adding this method directly to the target contract. However, doing this has several shortcomings: 1. Each


=== ERC-1812 ===
TITLE: Ethereum Verifiable Claims
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-03-03
REQUIRES: 712

SUMMARY:
A new method for Off-Chain Verifiable Claims built on [EIP-712](./eip-712.md). These Claims can be issued by any user with a EIP 712 compatible web3

SPECIFICATION:
### Claims Claims can be generalized like this: > Issuer makes the claim that Subject is something or has some attribute and value. Claims

MOTIVATION:
Reusable Off-Chain Verifiable Claims provide an important piece of integrating smart contracts with real world organizational requirements such as meeting regulatory requirements such as

RATIONALE:
Signed Typed Data provides a strong foundation for Verifiable Claims that can be used in many different kinds of applications built on both Layer


=== ERC-7409 ===
TITLE: Public Non-Fungible Tokens Emote Repository
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-07-26
REQUIRES: 165

SUMMARY:
❗️ **[ERC-7409](./eip-7409.md) supersedes [ERC-6381](./eip-6381.md).** ❗️ The Public Non-Fungible Tokens Emote Repository standard provides an enhanced interactive utility for [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) by allowing NFTs

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time

RATIONALE:
Designing the proposal, we considered the following questions: 1. **Does the proposal support custom emotes or only the Unicode specified ones?**\ The proposal only


=== ERC-6982 ===
TITLE: Efficient Default Lockable Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-05-02
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal introduces a lockable interface for [ERC-721](./eip-721.md) tokens that optimizes gas usage by eliminating unnecessary events. This interface forms the foundation for the

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Existing lockable token proposals often mandate the emission of an event each time a token is minted. This results in unnecessary gas consumption, especially

RATIONALE:
This standard seeks to optimize gas consumption by minimizing the frequency of event emission. The `DefaultLocked` event is designed to establish the lock status


=== ERC-7617 ===
TITLE: Chunk support for ERC-5219 mode in Web3 URL
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-08
REQUIRES: 5, 2, 1, 9, ,,  , 6, 9, 4, 4

SUMMARY:
In the context of the [ERC-6860](./eip-6860.md) `web3://` standard, this ERC extends the [ERC-6944](./eip-6944.md) resolve mode: This standard defines a new optional ``web3-next-chunk`` HTTP header

SPECIFICATION:
In the [ERC-6944](./eip-6944.md) resolve mode, this standard introduces the new optional ``web3-next-chunk`` HTTP header, to be returned in the `headers` `KeyValue` array of the

MOTIVATION:
Ethereum RPC endpoints have a gas limit, which can be reached when serving large content. By adding a chunking feature, we add the possibility

RATIONALE:
The use of a header pointing to the next chunk was chosen because it does not require changes to the [ERC-6944](./eip-6944.md) `request()` interface, and


=== ERC-181 ===
TITLE: ENS support for reverse resolution of Ethereum addresses
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2016-12-01
REQUIRES: 


=== ERC-5187 ===
TITLE: Extend EIP-1155 with rentable usage rights
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-04-17
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This standard is an extension of [EIP-1155](./eip-1155.md). It proposes to introduce separable, rentable, and transferable usage rights (in the form of NFT-IDs), enabling the

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The well-accepted [EIP-721](./eip-721.md) and EIP-1155 standards focused on the ownership of unique assets, quite sensible in the time of NFTs being used primarily as

RATIONALE:
Implementing the proposal to create rentable NFTs has two main benefits. One is that NFTs with multiple usage rights allow NFT property owners to


=== ERC-1185 ===
TITLE: Storage of DNS Records in ENS
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2018-06-26
REQUIRES: 137

SUMMARY:
This EIP defines a resolver profile for ENS that provides features for storage and lookup of DNS records. This allows ENS to be used

SPECIFICATION:
The resolver profile to support DNS on ENS follows the resolver specification as defined in [ERC-137](./eip-137.md). Traditionally, DNS is a zone-based system in that

MOTIVATION:
ENS is a highly desirable store for DNS information. It provides the distributed authority of DNS without conflating ownership and authoritative serving of information.

RATIONALE:
DNS is a federated system of naming, and the higher-level entities control availability of everything beneath them (_e.g._ `.org` controls the availability of `ethereum.org`).


=== ERC-7538 ===
TITLE: Multiplicative Tokens
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-10-18
REQUIRES: 2, 0, ,,  , 1, 0, 4, 6, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP extends [ERC-1046](./eip-1046.md)-compatible token types (notably, [ERC-20](./eip-20.md) and [ERC-1155](./eip-1155.md) by introducing a `multiplier` field to the metadata schema, altering how user-facing balances are

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Many projects necessitate the creation of various types of tokens, both fungible and non-fungible. While certain standards are ideal for this purpose, they lack

RATIONALE:
Employing strings for numerical representation offers enhanced precision when needed. The use of a multiplier instead of decimals facilitates increments other than powers of


=== ERC-777 ===
TITLE: Token Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2017-11-20
REQUIRES: 1820

SUMMARY:
This standard defines a new way to interact with a token contract while remaining backward compatible with [ERC-20]. It defines advanced features to interact

SPECIFICATION:
### ERC777Token (Token Contract) ``` solidity interface ERC777Token { function name() external view returns (string memory); function symbol() external view returns (string memory); function

MOTIVATION:
This standard tries to improve upon the widely used [ERC-20] token standard. The main advantages of this standard are: 1. Uses the same philosophy

RATIONALE:
The principal intent for this standard is to solve some of the shortcomings of [ERC-20] while maintaining backward compatibility with [ERC-20], and avoiding the


=== ERC-7589 ===
TITLE: Semi-Fungible Token Roles
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-28
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This standard introduces role management for SFTs (Semi-Fungible Tokens). Each role assignment is granted to a single user (grantee) and expires automatically. Roles are

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be

MOTIVATION:
[ERC-1155](./eip-1155.md) has significantly contributed to the tokenization capabilities of Ethereum by enabling developers to create fungible and non-fungible tokens with a single contract. While

RATIONALE:
The concept of "token commitments" as an abstraction serves as a powerful tool for users looking to delegate the control of their SFTs. A


=== ERC-2193 ===
TITLE: dType Alias Extension - Decentralized Type System
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-07-16
REQUIRES: 1, 5, 5, ,,  , 1, 9, 0, 0, ,,  , 2, 1, 5, 7

SUMMARY:
The dType Alias is a system for providing human-readable resource identifiers to on-chain content. A resource identifier is based on the type of data

SPECIFICATION:
The dType registry will provide domain and subdomain names for the resource type. Subdomains can be attributed recursively, to dType types which contain other

MOTIVATION:
There are standards that currently address the need for attaching human-readable identifiers to Ethereum accounts, such as [EIP-137](./eip-137.md). These standards are an attempt to

RATIONALE:
Current attempts to solve content addressability, such as [EIP-137](./eip-137.md), only target Ethereum accounts. These are based on inherited concepts from HTTP and DNS, which


=== ERC-7618 ===
TITLE: Content encoding in ERC-5219 mode Web3 URL
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-08
REQUIRES: 5, 2, 1, 9, ,,  , 6, 9, 4, 4

SUMMARY:
In the context of the [ERC-6860](./eip-6860.md) `web3://` standard, this ERC extends the [ERC-6944](./eip-6944.md) resolve mode: This standard specifies that if a `Content-Encoding` header is

SPECIFICATION:
In the [ERC-6944](./eip-6944.md) resolve mode, this standard indicates that if a ``Content-Encoding`` HTTP header (in the returned `headers` `KeyValue` array of the `request()` method)

MOTIVATION:
As storage in blockchains is expensive, it is optimal to try to store and serve compressed assets. Standard HTTP uses the `Accept-Encoding`/`Content-Encoding` mechanism, in

RATIONALE:
We add this feature to the [ERC-6944](./eip-6944.md) resolve mode because it can be added without changes the interface. To stay as close as possible


=== ERC-2680 ===
TITLE: Ethereum 2 wallet layout
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-05-29
REQUIRES: 

SUMMARY:
Ethereum wallets have no standards for their layout in persistent storage, making different wallet implementations incompatible. This defines a standard for the placement of

SPECIFICATION:
There are four elements for a wallet that need to be addressed. These are defined below. ### Base location The base location is required

MOTIVATION:
A standard layout for wallets and accounts allows interoperability between validators. This benefits users, as they can move from one validator software to another

RATIONALE:
A standard for walletstores, similar to that for keystores, provides a higher level of compatibility between wallets and allows for simpler wallet and key


=== ERC-5554 ===
TITLE: NFT Legal Use, Repurposing, and Remixing
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-07
REQUIRES: 5218

SUMMARY:
This EIP extends any other token standard to provide: * Explicit rights for the token holder related to commercial exploitation, derivative works, and reproduction;

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
NFTs still face legal uncertainty, and many now realize that the rights associated with an NFT are just as important as the NFT itself.

RATIONALE:
We expand here upon the Motivation section to justify every decision made with regard to the specs of the standard: The `getLicenseId()` function takes


=== ERC-7887 ===
TITLE: Cancelation for ERC-7540 Tokenized Vaults
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-02-18
REQUIRES: 1, 6, 5, ,,  , 7, 5, 4, 0

SUMMARY:
The following standard extends [ERC-7540](./eip-7540.md) by adding support for asynchronous cancelation flows. New methods are added to asynchronously cancel a deposit or redeem Request,

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Shares or assets locked for Requests can be stuck in the Pending state. For some use cases, such as redeeming from a pool of

RATIONALE:
### Blocking Requests during Cancelation When `cancelDepositRequest` is called by a `controller`, new deposit Requests are blocked for this `controller`, and the equivalent applies


=== ERC-7546 ===
TITLE: Upgradeable Clone for Scalable Contracts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-10-25
REQUIRES: 1, 6, 5, ,,  , 1, 9, 6, 7, ,,  , 7, 2, 0, 1

SUMMARY:
It has been a significant challenge for developers attempting to create cloneable and upgradeable contracts on the Ethereum Virtual Machine (EVM). While [ERC-2535](./eip-2535.md) Diamonds

SPECIFICATION:
> The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are

MOTIVATION:
Smart contract development often encounters hurdles due to the inherent limitations of the Ethereum Virtual Machine (EVM), such as the contract size limit and

RATIONALE:
### Comparison with [ERC-2535](./eip-2535.md) While both this ERC and ERC-2535 offer [Function-Level Upgradeability](#function-level-upgradeability), there is a key distinction in their approaches. ERC-2535 maintains a


=== ERC-7943 ===
TITLE: uRWA - Universal Real World Asset Interface
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2025-06-10
REQUIRES: 165

SUMMARY:
This EIP proposes the Universal RWA (uRWA) standard, an interface for tokenized Real World Assets (RWAs) such as securities, real estate, commodities, or other

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Real World Assets (RWAs) represent a significant opportunity to bridge traditional finance and decentralized finance (DeFi). By tokenizing assets like real estate, corporate bonds,

RATIONALE:
* **Minimalism:** Defines only the essential functions (`forceTransfer`, `setFrozen`, `isUserAllowed`, `isTransferAllowed`, `getFrozen`) and associated events/errors needed for common RWA compliance and control patterns, avoiding


=== ERC-5267 ===
TITLE: Retrieval of EIP-712 domain
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-07-14
REQUIRES: 1, 5, 5, ,,  , 7, 1, 2, ,,  , 2, 6, 1, 2

SUMMARY:
This EIP complements [EIP-712](./eip-712.md) by standardizing how contracts should publish the fields and values that describe their domain. This enables applications to retrieve this

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
EIP-712 is a signature scheme for complex structured messages. In order to avoid replay attacks and mitigate phishing, the scheme includes a "domain separator"

RATIONALE:
A notable application of EIP-712 signatures is found in EIP-2612 (permit), which specifies a `DOMAIN_SEPARATOR` function that returns a `bytes32` value (the actual domain


=== ERC-1538 ===
TITLE: Transparent Contract Standard
TYPE: Standards Track ERC
STATUS: Withdrawn
CREATED: 2018-10-31
REQUIRES: 

SUMMARY:
A transparent contract is a proxy contract design pattern that provides the following: 1. A way to add, replace and remove multiple functions of

SPECIFICATION:
> **Note:** The solidity `delegatecall` opcode enables a contract to execute a function from another contract, but it is executed as if the function

MOTIVATION:
A fundamental benefit of Ethereum contracts is that their code is immutable, thereby acquiring trust by trustlessness. People do not have to trust others

RATIONALE:
### String of Function Signatures Instead of bytes4[] Array of Function Selectors The `updateContract` function takes a `string` list of functions signatures as an


=== ERC-6538 ===
TITLE: Stealth Meta-Address Registry
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-01-24
REQUIRES: 7, 1, 2, ,,  , 1, 2, 7, 1, ,,  , 5, 5, 6, 4

SUMMARY:
This specification defines a standardized way of storing and retrieving an entity's stealth meta-address, by extending [ERC-5564](./eip-5564.md). An entity may register their stealth meta-address

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The standardization of stealth address generation holds the potential to greatly enhance the privacy capabilities of Ethereum by enabling the recipient of a transfer

RATIONALE:
Having a central smart contract for registering stealth meta-addresses has several benefits: 1. It guarantees interoperability with other smart contracts, as they can easily


=== ERC-6864 ===
TITLE: Upgradable Fungible Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-05
REQUIRES: 20

SUMMARY:
This proposal outlines a smart contract interface for upgrading/downgrading existing [ERC-20](./eip-20.md) smart contracts while maintaining user balances. The interface itself is an extension to

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
By design, smart contracts are immutable and token standards like ERC-20 are minimalistic. While these design principles are fundamental in decentalized applications, there are

RATIONALE:
### Extending ERC-20 standard The goal of this proposal is to upgrade without affecting user balances, therefore leveraging existing data structure and methods is


=== ERC-7656 ===
TITLE: Generalized Contract-Linked Services
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-03-15
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 1, 1, 6, 7, ,,  , 4, 3, 3, 7

SUMMARY:
This proposal defines a factory capable of deploying generic services linked to specific contracts, such as [ERC-4337](./eip-4337.md) accounts or [ERC-721](./eip-721.md) tokens (NFTs). These linked

SPECIFICATION:
The keywords "MUST," "MUST NOT," "REQUIRED," "SHALL," "SHALL NOT," "SHOULD," "SHOULD NOT," "RECOMMENDED," "NOT RECOMMENDED," "MAY," and "OPTIONAL" in this document are to be

MOTIVATION:
Existing projects, like token-bound accounts, successfully bind smart accounts to NFTs, allowing registries to deploy accounts owned by specific token IDs. However, these standards

RATIONALE:
The design of [ERC-7656](./eip-7656.md) is guided by several key principles that address limitations in current contract extension methods: ### Why a Unified Factory? Rather


=== ERC-20 ===
TITLE: Token Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2015-11-19
REQUIRES: 

SUMMARY:
The following standard allows for the implementation of a standard API for tokens within smart contracts. This standard provides basic functionality to transfer tokens,

MOTIVATION:
A standard interface allows any tokens on Ethereum to be re-used by other applications: from wallets to decentralized exchanges.


=== ERC-8004 ===
TITLE: Trustless Agents
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-08-13
REQUIRES: 

SUMMARY:
This ERC extends the Agent‑to‑Agent (A2A) Protocol with a trust layer that allows participants to **discover, choose, and interact with agents across organizational boundaries**

SPECIFICATION:
### Participants All participants MUST register with the Identity Registry as a generic agent. Agents can have three roles: * Server Agent (A2A Server):

MOTIVATION:
The existing A2A protocol handles agent authentication, skills advertisement via AgentCards, direct messaging, and complete task-lifecycle orchestration. Its adoption by leading technology firms demonstrates

RATIONALE:
**Off-chain Infrastructure** The protocol deliberately delegates complex operations off-chain to enable: * Sophisticated reputation algorithms and aggregation services * Flexible validation protocols with custom


=== ERC-2309 ===
TITLE: ERC-721 Consecutive Transfer Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2019-10-08
REQUIRES: 721

SUMMARY:
The optional ERC-721 Consecutive Transfer Extension provides a standardized event which could be emitted during the creation/transfer of one, or many non-fungible tokens. This

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
This extension provides even more scalibility of the [ERC-721 specification](./eip-721.md). It is possible to create, transfer, and burn 2^256 non-fungible tokens in one transaction.

RATIONALE:
Standardizing the `ConsecutiveTransfer` event gives decentralized platforms a standard way of determining ownership of large quantities of non-fungible tokens without the need to support


=== ERC-7093 ===
TITLE: Social Recovery Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-05-29
REQUIRES: 1271

SUMMARY:
This ERC proposes a standard interface for social recovery of smart contract accounts. It separates identity and policy verification from the recovery process, allowing

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Vitalik Buterin has long advocated for social recovery as an essential tool for user protection within the crypto space. He posits that the value

RATIONALE:
A primary design rationale for this proposal is to extend a greater diversity of Guardian types and more flexible, customizable recovery policies for a


=== ERC-1123 ===
TITLE: Revised Ethereum Smart Contract Packaging Standard
TYPE: Standards Track ERC
STATUS: Withdrawn
CREATED: 2018-06-01
REQUIRES: 


=== ERC-7524 ===
TITLE: PLUME Signature in Wallets
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-24
REQUIRES: 

SUMMARY:
ZK-SNARKs have enabled ideation for new identity applications based on anonymous proof-of-ownership. One of the primary technologies that would enable the jump from existing

SPECIFICATION:
We propose a new signature standard that offers the following properties, to be implemented for standard ECDSA keys within wallets: 1. It produces signatures

MOTIVATION:
- Existing ZK applications have the advantage that there is no uniqueness constraint on the provers: that is, allowing the same wallet to prove

RATIONALE:
We will define a few specific properties we are looking for in a candidate algorithm, then define a few other intuitive algorithms and explain


=== ERC-5521 ===
TITLE: Referable NFT
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-10
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It proposes two referable indicators, referring and referred, and a time-based indicator `createdTimestamp`. The relationship between each

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Many scenarios require the inheritance, reference, and extension of NFTs. For instance, an artist may develop his NFT work based on a previous NFT,

RATIONALE:
### Is this event informative enough? `UpdateNode`: This event disseminates crucial information, including the rNFT ID, its owner, and lists of contract addresses/IDs with


=== ERC-2333 ===
TITLE: BLS12-381 Key Generation
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-09-30
REQUIRES: 

SUMMARY:
This standard is a method for deriving a tree-hierarchy of BLS12-381 keys based on an entropy seed. Starting with the aforementioned seed, a tree

SPECIFICATION:
### Version Due to the evolving BLS signatures CFRG draft (currently v4), the `KeyGen` function was updated, meaning that `hkdf_mod_r` no longer reflected what

MOTIVATION:
### Deficiencies of the existing mechanism The curve BLS12-381 used for BLS signatures within Ethereum 2.0 (alongside many other projects) mandates a new key

RATIONALE:
### Lamport signatures Lamport signatures are used as the backup mechanism because of their relative simplicity for a post-quantum signature scheme. Lamport signatures are


=== ERC-7484 ===
TITLE: Registry Extension for ERC-7579
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-08-14
REQUIRES: 7579

SUMMARY:
This proposal standardizes the interface and functionality of Module Registries, allowing modular smart accounts to verify the security of modules using a Registry Adapter.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[ERC-4337](./eip-4337.md) standardizes the execution flow of contract accounts and [ERC-7579](./eip-7579.md) standardizes the modular implementation of these accounts, allowing any developer to build modules for

RATIONALE:
### Attestations Attestations are onchain assertions made about a module. These assertions could pertain to the security of a module (similar to a regular


=== ERC-7597 ===
TITLE: Signature Validation Extension for Permit
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-01-15
REQUIRES: 1, 2, 7, 1, ,,  , 2, 6, 1, 2

SUMMARY:
This proposal aims to extend the functionality of the existing [ERC-2612](./eip-2612.md) Permit to support gasless [ERC-20](./eip-20.md) approval operations initiated by smart contract wallets.

SPECIFICATION:
Compliant contracts must implement the `permit` using the following spec ``` function permit(address owner, address spender, uint value, uint deadline, bytes memory signature) external

MOTIVATION:
The current signature validation scheme in [ERC-2612](./eip-2612.md), based on V, R, S parameters, restricts signature validation to EOA wallets. With the growing popularity of

RATIONALE:
By replacing the existing V, R, S signature validation scheme and introducing support for unstructured bytes input, contract developers can use a unified interface


=== ERC-5615 ===
TITLE: ERC-1155 Supply Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-05-25
REQUIRES: 1155

SUMMARY:
This ERC standardizes an existing mechanism to fetch token supply data from [ERC-1155](./eip-1155.md) tokens. It adds a `totalSupply` function, which fetches the number of

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

RATIONALE:
This ERC does not implement [ERC-165](./eip-165.md), as this interface is simple enough that the extra complexity is unnecessary and would cause incompatibilities with pre-existing


=== ERC-5753 ===
TITLE: Lockable Extension for EIP-721
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-10-05
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [EIP-721](./eip-721.md). It introduces lockable NFTs. The locked asset can be used in any way except by selling and/or

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
With NFTs, digital objects become digital goods, which are verifiably ownable, easily tradable, and immutably stored on the blockchain. That's why it's very important

RATIONALE:
This approach proposes a solution that is designed to be as minimal as possible. It only allows to lock the item (stating who will


=== ERC-7510 ===
TITLE: Cross-Contract Hierarchical NFT
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-08-24
REQUIRES: 721

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It proposes a way to maintain hierarchical relationship between tokens from different contracts. This standard provides an

SPECIFICATION:
Solidity interface available at [`IERC7510.sol`](../assets/eip-7510/contracts/IERC7510.sol): ```solidity /// @notice The struct used to reference a token in an NFT contract struct Token { address collection;

MOTIVATION:
Some NFTs want to generate derivative assets as new NFTs. For example, a 2D NFT image would like to publish its 3D model as

RATIONALE:
This standard differs from [ERC-6150](./eip-6150.md) in mainly two aspects: supporting cross-contract token reference, and allowing multiple parents. But we try to keep the naming


=== ERC-7066 ===
TITLE: Lockable Extension for ERC-721
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-05-25
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
An extension of [ERC-721](./eip-721.md), this standard incorporates `locking` features into NFTs, allowing for various uses while preventing sale or transfer. The token's `owner` can

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[ERC-721](./eip-721.md) has sparked an unprecedented surge in demand for NFTs. However, despite this tremendous success, the NFT economy suffers from secondary liquidity where it

RATIONALE:
This proposal set `locker[tokenId]` to `address(0)` when token is `unlocked` because we delete mapping on `locker[tokenId]` freeing up space. Also, this assertion helps our


=== ERC-7743 ===
TITLE: Multi-Owner Non-Fungible Tokens (MO-NFT)
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2024-07-13
REQUIRES: 

SUMMARY:
This ERC proposes a new standard for non-fungible tokens (NFTs) that supports multiple owners. The MO-NFT standard allows a single NFT to have multiple

SPECIFICATION:
### Token Creation and Ownership Model 1. **Minting**: - The function `mintToken()` allows the creation of a new MO-NFT. The caller becomes both the

MOTIVATION:
Traditional NFTs enforce a single-ownership model, which does not align with the inherent duplicability and collaborative potential of digital assets. MO-NFTs allow for shared

RATIONALE:
1. **Multi-Ownership Model**: - Digital assets are inherently duplicable and can be shared without loss of quality. The multi-owner model allows broader distribution and


=== ERC-5646 ===
TITLE: Token State Fingerprint
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-11
REQUIRES: 165

SUMMARY:
This specification defines the minimum interface required to unambiguously identify the state of a mutable token without knowledge of implementation details.

SPECIFICATION:
The key words "MUST", "MUST NOT", "SHOULD", "SHOULD NOT", and "MAY" in this document are to be interpreted as described in RFC 2119. ```solidity

MOTIVATION:
Currently, protocols need to know about tokens' state properties to create the unambiguous identifier. Unfortunately, this leads to an obvious bottleneck in which protocols

RATIONALE:
Protocols can use state fingerprints as a part of a token identifier and support mutable tokens without knowing any state implementation details. ![](../assets/eip-5646/support-per-eip.png) State


=== ERC-2544 ===
TITLE: ENS Wildcard Resolution
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-02-28
REQUIRES: 137

SUMMARY:
The Ethereum Name Service Specification (EIP-137) establishes a two-step name resolution process. First, an ENS client performs the namehash algorithm on the name to

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Many applications such as wallet providers, exchanges, and dapps have expressed a desire to issue ENS names for their users via custom subdomains on

RATIONALE:
The proposed implementation supports wildcard resolution in a manner that minimizes the impact to existing systems. It also reuses existing algorithms and procedures to


=== ERC-4494 ===
TITLE: Permit for ERC-721 NFTs
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-11-25
REQUIRES: 1, 6, 5, ,,  , 7, 1, 2, ,,  , 7, 2, 1

SUMMARY:
The "Permit" approval flow outlined in [ERC-2612](./eip-2612.md) has proven a very valuable advancement in UX by creating gasless approvals for ERC20 tokens. This EIP

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The permit structure outlined in [ERC-2612](./eip-2612.md) allows for a signed message (structured as outlined in [ERC-712](./eip-712.md)) to be used in order to create an

RATIONALE:
The `permit` function is sufficient for enabling a `safeTransferFrom` transaction to be made without the need for an additional transaction. The format avoids any


=== ERC-6170 ===
TITLE: Cross-Chain Messaging Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-12-19
REQUIRES: 

SUMMARY:
This EIP introduces a common interface for cross-chain arbitrary message bridges (AMBs) to send and receive a cross-chain message (state).

SPECIFICATION:
The keywords "MUST," "MUST NOT," "REQUIRED," "SHALL," "SHALL NOT," "SHOULD," "SHOULD NOT," "RECOMMENDED," "MAY," and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
Currently, cross-chain arbitrary message bridges lack standardization, resulting in complex competing implementations: Layerzero, Hyperlane, Axelar, Wormhole, Matic State Tunnel and others. Either chain native

RATIONALE:
The cross-chain arbitrary messaging interface will optimize the interoperability layer between blockchains with a feature-complete yet minimal interface. The light-weighted approach also provides arbitrary


=== ERC-7964 ===
TITLE: Cross-Chain EIP-712 Signing Domains
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-06-05
REQUIRES: 7, 1, 2, ,,  , 7, 8, 0, 3

SUMMARY:
This ERC extends [ERC-7803] to enable readable cross-chain account abstraction by reserving `chainId` 0 for universal signature validity in [EIP-712] domains, following the same

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Current account abstraction solutions require separate signatures for each blockchain network. This creates poor user experience for cross-chain operations such as: - **Cross-chain intents**:

RATIONALE:
[EIP-712] has become the standard for readable and structured data signing. Assuming [ERC-7803] is implemented, it becomes a building block that already streamlines from


=== ERC-7734 ===
TITLE: Decentralized Identity Verification (DID)
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2024-06-26
REQUIRES: 

SUMMARY:
This proposal introduces a standard for decentralized identity verification (DID) on the blockchain. The standard leverages cryptographic hashes to represent identity proofs and events

SPECIFICATION:
The Decentralized Identity Verification (DID) standard introduces a simple, secure, and privacy-preserving mechanism for verifying user identities on the blockchain. The key components of

MOTIVATION:
Centralized identity verification methods are cumbersome, prone to data breaches, and fail to provide users control over their identity data. Existing DID solutions often

RATIONALE:
The design leverages cryptographic hashes to represent identity information, ensuring that sensitive data is not stored directly on the blockchain. The use of `verificationHashes`


=== ERC-7528 ===
TITLE: ETH (Native Asset) Address Convention
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-10-03
REQUIRES: 2, 0, ,,  , 5, 5, ,,  , 4, 6, 2, 6

SUMMARY:
The following standard proposes a convention for using the address `0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee` in all contexts where an address is used to represent ETH in the

SPECIFICATION:
This standard applies for all components of smart contract systems in which an address is used to identify an [ERC-20](./eip-20.md) token, and where native

MOTIVATION:
ETH, being a fungible unit of value, often behaves similarly to [ERC-20](./eip-20.md) tokens. Protocols tend to implement a standard interface for ERC-20 tokens, and

RATIONALE:
### Considered alternative addresses Many existing implementations of the same use case as this standard use addresses such as 0x0, 0x1, and 0xe for


=== ERC-7246 ===
TITLE: Encumber - Splitting Ownership & Guarantees
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-27
REQUIRES: 20

SUMMARY:
This ERC proposes an extension to the [ERC-20](./eip-20.md) token standard by adding Encumber—the ability for an account to grant another account exclusive right to

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
This extension adds flexibility to the [ERC-20](./eip-20.md) token standard and caters to use cases where token locking is required, but it is preferential to

RATIONALE:
The specification was designed to complement and mirror the ERC-20 specification to ease adoption and understanding. The specification is intentionally minimally proscriptive of this


=== ERC-6682 ===
TITLE: NFT Flashloans
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-12
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 3, 1, 5, 6

SUMMARY:
This standard is an extension of the existing flashloan standard ([ERC-3156](./eip-3156.md)) to support [ERC-721](./eip-721.md) NFT flashloans. It proposes a way for flashloan providers to

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The current flashloan standard, [ERC-3156](./eip-3156.md), only supports [ERC-20](./eip-20.md) tokens. ERC-721 tokens are sufficiently different from ERC-20 tokens that they require an extension of this

RATIONALE:
The above modifications are the simplest possible additions to the existing flashloan standard to support NFTs. We choose to extend as much of the


=== ERC-7802 ===
TITLE: Token With Mint/Burn Access Across Chains
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-30
REQUIRES: 1, 6, 5, ,,  , 5, 6, 7, 9

SUMMARY:
This standard introduces a minimal and extensible interface, `IERC7802`, for tokens to enable standardized crosschain communication. The interface consists of two functions, `crosschainMint` and

SPECIFICATION:
This ERC introduces the `IERC7802` interface. ### Interface Identification The interface identifier for `IERC7802` is **`0x33331994`**, calculated according to [ERC-165](./eip-165.md) as the XOR of

MOTIVATION:
All rollups and multiple important sidechains implement canonical bridges that embed their security into some part of the network's core architecture. These bridges do

RATIONALE:
### Design philosophy The core design decisions behind this minimal interface are - Bridge agnosticism. - Extensibility. **Bridge agnosticism** This interface is designed so


=== ERC-7902 ===
TITLE: Wallet Capabilities for Account Abstraction
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-03-01
REQUIRES: 5, 7, 9, 2, ,,  , 7, 7, 0, 2

SUMMARY:
[EIP-5792](./eip-5792) defines a baseline JSON-RPC API for a communication between wallets and dapps, and provides an ability to extend the base protocol with "capabilities".

SPECIFICATION:
All actions in Account Abstraction within the context of EIP-5792 must be done on a single chain and atomically. We define the following list

MOTIVATION:
[ERC-4337](./eip-4337.md) introduced Account Abstraction, enabling Smart Contract Accounts to function as first-class citizens in Ethereum. However, while [ERC-4337](./eip-4337.md) and [ERC-7769](./eip-7769.md) define a low-level RPC

RATIONALE:
<!-- TODO -->


=== ERC-7681 ===
TITLE: Dual Nature Multi Token Protocol
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-08
REQUIRES: 2, 0, ,,  , 1, 1, 5, 5

SUMMARY:
This proposal [ERC-7681](./eip-7681.md) delineates the integration of the fungible [ERC-20](./eip-20.md) token contract with the semi-fungible [ERC-1155](./eip-1155.md) multi-token standard, enabling cohesive operations between both standards

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Inspired by [ERC-7631](./eip-7631.md) Dual Nature Token Pair, which introduced a concept of interlinkable tokens between ERC-20 and [ERC-721](./eip-721.md), a challenge arises due to the

RATIONALE:
### Implementation Flexibility This proposal intentionally does not prescribe specific token synchronization logic to allow for diverse implementation strategies and novel use cases, such


=== ERC-6358 ===
TITLE: Cross-Chain Token States Synchronization
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-01-17
REQUIRES: 

SUMMARY:
This ERC standardizes an interface for contract-layer consensus-agnostic verifiable cross-chain bridging, through which we can define a new global token inherited from [ERC-20](./eip-20.md)/[ERC-721](./eip-721.md) over

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
- The current paradigm of token bridges makes assets fragment. - If ETH was transferred to another chain through the current token bridge, if

RATIONALE:
### Architecture As shown in [Figure.1](#figure1-architecture), smart contracts deployed on multi-chains execute `o-transactions` of ERC-6358 tokens synchronously through the trustless off-chain synchronizers. - The


=== ERC-1363 ===
TITLE: Payable Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-08-30
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
Standard functions a token contract and contracts working with tokens can implement to make a token Payable. `transferAndCall` and `transferFromAndCall` will call an `onTransferReceived`

SPECIFICATION:
Implementing contracts **MUST** implement the [ERC-1363](./eip-1363.md) interface as well as the [ERC-20](./eip-20.md) and [ERC-165](./eip-165.md) interfaces. ```solidity pragma solidity ^0.8.0; interface ERC1363 /* is ERC20,

MOTIVATION:
There is no way to execute code after a [ERC-20](./eip-20.md) transfer or approval (i.e. making a payment), so to make an action it is

RATIONALE:
The choice to use `transferAndCall`, `transferFromAndCall` and `approveAndCall` derives from the [ERC-20](./eip-20.md) naming. They want to highlight that they have the same behaviours of


=== ERC-4883 ===
TITLE: Composable SVG NFT
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-03-08
REQUIRES: 721

SUMMARY:
Compose an SVG (Scalable Vector Graphics) NFT by concatenating the SVG with the SVG of another NFT rendered as a string for a specific

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Onchain SVG NFTs allow for NFTs to be entirely onchain by returning artwork as SVG in a data URI of the `tokenUri` function. Composability

RATIONALE:
SVG elements can be string concatenated to compose an SVG. ### Ordering of concatenation SVG uses a "painters model" of rendering. **Scalable Vector Graphics


=== ERC-7746 ===
TITLE: Composable Security Middleware Hooks
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2024-07-17
REQUIRES: 

SUMMARY:
This EIP proposes a standard interface, `ILayer`, for implementing composable security layers in smart contracts. These layers act as middleware, enabling runtime validation of

SPECIFICATION:
A contract implementing the `ILayer` interface MUST provide two functions: ```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity 0.8.20; interface ILayer { /// @notice Validates a

MOTIVATION:
Current smart contract security practices often rely on monolithic validation logic within the contract itself. This can lead to tightly coupled code, making it

RATIONALE:
**Flexibility**: The `layerConfig` parameter allows for layer-specific customization, enabling a single layer implementation to serve multiple contracts with varying requirements. **non-static calls**: Layers can


=== ERC-6860 ===
TITLE: Web3 URL to EVM Call Message Translation
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-29
REQUIRES: 137

SUMMARY:
This standard translates an [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) URI like `web3://uniswap.eth/` to an EVM message such as: ``` EVMMessage { To: 0xaabbccddee.... // where uniswap.eth's address

SPECIFICATION:
This specification only defines read-only (i.e. Solidity's `view` functions) semantics. State modifying functions may be defined as a future extension. This specification uses the

MOTIVATION:
Currently, reading data from Web3 generally relies on a translation done by a Web2 proxy to Web3 blockchain. The translation is mostly done by

RATIONALE:
The purpose of the proposal is to add a decentralized presentation layer for Ethereum. With the layer, we are able to render any web


=== ERC-2770 ===
TITLE: Meta-Transactions Forwarder Contract
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-07-01
REQUIRES: 7, 1, 2, ,,  , 2, 7, 7, 1

SUMMARY:
This proposal defines an external API of an extensible Forwarder whose responsibility is to validate transaction signatures on-chain and expose the signer to the

SPECIFICATION:
The Forwarder contract operates by accepting a signed typed data together with it's ERC-712 signature, performing signature verification of incoming data, appending the signer

MOTIVATION:
There is a growing interest in making it possible for Ethereum contracts to accept calls from externally owned accounts that do not have ETH

RATIONALE:
Further relying on `msg.sender` to authenticate end users by their externally-owned accounts is taking the Ethereum dapp ecosystem to a dead end. A need


=== ERC-6384 ===
TITLE: Human-readable offline signatures
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2023-01-08
REQUIRES: 712

SUMMARY:
This EIP introduces the `evalEIP712Buffer` function, which takes an [EIP-712](./eip-712.md) buffer and returns a human-readable text description.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The use case of Web3 off-chain signatures intended to be used within on-chain transaction is gaining traction and being used in multiple leading protocols

RATIONALE:
- We chose to implement the `typeDataBuffer` parameter as abi encoded as it is a generic way to pass the data to the contract.


=== ERC-7529 ===
TITLE: Contract Discovery and eTLD+1 Association
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-30
REQUIRES: 1191

SUMMARY:
The introduction of DNS over HTTPS (DoH) in [RFC 8484](https://www.rfc-editor.org/rfc/rfc8484) has enabled tamper-resistant client-side queries of DNS records directly from a web application. This

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
As mainstream businesses begin to adopt public blockchain and digital asset technologies more rapidly, there is a growing need for a discovery/search mechanism (compatible

RATIONALE:
In this specification, the TXT record `HOST` naming scheme is designed to mimic the DKIM naming convention. Additionally, this naming scheme makes it simple


=== ERC-7806 ===
TITLE: Minimal intent-centric EOA smart account
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-11-02
REQUIRES: 7702

SUMMARY:
This proposal defines a standard interface for intent-centric smart accounts. It enables externally owned accounts (EOAs) to delegate contract code to a smart account

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Account Abstraction (AA) is a highly discussed topic in the blockchain industry, as it enhances the programmability of accounts, enabling features such as: *

RATIONALE:
### Usage of Bytes Defining `UserIntent` object as a struct would improve readability and make it easier to work with in Solidity. For example:


=== ERC-7588 ===
TITLE: Blob Transactions Metadata JSON Schema
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2024-01-01
REQUIRES: 4844

SUMMARY:
This EIP introduces a standard for attaching metadata to blobs carried by blob transactions, as outlined in [EIP-4844](./eip-4844.md). The metadata is represented as a

SPECIFICATION:
### Metadata JSON Schema The metadata is represented as a JSON object adhering to the following JSON Schema: ```json { "title": "Blobs Metadata", "type":

MOTIVATION:
[EIP-4844](./eip-4844.md) defines a new type of transaction known as a “blob transaction.” These transactions contain a list of blobs along with their KZG commitments

RATIONALE:
In the Ethereum ecosystem, various types of transactions exist, each serving different purposes. The usage of the data field within these transactions varies: -


=== ERC-7765 ===
TITLE: Privileged Non-Fungible Tokens Tied To RWA
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-08-20
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This EIP defines an interface to carry a real world asset with some privileges that can be exercised by the holder of the corresponding

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
NFTs bound to real-world assets sometimes need to carry certain privileges that can be exercised by the holder. Users can initiate transactions onchain to

RATIONALE:
1. With the `PrivilegeExercised` event emitted onchain, we can determine that the user has confirmed the exercise of this privilege, so as to implement


=== ERC-7818 ===
TITLE: Expirable ERC-20
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2024-11-13
REQUIRES: 20

SUMMARY:
Introduces an extension for [ERC-20](./eip-20.md) tokens, which facilitates the implementation of an expiration mechanism. Through this extension, tokens have a predetermined validity period, after

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to

MOTIVATION:
This extension facilitates the development of [ERC-20](./eip-20.md) standard compatible tokens featuring expiration dates. This capability broadens the scope of potential applications, particularly those involving

RATIONALE:
Although the term `epoch` is an abstract concept, it leaves room for various implementations. For example, epochs can support more granular tracking of tokens


=== ERC-6268 ===
TITLE: Untransferability Indicator for EIP-1155
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-01-06
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP standardizes an interface indicating [EIP-1155](./eip-1155.md)-compatible token non-transferability using [EIP-165](./eip-165.md) feature detection.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Soulbound Tokens (SBT) are non-transferable tokens. While [EIP-5192](./eip-5192.md) standardizes non-fungible SBTs, a standard for Soulbound semi-fungible or fungible tokens does not yet exist. The

RATIONALE:
Needs discussion.


=== ERC-5169 ===
TITLE: Client Script URI for Token Contracts
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-05-03
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 7, 7, 7, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP provides a contract interface adding a `scriptURI()` function for locating executable scripts associated with the token.

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY” and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
Often, smart contract authors want to provide some user functionality to their tokens through client scripts. The idea is made popular with function-rich NFTs.

RATIONALE:
This method avoids the need for building secure and certified centralized hosting and allows scripts to be hosted anywhere: IPFS, GitHub or cloud storage.


=== ERC-6956 ===
TITLE: Asset-bound Non-Fungible Tokens
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-04-29
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard allows integrating physical and digital ASSETS without signing capabilities into dApps/web3 by extending [ERC-721](eip-721.md). An ASSET, for example a physical object, is

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The well-known [ERC-721](eip-721.md) establishes that NFTs may represent "ownership over physical properties [...] as well as digital collectables and even more abstract things such

RATIONALE:
**Why do you use an anchor<>tokenId mapping and not simply use tokenIds directly?** Especially for collectable use-cases, special or sequential tokenIds (for example low


=== ERC-7641 ===
TITLE: Intrinsic RevShare Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-28
REQUIRES: 20

SUMMARY:
This proposal outlines an extension of the prevailing [ERC-20](./eip-20.md) token standard, introducing a seamlessly integrated revenue-sharing mechanism. It incorporates a suite of interfaces designed

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
### Revenue Sharing for Token Holders This proposal standardized an Intrinsic RevShare (revenue-sharing) model, allowing users to claim rewards periodically to ensure the efficiency

RATIONALE:
### Revenue Sharing Mechanism We implement a revenue sharing mechanism wherein any token holder can claim a proportional share from the revenue pool. To


=== ERC-6786 ===
TITLE: Registry for royalties payment for NFTs
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-27
REQUIRES: 1, 6, 5, ,,  , 2, 9, 8, 1

SUMMARY:
This standard allows anyone to pay royalties for a certain NFT and also to keep track of the royalties amount paid. It will cumulate

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
There are many marketplaces which do not enforce any royalty payment to the NFT creator every time the NFT is sold or re-sold and/or

RATIONALE:
The payment can be made in native coins, so it is easy to aggregate the amount of paid royalties. We want this information to


=== ERC-2494 ===
TITLE: Baby Jubjub Elliptic Curve
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-01-29
REQUIRES: 

SUMMARY:
Two of the main issues behind why blockchain technology is not broadly used by individuals and industry are scalability and privacy guarantees. With a

SPECIFICATION:
### Definitions Let `F_r` be the prime finite field with `r` elements, where ``` r = 21888242871839275222246405745257275088548364400416034343698204186575808495617 ``` Let `E` be the twisted Edwards

MOTIVATION:
A [zero knowledge proof](https://en.wikipedia.org/wiki/Zero-knowledge_proof) (ZKP) is a protocol that enables one party, the prover, to convince another, the verifier, that a statement is true

RATIONALE:
The search for Baby Jubjub was motivated by the need for an elliptic curve that allows the implementation of elliptic-curve cryptography in `F_r`-arithmetic circuits.


=== ERC-7884 ===
TITLE: Operation Router
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-01-23
REQUIRES: 

SUMMARY:
This EIP introduces a protocol that enables smart contracts to redirect write operations to external systems. The protocol defines a standardized way for contracts

SPECIFICATION:
### Core Components The protocol consists of three main components: 1. A view function named interface `getOperationHandler` for determining operation handlers that can be

MOTIVATION:
As the Ethereum ecosystem grows, there is an increasing need for efficient ways to manage data storage across different layers and systems. This protocol

RATIONALE:
The standard aims to enable offchain writing operations, designed to be a complement for the CCIP-Read ([ERC-3668](./eip-3668)) which is already widely adopted by the


=== ERC-7432 ===
TITLE: Non-Fungible Token Roles
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-07-14
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard introduces role management for NFTs. Each role assignment is associated with a single NFT and expires automatically at a given timestamp. Roles

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be

MOTIVATION:
The NFT Roles interface aims to establish a standard for role management in NFTs. Tracking on-chain roles enables decentralized applications (dApps) to implement access

RATIONALE:
[ERC-7432](./eip-7432.md) IS NOT an extension of [ERC-721](./eip-721.md). The main reason behind this decision is to enable it to be implemented externally or on the


=== ERC-2612 ===
TITLE: Permit Extension for EIP-20 Signed Approvals
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-04-13
REQUIRES: 2, 0, ,,  , 7, 1, 2

SUMMARY:
Arguably one of the main reasons for the success of [EIP-20](./eip-20.md) tokens lies in the interplay between `approve` and `transferFrom`, which allows for tokens

SPECIFICATION:
Compliant contracts must implement 3 new functions in addition to EIP-20: ```sol function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32

MOTIVATION:
While EIP-20 tokens have become ubiquitous in the Ethereum ecosystem, their status remains that of second class tokens from the perspective of the protocol.

RATIONALE:
The `permit` function is sufficient for enabling any operation involving EIP-20 tokens to be paid for using the token itself, rather than using ETH.


=== ERC-5173 ===
TITLE: NFT Future Rewards (nFR)
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-05-08
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal introduces the Non-Fungible Future Rewards (nFR) framework, extending [ERC-721](./eip-721.md) tokens (NFTs) features to let token holders benefit from value appreciation after transferring

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Traditional financial markets are often characterized by inefficiencies, opaque practices, and systemic imbalances, resulting in significant disadvantages for the majority of participants. Although blockchain

RATIONALE:
### Fixed Percentage to 10^18 Considering Fixed-Point Arithmetic is to be enforced, it is logical to have 1e18 represent 100% and 1e16 represent 1%


=== ERC-5805 ===
TITLE: Voting with delegation
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-04
REQUIRES: 7, 1, 2, ,,  , 6, 3, 7, 2

SUMMARY:
Many DAOs (decentralized autonomous organizations) rely on tokens to represent one's voting power. In order to perform this task effectively, the token contracts need

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Beyond simple monetary transactions, decentralized autonomous organizations are arguably one of the most important use cases of blockchain and smart contract technologies. Today, many

RATIONALE:
Delegation allows token holders to trust a delegate with their vote while keeping full custody of their token. This means that only a small-ish


=== ERC-6506 ===
TITLE: P2P Escrowed Governance Incentives
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2023-02-15
REQUIRES: 

SUMMARY:
The following EIP defines the interface for a contract that facilitates the exchange of a governance-incentive for users to vote in a designated direction

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
While a ton of effort has gone into building bribe systems for DAOs like Curve, Frax, Convex, etc., not a lot of focus has

RATIONALE:
This design was motivated by a few factors: 1. The issue of offering incentives for votes is an inevitability. There is no mechanism that


=== ERC-6492 ===
TITLE: Signature Validation for Predeploy Contracts
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-02-10
REQUIRES: 1271

SUMMARY:
Contracts can sign verifiable messages via [ERC-1271](./eip-1271.md). However, if the contract is not deployed yet, [ERC-1271](./eip-1271.md) verification is impossible, as you can't call the

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
With the rising popularity of account abstraction, we often find that the best user experience for contract wallets is to defer contract deployment until

RATIONALE:
We believe that wrapping the signature in a way that allows to pass the deploy data is the only clean way to implement this,


=== ERC-5313 ===
TITLE: Light Contract Ownership
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-07-22
REQUIRES: 1, 6, 5, ,,  , 1, 7, 3

SUMMARY:
This specification defines the minimum interface required to identify an account that controls a contract.

SPECIFICATION:
The key word “MUST” in this document is to be interpreted as described in RFC 2119. Every contract compliant with this EIP MUST implement

MOTIVATION:
This is a slimmed-down alternative to [EIP-173](./eip-173.md).

RATIONALE:
Key factors influencing the standard: - Minimize the number of functions in the interface - Backwards compatibility with existing contracts This standard can be


=== ERC-5568 ===
TITLE: Well-Known Format for Required Actions
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-08-31
REQUIRES: 140

SUMMARY:
This ERC introduces a minimalistic machine-readable (binary) format to signal to wallets that an action needs to be taken by the user using a

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Oftentimes, a smart contract needs to signal to a wallet that an action needs to be taken, such as to sign a transaction or

RATIONALE:
This ERC was explicitly optimized for deployment gas cost and simplicity. It is expected that libraries will eventually be developed that makes this more


=== ERC-1761 ===
TITLE: Scoped Approval Interface
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-02-18
REQUIRES: 165

SUMMARY:
This interface is designed for use with token contracts that have an "ID" domain, such as ERC-1155 or ERC-721. This enables restricted approval of

MOTIVATION:
It may be desired to restrict approval in some applications. Restricted approval can prevent losses in cases where users do not audit the contracts

RATIONALE:
The initial design was proposed as an extension to ERC-1155: [Discussion Thread - Comment 1](https://github.com/ethereum/EIPs/issues/1155#issuecomment-459505728). After some discussion: [Comment 2](https://github.com/ethereum/EIPs/issues/1155#issuecomment-460603439) and suggestions by the


=== ERC-1484 ===
TITLE: Digital Identity Aggregator
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-10-12
REQUIRES: 191

SUMMARY:
This EIP proposes an identity management and aggregation framework on the Ethereum blockchain. It allows entities to claim an `Identity` via a singular `Identity

SPECIFICATION:
A digital identity in this proposal can be viewed as an omnibus account, containing more information about an identity than any individual identity application

MOTIVATION:
Emerging identity standards and related frameworks proposed by the Ethereum community (including ERCs/EIPs [725](./eip-725.md), [735](https://github.com/ethereum/EIPs/issues/735), [780](https://github.com/ethereum/EIPs/issues/780), [1056](./eip-1056.md), etc.) define and instrumentalize digital identity in

RATIONALE:
We find that at a protocol layer, identities should not rely on specific claim or attestation structures, but should instead be a part of


=== ERC-5630 ===
TITLE: New approach for encryption / decryption
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-09-07
REQUIRES: 

SUMMARY:
This EIP proposes a new way to encrypt and decrypt using Ethereum keys. This EIP uses _only_ the `secp256k1` curve, and proposes two new

SPECIFICATION:
We describe our approach here; we compare our approach to prior EIPs in the **Rationale** section below. Throughout, we make reference to SEC 1:

MOTIVATION:
We discuss a few motivating examples. One key motivation is direct-to-address encryption on Ethereum. Using our EIP, one can directly send encrypted messages to

RATIONALE:
There is _no security proof_ for a scheme which simultaneously invokes signing on the `secp256k1` curve and encryption on the `ec25519` curve, and where


=== ERC-5606 ===
TITLE: Multiverse NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-06
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This specification defines a minimal interface to create a multiverse NFT standard for digital assets such as wearables and in-game items that, in turn,

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Several metaverses and blockchain games ("platforms") exist that use NFT standards such as ERC-721 and ERC-1155 for creating in-universe assets like avatar wearables, in-game

RATIONALE:
The `delegateData` struct contains information about the delegate NFT tokens on each platform. It contains variables such as `contractAddress`, `tokenId`, `quantity` to differentiate the


=== ERC-1820 ===
TITLE: Pseudo-introspection Registry Contract
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2019-03-04
REQUIRES: 1, 6, 5, ,,  , 2, 1, 4

SUMMARY:
This standard defines a registry where smart contracts and regular accounts can publish which functionality they implement---either directly or through a proxy contract. Anyone

SPECIFICATION:
### [ERC-1820] Registry Smart Contract > This is an exact copy of the code of the [ERC1820 registry smart contract]. ``` solidity /* ERC1820

MOTIVATION:
There have been different approaches to define pseudo-introspection in Ethereum. The first is [ERC-165] which has the limitation that it cannot be used by

RATIONALE:
This standards offers a way for any type of address (externally owned and contracts) to implement an interface and potentially delegate the implementation of


=== ERC-902 ===
TITLE: Token Validation
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-02-14
REQUIRES: 1066


=== ERC-2400 ===
TITLE: Transaction Receipt URI
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-11-05
REQUIRES: 1, 5, 5, ,,  , 6, 8, 1

SUMMARY:
A transaction hash is not very meaningful on its own, because it looks just like any other hash, and it might lack important information

SPECIFICATION:
### Syntax Transaction receipt URLs contain "ethereum" in their schema (protocol) part and are constructed as follows: receipt = schema_part transaction_hash [ "@" chain_id

MOTIVATION:
Interoperability between ethereum clients, allowing different systems to agree on a standard way of representing submitted transactions hashes, optionally with necessary information for decoding

RATIONALE:
The goal of this standard envolves only the transport of submitted transactions, and therefore transaction data must be loaded from blockchain or pending transaction


=== ERC-7580 ===
TITLE: Advertisement Tracking Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-13
REQUIRES: 

SUMMARY:
This ERC proposes a standard interface for advertisement clients to track user actions in contracts and check corresponding rewards from advertisement protocols. Contracts implementing

SPECIFICATION:
The keywords “MUST,” “MUST NOT,” “REQUIRED,” “SHALL,” “SHALL NOT,” “SHOULD,” “SHOULD NOT,” “RECOMMENDED,” “MAY,” and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
Dapps would propsper due to mass adoption and there emerges surging demands for advertisement on chain. Compared with advertisements in web2, web3 has tremendous

RATIONALE:
The core mechanism for this proposal is to provide a shared tracking interface for inter-dapp operations, to improve the efficiency and fulfill the required


=== ERC-2157 ===
TITLE: dType Storage Extension - Decentralized Type System for EVM
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-06-28
REQUIRES: 1900

SUMMARY:
The storage extension will enable easy navigation and retrieval of type data that is intended to be of public use. This is possible through

SPECIFICATION:
### TypeRootContract ERC-1900 defines a `contractAddress` field in the type metadata. For the limited purpose of ERC-1900, this field contains the value of the

MOTIVATION:
Currently, Ethereum does not have standardization of data addressability. This might not be needed for data that is meant to be quasi-private, however, it

RATIONALE:
We are now thinking about a building block as a smart contract with an encapsulated object that contains state changing functions that are only


=== ERC-4886 ===
TITLE: Proxy Ownership Register
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-09-03
REQUIRES: 

SUMMARY:
A proxy protocol that allows users to nominate a proxy address to act on behalf of another wallet address, together with a delivery address

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
To make full use of Ethereum users often need to prove their ownership of existing assets. For example: * Discord communities require users to

RATIONALE:
The rationale for this EIP was to provide a way for all existing and future Ethereum assets to be have a 'beneficial owner' (the


=== ERC-7985 ===
TITLE: Gateway Attributes for Message Control
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-07-04
REQUIRES: 7786

SUMMARY:
This ERC defines standard attributes for [ERC-7786] cross-chain messaging gateways to enable consistent cancellation, timeout, retry, dependency, and delivery control mechanisms across implementations. These

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[ERC-7786] introduces an extensible attribute system for cross-chain messaging, but leaves attribute standardization to follow-up specifications. As cross-chain applications mature, consistent patterns for message

RATIONALE:
These attributes address the most common cross-chain message control requirements: - **Lifecycle control** via cancellation and timeout mechanisms - **Delivery timing** through delivery time


=== ERC-1577 ===
TITLE: contenthash field for ENS
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-13
REQUIRES: 

SUMMARY:
This EIP introduces the new `contenthash` field for ENS resolvers, allowing for a better defined system of mapping names to network and content addresses.

SPECIFICATION:
The field `contenthash` is introduced, which permits a wide range of protocols to be supported by ENS names. Resolvers supporting this field MUST return

MOTIVATION:
Multiple applications including [Metamask](https://metamask.io/) and mobile clients such as [Status](https://status.im) have begun resolving ENS names to content hosted on distributed systems such as [IPFS](https://ipfs.io/)


=== ERC-1710 ===
TITLE: URL Format for Web3 Browsers
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-01-13
REQUIRES: 155

SUMMARY:
Since most normal web browsers (specifically on mobile devices) can not run decentralized applications correctly because of the lack of web3 support, it is

SPECIFICATION:
### Syntax Web3 browser URLs contain "dapp" in their schema (protocol) part and are constructed as follows: request = "dapp" ":" [chain_id "@"] dapp_url

MOTIVATION:
Lots of dApps that are trying to improve their mobile experience are currently (deep)linking to specific mobile web3 browsers which are currently using their

RATIONALE:
The proposed format attempts to solve the problem of vendor specific protocols for web3 browsers, avoiding conflicts with the existing 'ethereum:' URL scheme while


=== ERC-5131 ===
TITLE: SAFE Authentication For ENS
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-06-03
REQUIRES: 1, 3, 7, ,,  , 1, 8, 1, ,,  , 6, 3, 4

SUMMARY:
This EIP links one or more signing wallets via Ethereum Name Service Specification ([EIP-137](./eip-137.md)) to prove control and asset ownership of a main wallet.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Proving ownership of an asset to a third party application in the Ethereum ecosystem is common. Users frequently sign payloads of data to authenticate

RATIONALE:
### Usage of EIP-137 The proposed specification makes use of EIP-137 rather than introduce another registry paradigm. The reason for this is due to


=== ERC-7280 ===
TITLE: NFT Metadata Extension like JSON-LD
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-04
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 3, 5, 2, 5

SUMMARY:
This proposal expands the metadata format for Non-Fungible Tokens ([ERC-721](./eip-721.md), [ERC-1155](./eip-1155.md), [ERC-3525](./eip-3525.md), and others), adding support for linked data like JSON-LD format. The additional

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The existing metadata format for Non-Fungible Tokens is limited and doesn't support the inclusion of structured and semantically meaningful data. By integrating JSON-LD (Linked

RATIONALE:
For providing typical webpage for an NFT, it's much simple to include JSON-LD in HTML header tag with this extension. Just looking for JSON-LD


=== ERC-7585 ===
TITLE: MixHash and Public Data Storage Proofs
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-27
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This proposal introduces a design for "minimum value selection" storage proofs on Merkle trees. The design consists of two main components: 1. A hashing

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) standards are widely used in the NFT fields. However, the current standards do not provide a mechanism for verifying the

RATIONALE:
Storage proofs (often referred to as space-time proofs) have long been a subject of interest, with numerous implementations and related projects existing. 1. Compared


=== ERC-2021 ===
TITLE: Payoutable Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-05-10
REQUIRES: 2, 0, ,,  , 1, 0, 6, 6, ,,  , 1, 9, 9, 6

SUMMARY:
Token wallet owners (or approved addresses) can order payout requests through blockchain. This is done by calling the ```orderPayoutFrom``` or ```orderPayoutFrom``` methods, which initiate

SPECIFICATION:
```solidity interface IPayoutable /* is ERC-20 */ { enum PayoutStatusCode { Nonexistent, Ordered, InProcess, FundsInSuspense, Executed, Rejected, Cancelled } function authorizePayoutOperator(address orderer) external returns

MOTIVATION:
Nowadays most of the token payout requests, need a previous centralized transaction, to be able to define the payout destination to be able to

RATIONALE:
This standards provides a functionality to allow token holders to start payout requests in a decentralized way. It's important to highlight that the token


=== ERC-5635 ===
TITLE: NFT Licensing Agreements
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-10
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 2, 9, 8, 1

SUMMARY:
This EIP standardizes an NFT licensing oracle to store (register) and retrieve (discover) granted licensing agreements for non-fungible token (NFT) derivative works, which are

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

RATIONALE:
Licensing credentials from a dNFT's contract can be retrieved with `authorizedBy`, which specifies the details of a licensing agreement, which may include the oNFT.


=== ERC-1438 ===
TITLE: dApp Components (avatar) & Universal Wallet
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-21
REQUIRES: 

SUMMARY:
There have been suggestions for modified tokens based on erc20, but since many tokens have already been built on erc20, it is necessary to

SPECIFICATION:
### 1. Avatar #### 1.1. Avatar Shop - The avatar store is created after ERC20 currency is set. - You can customize asset category

MOTIVATION:
While many projects are under development in an open source way, they are simply adding and deploy with open sources to their projects. This


=== ERC-5827 ===
TITLE: Auto-renewable allowance extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-10-22
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
This extension adds a renewable allowance mechanism to [ERC-20](./eip-20.md) allowances, in which a `recoveryRate` defines the amount of token per second that the allowance

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
Currently, ERC-20 tokens support allowances, with which token owners can allow a spender to spend a certain amount of tokens on their behalf. However,

RATIONALE:
Renewable allowances can be implemented with discrete resets per time cycle. However, a continuous `recoveryRate` allows for more flexible use cases not bound by


=== ERC-5007 ===
TITLE: Time NFT, ERC-721 Time Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-04-13
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It proposes some additional functions (`startTime`, `endTime`) to help with on-chain time management.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
Some NFTs have a defined usage period and cannot be used outside of that period. With traditional NFTs that do not include time information,

RATIONALE:
### Time Data Type The max value of `uint64` is 18,446,744,073,709,551,615. As a timestamp, 18,446,744,073,709,551,615 is about year 584,942,419,325. `uint256` is too big for


=== ERC-6239 ===
TITLE: Semantic Soulbound Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-12-30
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 5, 1, 9, 2

SUMMARY:
This proposal extends [ERC-721](./eip-721.md) and [ERC-5192](./eip-5192.md) by introducing Resource Description Framework (RDF) triples to Soulbound Tokens' (‘SBTs‘) metadata.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
A Soulbound Token represents the commitments, credentials, and affiliations of accounts. RDF is a standard data model developed by the World Wide Web Consortium

RATIONALE:
RDF is a flexible and extensible data model based on creating subject-predicate-object relationships, often used to model graph data due to its semantic web


=== ERC-5484 ===
TITLE: Consensual Soulbound Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-17
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This EIP defines an interface extending [EIP-721](./eip-721.md) to create soulbound tokens. Before issuance, both parties (the issuer and the receiver), have to agree on

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The idea of soulbound tokens has gathered significant attention since its publishing. Without a standard interface, however, soulbound tokens are incompatible. It is hard

RATIONALE:
### Soulbound Token (SBTs) as an extension to EIP-721 We believe that soulbound token serves as a specialized subset of the existing EIP-721 tokens.


=== ERC-7796 ===
TITLE: Conditional send transaction RPC
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-16
REQUIRES: 

SUMMARY:
This EIP proposes a new JSON-RPC API method `eth_sendRawTransactionConditional` for block builders and sequencers, enhancing transaction integration by allowing users to express preconditions for

SPECIFICATION:
* Method: `eth_sendRawTransactionConditional` * Parameters: 1. `transaction`: The raw, signed transaction data. Similar to `eth_sendRawTransaction`. 2. `options`: An object containing conditions under which the

MOTIVATION:
Current private block builder APIs, such as the Flashbots API, require block builders to simulate transactions to determine eligibility for inclusion, a process that

RATIONALE:
The `knownAccounts` only allows specifying the exact values for storage slots. While in some cases specifying `minValue` or `maxValue` for a slot could be


=== ERC-7652 ===
TITLE: ERC-721 Guarantee Extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-03-10
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This specification defines functions outlining a guarantor role for instance of [EIP-721](./eip-721.md). The guarantee interface implements the user-set valuation and guarantee share for a

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
NFT (token ID) commonly face the issue of insufficient market liquidity: the main reason being the lack of transparency in NFT pricing, making it

RATIONALE:
Key factors influencing the standard: - Pay attention to ensuring fairness between and within groups when allocating commissions - Keeping the number of guarantee


=== ERC-7621 ===
TITLE: Basket Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-11
REQUIRES: 2, 0, ,,  , 7, 2, 1

SUMMARY:
The Basket Token Standard (BTS) allows for the implementation of multi-asset tokenized funds. This standard provides basic functionality for anyone to deploy unique, non-fungible

SPECIFICATION:
### BTS BTS is a smart contract enabling the creation of on-chain tokenized funds backed by assets, allowing users to manage assets and liquidity

MOTIVATION:
The motivation is to provide infrastructure that will enable the on-chain creation and management of asset-backed tokenized investment funds as no such standardized infrastructure

RATIONALE:
<!-- TODO -->


=== ERC-7208 ===
TITLE: On-Chain Data Containers
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-06-09
REQUIRES: 165

SUMMARY:
This ERC defines a series of interfaces for the abstraction of storage of on-chain data by implementing the logic functions that govern such data

SPECIFICATION:
### Terms **Data Point**: A uniquely identifiable reference to an on-chain data structure stored within one or many **Data Objects** and managed by one

MOTIVATION:
As the Ethereum ecosystem grows, so does the demand for on-chain functionalities. The market encourages a desire for broader adoption through more complex systems

RATIONALE:
The decision to encode **Data Points** as `bytes32` data pointers is primarily driven by flexibility and future-proofing. The use `bytes32` allows for a wide


=== ERC-1191 ===
TITLE: Add chain id to mixed-case checksum address encoding
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2018-03-18
REQUIRES: 5, 5, ,,  , 1, 5, 5

SUMMARY:
The [EIP-55](./eip-55.md) was created to prevent users from losing funds by sending them to invalid addresses. This EIP extends [EIP-55](./eip-55.md) to protect users from

SPECIFICATION:
Convert the address using the same algorithm defined by [EIP-55](./eip-55.md) but if a registered chain id is provided, add it to the input of

MOTIVATION:
The motivation of this proposal is to provide a mechanism to allow software to distinguish addresses from different Ethereum based networks. This proposal is

RATIONALE:
Benefits: - By means of a minimal code change on existing libraries, users are protected from losing funds by mixing addresses of different Ethereum


=== ERC-2569 ===
TITLE: Saving and Displaying Image Onchain for Universal Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-03-28
REQUIRES: 

SUMMARY:
This set of interfaces allow a smart contract to save an SVG image in Ethereum and to retrieve an SVG image from Ethereum for

SPECIFICATION:
An EIP-2569 compatible contract MUST have a method with the signature getTokenImageSvg(uint256) view returns (string memory) and a method with the signature setTokenImageSvg(uint256 tokenId,

MOTIVATION:
The ERC-721 token standard is a popular standard to define a non-fungible token in Ethereum. This standard is widely used to specify a crypto

RATIONALE:
After Bitcoin was created people have found ways to keep information permanent and tamper-resistant by encoding text messages they want to preserve permanently and


=== ERC-7627 ===
TITLE: Secure Messaging Protocol
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2024-02-19
REQUIRES: 

SUMMARY:
This proposal implements the capability to securely exchange encrypted messages on-chain. Users can register their public keys and encryption algorithms by registration and subsequently

SPECIFICATION:
### Objectives - Provide a standardized interface for implementing messaging systems in smart contracts, including user registration and message sending functionalities. - Enhance flexibility

MOTIVATION:
With the emergence of Layer 2 chains featuring sub-second block times and the introduction of account abstraction, the use of end-to-end encrypted communication has

RATIONALE:
### Event Emission for Off-Chain Integration By emitting events when messages are sent or public keys are updated, the implementation facilitates seamless integration with


=== ERC-7846 ===
TITLE: Wallet Connection API
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-12-15
REQUIRES: 

SUMMARY:
This ERC introduces a new wallet connection JSON-RPC method focused on extensibility, `wallet_connect`. It leverages the modular capabilities approach defined in [ERC-5792](./eip-5792.md#wallet_getcapabilities) to streamline

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
With applications beginning to require support for more sophisticated functionality in wallet connection flows, the need for a unified and extensible wallet connection JSON-RPC

RATIONALE:
### Multiple Accounts Returning multiple accounts allows greater generality for apps that wish to interact in more complex ways with users. This also improves


=== ERC-1775 ===
TITLE: App Keys, application specific wallet accounts
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-02-20
REQUIRES: 

SUMMARY:
In a wallet, an user often holds most of her funds in her main accounts. These accounts require a significant level of security and

SPECIFICATION:
### Applications An app is a website (or other) that would like to request from a wallet to access a cryptographic key specifically derived

MOTIVATION:
Wallets developers have agreed on an HD derivation path for ethereum accounts using BIP32, BIP44, SLIP44, [(see the discussion here)](https://github.com/ethereum/EIPs/issues/84). Web3 wallets have implemented

RATIONALE:
### Sharing application keys across domains: While this does not explicit cover cases of sharing these app keys between pages on its own, this


=== ERC-4519 ===
TITLE: Non-Fungible Tokens Tied to Physical Assets
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2021-12-03
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This EIP standardizes an interface for non-fungible tokens representing physical assets, such as Internet of Things (IoT) devices. These NFTs are tied to physical

SPECIFICATION:
The attributes `addressAsset` and `addressUser` are, respectively, the Ethereum addresses of the physical asset and the user. They are optional attributes but at least

MOTIVATION:
This standard was developed because [EIP-721](./eip-721.md) only tracks ownership (not usage rights) and does not track the Ethereum addresses of the asset. The popularity

RATIONALE:
### Authentication This EIP uses smart contracts to verify the mutual authentication process since smart contracts are trustless. ### Tie Time This EIP proposes


=== ERC-7579 ===
TITLE: Minimal Modular Smart Accounts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-14
REQUIRES: 1, 6, 5, ,,  , 1, 2, 7, 1, ,,  , 2, 7, 7, 1, ,,  , 4, 3, 3, 7

SUMMARY:
This proposal outlines the minimally required interfaces and behavior for modular smart accounts and modules to ensure interoperability across implementations. For accounts, the standard

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Contract accounts are gaining adoption with many accounts being built using a modular architecture. These modular contract accounts (hereafter smart accounts) move functionality into

RATIONALE:
### Minimal approach Smart accounts are a new concept and we are still learning about the best ways to build them. Therefore, we should


=== ERC-5334 ===
TITLE: EIP-721 User And Expires And Level Extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-25
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
An [EIP-721](./eip-721.md) extension that adds an additional role (`user`) which can be granted to addresses, and a time where the role is automatically revoked

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
Some NFTs have certain utilities. For example, virtual land can be "used" to build scenes, and NFTs representing game assets can be "used" in-game.

RATIONALE:
TBD


=== ERC-5773 ===
TITLE: Context-Dependent Multi-Asset Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-10-10
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The Multi-Asset NFT standard allows for the construction of a new primitive: context-dependent output of information per single NFT. The context-dependent output of information

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time

RATIONALE:
Designing the proposal, we considered the following questions: 1. **Should we use Asset or Resource when referring to the structure that comprises the token?**\


=== ERC-1167 ===
TITLE: Minimal Proxy Contract
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-06-22
REQUIRES: 211

SUMMARY:
By standardizing on a known minimal bytecode redirect implementation, this standard allows users and third party tools (e.g. Etherscan) to (a) simply discover that

SPECIFICATION:
The exact bytecode of the standard clone contract is this: `363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3` wherein the bytes at indices 10 - 29 (inclusive) are replaced with the

MOTIVATION:
This standard supports use-cases wherein it is desirable to clone exact contract functionality with a minimum of side effects (e.g. memory slot stomping) and

RATIONALE:
The goals of this effort have been the following: - inexpensive deployment (low gas to deploy clones) - support clone initialization in creation transaction


=== ERC-926 ===
TITLE: Address metadata registry
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-03-12
REQUIRES: 165

SUMMARY:
This EIP specifies a registry for address metadata, permitting both contracts and external accounts to supply metadata about themselves to onchain and offchain callers.

SPECIFICATION:
The metadata registry has the following interface: ```solidity interface AddressMetadataRegistry { function provider(address target) view returns(address); function setProvider(address _provider); } ``` `setProvider` specifies the

MOTIVATION:
An increasing set of use cases require storage of metadata associated with an address; see for instance EIP 777 and EIP 780, and the

RATIONALE:
There are two obvious approaches for a generic metadata registry: the indirection approach employed here, or a generalised key/value store. While indirection incurs the


=== ERC-67 ===
TITLE: URI Scheme with Metadata, Value and Bytecode
TYPE: Standards Track ERC
STATUS: Withdrawn
CREATED: 2016-02-17
REQUIRES: 

SUMMARY:
This proposal (inspired by BIP 21) defines a format for encoding a transaction into a URI, including a recipient, number of ethers (possibly zero),

SPECIFICATION:
If we follow the bitcoin standard, the result would be: ``` ethereum:<address>[?value=<value>][?gas=<suggestedGas>][?data=<bytecode>] ``` Other data could be added, but ideally the client should take

MOTIVATION:
Imagine these scenarios: * An exchange or a instant converter like ShapeShift wants to create a single Ethereum address for payments that will be

RATIONALE:
TODO


=== ERC-2535 ===
TITLE: Diamonds, Multi-Facet Proxy
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-02-22
REQUIRES: 

SUMMARY:
<img align="right" src="../assets/eip-2535/diamond.svg" width="230" height="230" alt="Diamonds contract structure"> This proposal standardizes diamonds, which are modular smart contract systems that can be upgraded/extended after deployment,

SPECIFICATION:
### Terms 1. A **diamond** is a facade smart contract that `delegatecall`s into its facets to execute function calls. A diamond is stateful. Data

MOTIVATION:
There are a number of different reasons to use diamonds. Here are some of them: 1. **A single address for unlimited contract functionality.** Using

RATIONALE:
### Using Function Selectors User interface software can be used to retrieve function selectors and facet addresses from a diamond in order show what


=== ERC-7965 ===
TITLE: Proof-based Broadcast in ERC-7786 Gateways
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-06-06
REQUIRES: 7, 7, 8, 6, ,,  , 7, 9, 3, 0

SUMMARY:
This document defines standardized broadcasting semantics and attributes for [ERC-7786] cross-chain messaging that enable trustless message verification through cryptographic proofs. Messages are committed on

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Cross-chain messaging protocols typically rely on external validators, multisigs, or optimistic mechanisms that introduce trust assumptions and potential points of failure. Cryptographic proofs offer

RATIONALE:
This standard extends [ERC-7786]'s attribute system to add cryptographic proof capabilities without creating new interfaces. This approach maintains compatibility with existing infrastructure while enabling


=== ERC-7766 ===
TITLE: Signature Aggregation for ERC-4337
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-09-01
REQUIRES: 4, 3, 3, 7, ,,  , 7, 5, 6, 2

SUMMARY:
[ERC-4337](./eip-4337) defined a way to achieve Account Abstraction on Ethereum using an alternative `UserOperation` mempool. However, one big limitation remains: each transaction must carry

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Using validation schemes that allow signature aggregation enables significant optimisations and savings on gas for execution and transaction data cost. This is especially relevant

RATIONALE:
### Account returning the "alternative signature" When using an `aggregator` contract, the accounts delegate their ability to authenticate `UserOperations`. The entire contents of the


=== ERC-5560 ===
TITLE: Redeemable NFTs
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-30
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The EIP is a Redeemable NFT extension which adds a `redeem` function to [EIP-721](./eip-721.md). It can be implemented when an NFT issuer wants his/her

SPECIFICATION:
_The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
An increasing amount of NFT issuers such as artists, fine art galeries, auction houses, brands and others want to offer a physical object to

RATIONALE:
When the NFT contract is deployed, the `isRedeemable()` function returns `true` by default. By default, the `redeem()` function visibility is public, so anyone can


=== ERC-5700 ===
TITLE: Bindable Token Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-09-22
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This standard defines an interface for [ERC-721](./eip-721.md) or [ERC-1155](./eip-155.md) tokens, known as "bindables", to "bind" to [ERC-721](./eip-721.md) NFTs. When bindable tokens "bind" to an

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
A standard interface for NFT binding offers a seamless and efficient way to bundle and transfer tokens with NFTs, ensuring compatibility with wallets, marketplaces,

RATIONALE:
A standard for token binding unlocks a new layer of composability for allowing wallets, applications, and protocols to interact with, trade, and display bundled


=== ERC-6551 ===
TITLE: Non-fungible Token Bound Accounts
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-02-23
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 6, 7, ,,  , 1, 2, 7, 1

SUMMARY:
This proposal defines a system which assigns Ethereum accounts to all non-fungible tokens. These token bound accounts allow NFTs to own assets and interact

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The [ERC-721](./eip-721.md) standard enabled an explosion of non-fungible token applications. Some notable use cases have included breedable cats, generative artwork, and exchange liquidity positions.

RATIONALE:
### Singleton Registry This proposal specifies a single, canonical registry that can be permissionlessly deployed to any chain at a known address. It purposefully


=== ERC-634 ===
TITLE: Storage of text records in ENS
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2017-05-17
REQUIRES: 1, 3, 7, ,,  , 1, 6, 5

SUMMARY:
This EIP defines a resolver profile for ENS that permits the lookup of arbitrary key-value text data. This allows ENS name holders to associate

SPECIFICATION:
### Resolver Profile A new resolver interface is defined, consisting of the following method: ```solidity interface IERC634 { /// @notice Returns the text data

MOTIVATION:
There is often a desire for human-readable metadata to be associated with otherwise machine-driven data; used for debugging, maintenance, reporting and general information. In

RATIONALE:
### Application-specific vs general-purpose record types Rather than define a large number of specific record types (each for generally human-readable data) such as `url`


=== ERC-223 ===
TITLE: Token with transaction handling model
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2017-05-03
REQUIRES: 

SUMMARY:
The following describes an interface and logic for fungible tokens that supports a `tokenReceived` callback to notify contract recipients when tokens are received. This

SPECIFICATION:
Contracts intending to receive these tokens MUST implement `tokenReceived`. Token transfers to contracts not implementing `tokenReceived` as described below MUST revert. ### Token contract

MOTIVATION:
This token introduces a communication model for contracts that can be utilized to straighten the behavior of contracts that interact with such tokens. Specifically,

RATIONALE:
This standard introduces a communication model by enforcing the `transfer` to execute a handler function in the destination address. This is an important security


=== ERC-7947 ===
TITLE: Account Abstraction Recovery Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-05-07
REQUIRES: 

SUMMARY:
Introduce a universal account abstraction recovery mechanism `recoverAccess(subject, provider, proof)` along with recovery provider management functions for smart accounts to securely update their access

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
Account abstraction and the "contractization" of EOAs are important Ethereum milestones for improving on-chain UX and off-chain security. A wide range of smart accounts

RATIONALE:
The AARI is expected to work with *any* account abstraction standard to allow for maximum account recovery flexibility. Whether it is [EIP-4337](./eip-4337.md) or [EIP-7702](./eip-7702.md),


=== ERC-1066 ===
TITLE: Status Codes
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-05
REQUIRES: 

SUMMARY:
This standard outlines a common set of status codes in a similar vein to HTTP statuses. This provides a shared set of signals to

SPECIFICATION:
### Format Codes are returned either on their own, or as the first value of a multiple return. ```solidity // Status only function isInt(uint

MOTIVATION:
### Semantic Density HTTP status codes are widely used for this purpose. BEAM languages use atoms and tagged tuples to signify much the same

RATIONALE:
### Encoding Status codes are encoded as a `byte`. Hex values break nicely into high and low nibbles: `category` and `reason`. For instance, `0x01`


=== ERC-900 ===
TITLE: Simple Staking Interface
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-02-22
REQUIRES: 

SUMMARY:
The following standard describes a common staking interface allowing for easy to use staking systems. The interface is kept simple allowing for various use

SPECIFICATION:
```solidity interface Staking { event Staked(address indexed user, uint256 amount, uint256 total, bytes data); event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);

MOTIVATION:
As we move to more token models, having a common staking interface which is familiar to users can be useful. The common interface can


=== ERC-6734 ===
TITLE: L2 Token List
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-03-20
REQUIRES: 155

SUMMARY:
The document describes a JSON token list that ensures that two or more Layer 1, Layer 2, or Sidechains can identify tokens from a

SPECIFICATION:
### Keywords: The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are

MOTIVATION:
This particular work by the L2 WG of the EEA Communities Projects managed by OASIS, an open-source initiative, is motivated by a significant challenge

RATIONALE:
This specification is extending and clarifying current custom lists such as from Arbitrum and Optimism as referenced in the [Motivation](#motivation) or the Uniswap Tokenlist


=== ERC-7936 ===
TITLE: Versioned Proxy Contract Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-04-17
REQUIRES: 

SUMMARY:
This EIP standardizes an interface for proxy contracts that allows callers to explicitly select which version of an implementation contract they want to interact

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
Smart contract upgrades are essential for fixing bugs and adding features. Current proxy patterns typically force all callers to use the latest implementation, which

RATIONALE:
### Version Identifiers as bytes32 Version identifiers are specified as `bytes32` rather than semantic versioning strings to: 1. Provide flexibility in versioning schemes 2.


=== ERC-7582 ===
TITLE: Modular Accounts with Delegated Validation
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-25
REQUIRES: 4337

SUMMARY:
This proposal standardizes a method for adding plugins and composable logic to smart contract accounts built on existing interfaces like [ERC-4337](eip-4337.md) (e.g., ERC-4337's `IAccount`).

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Smart contract accounts (contract accounts) are a powerful tool for managing digital assets and executing transactions by allowing users to program their interactions with


=== ERC-173 ===
TITLE: Contract Ownership Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-06-07
REQUIRES: 

SUMMARY:
This specification defines standard functions for owning or controlling a contract. An implementation allows reading the current owner (`owner() returns (address)`) and transferring ownership

SPECIFICATION:
Every ERC-173 compliant contract must implement the `ERC173` interface. Contracts should also implement `ERC165` for the ERC-173 interface. ```solidity /// @title ERC-173 Contract Ownership

MOTIVATION:
Many smart contracts require that they be owned or controlled in some way. For example to withdraw funds or perform administrative actions. It is

RATIONALE:
Key factors influencing the standard: - Keeping the number of functions in the interface to a minimum to prevent contract bloat. - Backwards compatibility


=== ERC-6932 ===
TITLE: Subscription-Based Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-25
REQUIRES: 20

SUMMARY:
This subscription-based [ERC-20](./eip-20.md) token extends the basic [ERC-20](./eip-20.md) token standard with a `subscribe` and `unsubscribe` function, which allow users to subscribe or unsubscribe from

SPECIFICATION:
Below are the implementations required by the standard: ### `SubscriptionToken` #### `subscribers` Returns the list of `addresses` subscribed to the subscription token contract. ####

MOTIVATION:
The rise of subscription-based business models necessitates a standardized approach to handle recurring payments on the Ethereum blockchain. Currently, users often manually initiate subscription

RATIONALE:
The subscription token contract inherits the fundamentals of subscription by deducting payments from subscribed addresses on a regular interval using mathematical formulas. ``` uint256


=== ERC-5008 ===
TITLE: ERC-721 Nonce Extension
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-04-10
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It proposes adding a `nonce` function to ERC-721 tokens.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
Some orders of NFT marketplaces have been attacked and the NFTs sold at a lower price than the current market floor price. This can

RATIONALE:
At first `transferCount` was considered as function name, but there may some case to change the `nonce` besides transfer, such as important properties changed,


=== ERC-7201 ===
TITLE: Namespaced Storage Layout
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-06-20
REQUIRES: 

SUMMARY:
We define the NatSpec annotation `@custom:storage-location` to document storage namespaces and their location in storage in Solidity or Vyper source code. Additionally, we define

SPECIFICATION:
### Preliminaries A _namespace_ consists of a set of ordered variables, some of which may be dynamic arrays or mappings, with its values laid

MOTIVATION:
Smart contract languages such as Solidity and Vyper rely on tree-shaped storage layout. This tree starts at slot 0 and is composed of sequential

RATIONALE:
The tree-shaped storage layout used by Solidity and Vyper follows the following grammar (with root=0): $L_{root} := \mathit{root} \mid L_{root} + n \mid \texttt{keccak256}(L_{root})


=== ERC-3234 ===
TITLE: Batch Flash Loans
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-01-31
REQUIRES: 

SPECIFICATION:
A batch flash lending feature integrates two smart contracts using a callback pattern. These are called the LENDER and the RECEIVER in this EIP.

MOTIVATION:
Flash loans of multiple assets, or batch flash loans, are a common offering of flash lenders, and have a strong use case in the

RATIONALE:
The interfaces described in this ERC have been chosen as to cover the known flash lending use cases, while allowing for safe and gas


=== ERC-5850 ===
TITLE: Complex Numbers stored in `bytes32` types
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-10-29
REQUIRES: 

SUMMARY:
This EIP proposes a natural way for complex numbers to be stored in and retrieved from the `bytes32` data-type. It splits the storage space

SPECIFICATION:
A complex number would be defined as `bytes32` and a cartesian representation would be initialized with the `cnNew` function and converted back with `RealIm`,

MOTIVATION:
Complex numbers are an essential tool for many mathematical and scientific calculations. For example, Fourier Transforms, Characteristic functions, AC Circuits and Navier-Stokes equations all

RATIONALE:
An EIP is required as this proposal defines a complex numbers storage/type standard for multiple apps to use. This EIP proposes to package both


=== ERC-1261 ===
TITLE: Membership Verification Token (MVT)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-07-14
REQUIRES: 1, 6, 5, ,,  , 1, 7, 3

SUMMARY:
The following standard allows for the implementation of a standard API for Membership Verification Token within smart contracts(called entities). This standard provides basic functionality

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
A standard interface allows any user, applications to work with any MVT on Ethereum. We provide for simple ERC-1261 smart contracts. Additional applications are

RATIONALE:
There are many potential uses of Ethereum smart contracts that depend on tracking membership. Examples of existing or planned MVT systems are Vault, a


=== ERC-7908 ===
TITLE: HD wallet In Treasury Management
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-03-07
REQUIRES: 

SUMMARY:
This proposal aims to provide a standardized method for on-chain treasury management of institutional assets, ensuring secure private key generation, hierarchical management, and departmental

SPECIFICATION:
### Derivation Path For secure on-chain treasury account key management, implementations **MUST** use the following hierarchical deterministic (HD) path: ```latex m/44'/60'/entity_id' / department_id' /

MOTIVATION:
With the rapid development of blockchain and DeFi, secure management of on-chain assets has become critical. Traditional private key management struggles to meet the

RATIONALE:
The scenarios for which the proposal applies are: 1. **Company and Department Isolation**: Different subsidiaries within the group, as well as different departments within


=== ERC-7573 ===
TITLE: Conditional-upon-Transfer-Decryption for DvP
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-05
REQUIRES: 

SUMMARY:
The interfaces in this proposal model a functional transaction scheme to establish a secure *delivery-versus-payment* across two blockchains, where a) no intermediary is required

SPECIFICATION:
### Methods #### Smart Contract on the chain that performs the locking (e.g. the asset chain) The following methods specify the functionality of the

MOTIVATION:
Within the domain of financial transactions and distributed ledger technology (DLT), the Hash-Linked Contract (HLC) concept has been recognized as valuable and has been

RATIONALE:
The protocol tries to be parsimonious. The transfer is associated with a (preferably unique) `id` possibly generated by some additional interaction of the trading


=== ERC-7758 ===
TITLE: Transfer With Authorization
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2020-09-28
REQUIRES: 2, 0, ,,  , 7, 1, 2

SUMMARY:
A set of functions to enable meta-transactions and atomic interactions with [ERC-20](./eip-20.md) token contracts via signatures conforming to the [EIP-712](./eip-712.md) typed message signing specification.

SPECIFICATION:
### Event ```solidity event AuthorizationUsed( address indexed authorizer, bytes32 indexed nonce ); // keccak256("TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)") bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH

MOTIVATION:
There is an existing spec, [EIP-2612](./eip-2612), that also allows meta-transactions, and it is encouraged that a contract implements both for maximum compatibility. The two

RATIONALE:
### Unique Random Nonce, Instead of Sequential Nonce One might say transaction ordering is one reason why sequential nonces are preferred. However, sequential nonces


=== ERC-5732 ===
TITLE: Commit Interface
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-29
REQUIRES: 1, 6, 5, ,,  , 1, 2, 7, 1

SUMMARY:
A simple commit interface to support commit-reveal scheme which provides **only** a commit method but no reveal method, allowing implementations to integrate this interface

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
1. support commit-reveal privacy for applications such as voting. 2. make it harder for attackers for front-running, back-running or sandwich attacks.

RATIONALE:
1. One design options is that we can attach a Commit Interface to any individual ERCs such as voting standards or token standards. We


=== ERC-7518 ===
TITLE: Dynamic Compliant Interop Security Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-14
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This proposal is a security token standard that extends [ERC-1155](./eip-1155.md) to provide a flexible framework for managing compliant real-asset security tokens. It introduces the

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The growing demand for tokenized real-world assets necessitates a token standard that can accommodate the unique requirements of security tokens. Existing standards, while powerful,

RATIONALE:
### Enhancing Compliance Management The `canTransfer` function facilitates compliance checks during token transfers, offering adaptability through diverse implementation methods such as on-chain storage, oracle


=== ERC-5252 ===
TITLE: Account-bound Finance
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-06-29
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 5, 1, 1, 4

SUMMARY:
This EIP proposes a form of smart contract design pattern and a new type of account abstraction on how one's finance should be managed,

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Decentralized finance (DeFi) faces a trust issue. Smart contracts are often proxies, with the actual logic of the contract hidden away in a separate

RATIONALE:
### Gas saving for end user The gas cost of using multiple contracts (as opposed to a single one) actually saves gas long-run if


=== ERC-7410 ===
TITLE: ERC-20 Update Allowance By Spender
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-26
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
This extension adds a `decreaseAllowanceBySpender` function to decrease [ERC-20](./eip-20.md) allowances, in which a spender can revoke or decrease a given allowance by a specific

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
Currently, [ERC-20](./eip-20.md) tokens offer allowances, enabling token owners to authorize spenders to use a designated amount of tokens on their behalf. However, the process

RATIONALE:
The technical design choices within this ERC are driven by the following considerations: - The introduction of the `decreaseAllowanceBySpender` function empowers spenders by allowing


=== ERC-1417 ===
TITLE: Poll Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-16
REQUIRES: 1, 6, 5, ,,  , 1, 2, 6, 1

SUMMARY:
The following standard allows for the implementation of a standard API for polls to be used with MVTs (refer [EIP-1261](./eip-1261.md)). The standard provides basic

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
A standard interface allows any user or applications to work with any Poll contract on Ethereum. We provide for simple ERC-1417 smart contracts. Additional

RATIONALE:
As the poll standard is built with the intention of creating a system that allows for more transparency and accessibility of governance data, the


=== ERC-7811 ===
TITLE: Wallet Asset Discovery
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-11-07
REQUIRES: 2, 0, ,,  , 1, 5, 5, ,,  , 7, 2, 1, ,,  , 5, 7, 9, 2

SUMMARY:
This ERC introduces a new RPC call, `wallet_getAssets`, for wallets to declare to the Dapp what assets are owned by the user. This allows

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Currently, Dapps primarily rely on on-chain data to determine a user's balance, which can be limiting. Furthermore, a Dapp might restrict the user from

RATIONALE:
<!-- TODO -->


=== ERC-5216 ===
TITLE: ERC-1155 Allowance Extension
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-07-11
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This ERC defines standard functions for granular approval of [ERC-1155](./eip-1155.md) tokens by both `id` and `amount`. This ERC extends [ERC-1155](./eip-1155.md).

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
[ERC-1155](./eip-1155.md)'s popularity means that multi-token management transactions occur on a daily basis. Although it can be used as a more comprehensive alternative to [ERC-721](./eip-721.md),

RATIONALE:
The name "ERC-1155 Allowance Extension" was chosen because it is a succinct description of this ERC. Users can approve their tokens by `id` and


=== ERC-801 ===
TITLE: Canary Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2017-12-16
REQUIRES: 

SUMMARY:
The following standard allows the implementation of canaries within contracts. This standard provides basic functionality to check if a canary is alive, keeping the

SPECIFICATION:
### Methods #### isAlive() Returns if the canary was fed properly to signal e.g. that no warrant was received. ``` js function isAlive() constant

MOTIVATION:
The canary can e.g. be used as a [warrant canary](https://en.wikipedia.org/wiki/Warrant_canary). A standard interface allows other applications to easily interface with canaries on Ethereum -


=== ERC-2386 ===
TITLE: Ethereum 2 Hierarchical Deterministic Walletstore
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-11-21
REQUIRES: 2, 3, 3, 4, ,,  , 2, 3, 3, 5

SUMMARY:
Ethereum has the concept of keystores: pieces of data that define a key (see [EIP-2335](https://eips.ethereum.org/EIPS/eip-2335) for details). This adds the concept of walletstores: stores

SPECIFICATION:
The elements of a hierarchical deterministic walletstore are as follows: ### UUID The `uuid` provided in the walletstore is a randomly-generated type 4 UUID

MOTIVATION:
Hierarchical deterministic wallets create keys from a _seed_ and a _path_. The seed needs to be accessible to create new keys, however it should

RATIONALE:
A standard for walletstores, similar to that for keystores, provides a higher level of compatibility between wallets and allows for simpler wallet and key


=== ERC-1444 ===
TITLE: Localized Messaging with Signal-to-Text
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-23
REQUIRES: 

SUMMARY:
An on-chain system for providing user feedback by converting machine-efficient codes into human-readable strings in any language or phrasing. The system does not impose

SPECIFICATION:
### Contract Architecture Two types of contract: `LocalizationPreferences`, and `Localization`s. The `LocalizationPreferences` contract functions as a proxy for `tx.origin`. ```diagram +--------------+ | | +------>

MOTIVATION:
There are many cases where an end user needs feedback or instruction from a smart contract. Directly exposing numeric codes does not make for

RATIONALE:
### `bytes32` Keys `bytes32` is very efficient since it is the EVM's base word size. Given the enormous number of elements (card(A) > 1.1579


=== ERC-2304 ===
TITLE: Multichain address resolution for ENS
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-09-09
REQUIRES: 137

SUMMARY:
This EIP introduces new overloads for the `addr` field for ENS resolvers, which permit resolution of addresses for other blockchains via ENS.

SPECIFICATION:
A new accessor function for resolvers is specified: ```solidity function addr(bytes32 node, uint coinType) external view returns(bytes memory); ``` The EIP165 interface ID for

MOTIVATION:
With the increasing uptake of ENS by multi-coin wallets, wallet authors have requested the ability to resolve addresses for non-Ethereum chains inside ENS. This


=== ERC-6454 ===
TITLE: Minimal Transferable NFT detection interface
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-01-31
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The Minimalistic Transferable interface for Non-Fungible Tokens standard extends [ERC-721](./eip-721.md) by introducing the ability to identify whether an NFT can be transferred or not.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time

RATIONALE:
Designing the proposal, we considered the following questions: 1. **Should we propose another (Non-)Transferable NFT proposal given the existence of existing ones, some even


=== ERC-7694 ===
TITLE: Solana Storage Router
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-18
REQUIRES: 3, 6, 6, 8, ,,  , 7, 7, 0, 0

SUMMARY:
The following standard is an extension to the cross-chain storage router protocol introducing the storage router for Solana blockchain. With this specification, any Ethereum

SPECIFICATION:
A Solana storage router `StorageRoutedToSolana()` requires the hex-encoded `programId` and the manager `account` on the Solana blockchain. `programId` is equivalent to a contract address

MOTIVATION:
Cross-Chain Storage Router Protocol (CCIP-Store) introduced in [EIP-7700](./eip-7700), describes three external routers for routing storage to L1 contracts, L2s and databases. This document extends

RATIONALE:
`StorageRoutedToSolana()` works in a similar fashion to `StorageRoutedToL2()` in CCIP-Store in the sense that the client needs to be pointed to a certain contract


=== ERC-1996 ===
TITLE: Holdable Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-04-10
REQUIRES: 20

SUMMARY:
A hold specifies a payer, a payee, a maximum amount, a notary and an expiration time. When the hold is created, the specified token

SPECIFICATION:
```solidity interface IHoldable /* is ERC-20 */ { enum HoldStatusCode { Nonexistent, Ordered, Executed, ReleasedByNotary, ReleasedByPayee, ReleasedOnExpiration } function hold(string calldata operationId, address to,

MOTIVATION:
A hold has to be used in different scenarios where a immediate transfer between accounts is not possible or has to be guaranteed beforehand:

RATIONALE:
This standards provides a functionality, to guarantee future payments, which is needed for many business cases where transfers have to be guaranteed. It goes


=== ERC-191 ===
TITLE: Signed Data Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2016-01-20
REQUIRES: 

SPECIFICATION:
We propose the following format for `signed_data` ``` 0x19 <1 byte version> <version specific data> <data to sign>. ``` The initial `0x19` byte is


=== ERC-7968 ===
TITLE: Owner-Authorized Token Transfer Protocol
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-06-11
REQUIRES: 20

SUMMARY:
This proposal introduces an innovative token transfer processing model designed for third parties, enabling seamless use of Ethereum-based tokens (e.g., [ERC-20](./eip-20.md)) by non-crypto-native actors.

SPECIFICATION:
### Methods #### Smart Contract that holds the assets (`ITokenStorage.sol`) ##### Transfer proposal: `proposeTransaction` ```solidity function proposeTransaction(address tokenAddress, uint256 amountToSent, address destinationAddress) external; ```

MOTIVATION:
Adoption of blockchain-based payments and tokenized assets in enterprise and conventional business contexts is still often hindered by the need for end-users or business

RATIONALE:
tbd <!-- TODO -->


=== ERC-2917 ===
TITLE: Staking Reward Calculation
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-08-28
REQUIRES: 

SUMMARY:
Based on the product of effective collateral and time, ERC2917 calculates the reward a user can get at any time, and realize the real

SPECIFICATION:
Every ERC-2917 compliant contract must implement the ERC2917 and ERC20 interfaces (if necessary): ```solidity interface IERC2917 is IERC20 { /// @dev This emit when

MOTIVATION:
One of the main drawbacks of many DeFi projects is the reward distribution mechanism within the smart contract. In fact, there are two main

RATIONALE:
TBD


=== ERC-5883 ===
TITLE: Token Transfer by Social Recovery
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-19
REQUIRES: 

SUMMARY:
This EIP standardizes a mechanism of a social recovery where a token may be transferred from an inaccessible account to a new account, given

SPECIFICATION:
```solidity pragma solidity ^0.8.7; interface ISocialRecovery { /// @dev Related but independent identity approves the transfer function approveTransfer(address from_, address to_) external; /// @dev

MOTIVATION:
It is a known problem that the private key of an account can be lost. If that key is lost it's not possible to

RATIONALE:
The formula proposed was deemed very resilient and provides a coherent incentivation structure to actually see value in the on-chain score. The formula adds


=== ERC-7507 ===
TITLE: Multi-User NFT Extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-08-24
REQUIRES: 721

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It proposes a new role `user` in addition to `owner` for a token. A token can have

SPECIFICATION:
Solidity interface available at [`IERC7507.sol`](../assets/eip-7507/contracts/IERC7507.sol): ```solidity interface IERC7507 { /// @notice Emitted when the expires of a user for an NFT is changed event

MOTIVATION:
Some NFTs represent IP assets, and IP assets have the need to be licensed for access without transferring ownership. The subscription model is a

RATIONALE:
This standard complements [ERC-4907](./eip-4907.md) to support multi-user feature. Therefore the proposed interface tries to keep consistent using the same naming for functions and parameters.


=== ERC-1616 ===
TITLE: Attribute Registry Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-23
REQUIRES: 165

SUMMARY:
This EIP contains the following core ideas: 1. Instead of relying directly on the reputation of a claims issuer to assess the veracity of

SPECIFICATION:
The Attribute Registry interface contains four functions, outlined as follows: ```solidity /** * @title EIP-1616 Attribute Registry Standard interface. EIP-165 ID: 0x5f46473f */ interface

MOTIVATION:
This EIP is motivated by the need for contracts and external accounts to be able to verify information about a given address from a

RATIONALE:
This standard extends the applicability of metadata assignment to those use cases that are not adequately represented by EIP-735, EIP-780, or similar proposals. Namely,


=== ERC-6059 ===
TITLE: Parent-Governed Nestable Non-Fungible Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-11-15
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The Parent-Governed Nestable NFT standard extends [ERC-721](./eip-721.md) by allowing for a new inter-NFT relationship and interaction. At its core, the idea behind the proposal

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time

RATIONALE:
Designing the proposal, we considered the following questions: 1. **How to name the proposal?**\ In an effort to provide as much information about the


=== ERC-7590 ===
TITLE: ERC-20 Holder Extension for NFTs
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-01-05
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal suggests an extension to [ERC-721](./eip-721.md) to enable easy exchange of [ERC-20](./eip-20.md) tokens. By enhancing [ERC-721](./eip-721.md), it allows unique tokens to manage and

SPECIFICATION:
```solidity interface IERC7590 /*is IERC165, IERC721*/ { /** * @notice Used to notify listeners that the token received ERC-20 tokens. * @param erc20Contract The

MOTIVATION:
In the ever-evolving landscape of blockchain technology and decentralized ecosystems, interoperability between diverse token standards has become a paramount concern. By enhancing [ERC-721](./eip-721.md) functionality,

RATIONALE:
### Pull Mechanism We propose using a pull mechanism, where the contract transfers the token to itself, instead of receiving it via "safe transfer"


=== ERC-2645 ===
TITLE: Hierarchical Deterministic Wallet for Layer-2
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-05-13
REQUIRES: 

SUMMARY:
We provide a Derivation Path allowing a user to derive hierarchical keys for Layer-2 solutions depending on the zk-technology, the application, the user’s Layer-1

SPECIFICATION:
Starkware keys are derived with the following [BIP43](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki)-compatible derivation path, with direct inspiration from [BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki): ``` m / purpose' / layer' / application' /

MOTIVATION:
In the context of Computation Integrity Proof (CIP) Layer-2 solutions such as ZK-Rollups, users are required to sign messages on new elliptic curves optimized

RATIONALE:
This EIP specifies two aspects of keys derivation in the context of Hierarchical Wallets: - Derivation Path - Grinding Algorithm to enforce a uniform


=== ERC-7820 ===
TITLE: Access Control Registry
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2024-11-19
REQUIRES: 

SUMMARY:
The Access Control Registry (ACR) standard defines a universal interface for managing role-based access control across multiple smart contracts. This standard introduces a centralized

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to

MOTIVATION:
As decentralized applications (dApps) grow in complexity, managing access control across multiple smart contracts becomes increasingly difficult. Current practices involve bespoke implementations, leading to

RATIONALE:
The `IAccessControlRegistry` interface aims to provide a standardized way to manage access control across multiple contracts within the ecosystem. By defining a clear structure


=== ERC-4950 ===
TITLE: Entangled Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-03-28
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP defines an interface for delegating control of a smart contract wallet to pairs of users using entangled [ERC-721](./eip-721.md) non-fungible tokens.

SPECIFICATION:
An entangled token contract implements [ERC-721](./eip-721.md) with the additional restriction that it only ever mints exactly two tokens at contract deployment: one with a

MOTIVATION:
The motivation is to provide an easy way to share a wallet through NFTs, so that the act of buying an NFT (in a

RATIONALE:
We decide to extend [ERC-721](./eip-721.md) ([ERC-1155](./eip-1155.md) could be also possible) because the main purpose of this is to be compatible with current marketplaces platforms.


=== ERC-5902 ===
TITLE: Smart Contract Event Hooks
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-11-09
REQUIRES: 712

SUMMARY:
This EIP proposes a standard for creating "hooks" that allow a smart contract function to be called automatically in response to a trigger fired

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
There exists a number of use cases that require some off-chain party to monitor the chain and respond to on-chain events by broadcasting a

RATIONALE:
The rationale for this design is that it allows smart contract developers to write contract logic that listens and responds to events fired in


=== ERC-7417 ===
TITLE: Token Converter
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-07-27
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 2, 2, 3

SUMMARY:
There are multiple token standards on Ethereum chain currently. This EIP introduces a concept of cross-standard interoperability by creating a service that allows [ERC-20](./eip-20.md)

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
This proposal introduces a concept of a token standard upgrading procedure driven by a specialized smart-contract which can convert tokens of one standard to

RATIONALE:
### Support of [ERC-223](./eip-223.md) original tokens Two methods of implementing a Token Converter service were considered: (1) a converter that can only create [ERC-223](./eip-223.md)


=== ERC-1973 ===
TITLE: Scalable Rewards
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-04-01
REQUIRES: 

SUMMARY:
The mintable token rewards interface allows DApps to build a token economy where token rewards are distributed equally among the active participants. The tokens

SPECIFICATION:
### Definitions `token amount per participant in the ecosytem or TPP (token per participant)`: TPP = (token amount to mint / total active participants)

MOTIVATION:
Distributing tokens through a push system to a large amount of participants fails due to block gas limit. As the number of participants in

RATIONALE:
Currently, there is no standard for a scalable reward distribution mechanism. In order to create a sustainable cryptoeconomic environment within DAPPs, incentives play a


=== ERC-1081 ===
TITLE: Standard Bounties
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-14
REQUIRES: 20

SUMMARY:
In order to encourage cross-platform interoperability of bounties on Ethereum, and for easier reputational tracking, StandardBounties can facilitate the administration of funds in exchange

SPECIFICATION:
After studying bounties as they've existed for thousands of years (and after implementing and processing over 300 of them on main-net in beta), we've

MOTIVATION:
In the absence of a standard for bounties on Ethereum, it would be difficult for platforms to collaborate and share the bounties which users

RATIONALE:
The development of this standard began a year ago, with the goal of encouraging interoperability among bounty implementations on Ethereum. The initial version had


=== ERC-4910 ===
TITLE: Royalty Bearing NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-03-14
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The proposal directly connects NFTs and royalties in a smart contract architecture extending the [ERC-721](./eip-721.md) standard, with the aim of precluding central authorities from

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The management of royalties is an age-old problem characterized by complex contracts, opaque management, plenty of cheating and fraud. The above is especially true

RATIONALE:
Royalties for NFTs is at its core a distribution licensing problem. A buyer obtains the right to an asset/content which might or might not


=== ERC-3569 ===
TITLE: Sealed NFT Metadata Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-05-07
REQUIRES: 

SUMMARY:
This standard accomplishes three things; it provides a way for potential collectors to verify that the NFT metadata will not change, allows creators to

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
In the original ERC-721 standard, the metadata extension specifies a `tokenURI` function which returns a URI for a single token ID. This may be

RATIONALE:
**Rationale for rule not explicitly requiring that sealed URI be hosted on decentralized filestorage** In order for this standard to remain future proof there


=== ERC-5496 ===
TITLE: Multi-privilege Management NFT Extension
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-07-30
REQUIRES: 721

SUMMARY:
This EIP defines an interface extending [EIP-721](./eip-721.md) to provide shareable multi-privileges for NFTs. Privileges may be on-chain (voting rights, permission to claim an airdrop)

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
This standard aims to efficiently manage privileges attached to NFTs in real-time. Many NFTs have functions other than just being used as profile pictures

RATIONALE:
### Shareable Privileges The number of privilege holders is limited by the number of NFTs if privileges are non-shareable. A shareable privilege means the


=== ERC-2848 ===
TITLE: My Own Messages (MOM)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-08-02
REQUIRES: 

SUMMARY:
My Own Messages (MOM) use Ethereum as a certification layer for commands and multihash of your messages. It don't use smart contracts but simple

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
As a _developer_ or _pool's owner_, I'd like to send messages to my users in a decentralized way. They must be able to easily

RATIONALE:
Ethereum is _account based_, so it's good to be identified as a single source of information. It is also able of doing notarization very


=== ERC-7390 ===
TITLE: Vanilla Options for ERC-20 Tokens
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-09-02
REQUIRES: 2, 0, ,,  , 1, 1, 5, 5

SUMMARY:
This standard defines a comprehensive set of functions and events facilitating seamless interactions (creation, management, exercising, etc.) for vanilla options. Vanilla options grant the

SPECIFICATION:
Implementations of this proposal MUST also implement ERC-1155 to give the possibility to buy only a fraction of the issuance. ### Interface ```solidity interface

MOTIVATION:
Options are widely used financial instruments, and have a true usefulness for investors and traders. It offers versatile risk management tools and speculative opportunities.\

RATIONALE:
This contract's concept is oracle-free, because we assume that a rational buyer will exercise his option only if it's profitable for him. The premium


=== ERC-4931 ===
TITLE: Generic Token Upgrade Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-11-02
REQUIRES: 20

SUMMARY:
The following standard allows for the implementation of a standard API for [ERC-20](./eip-20.md) token upgrades. This standard specifies an interface that supports the conversion

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Token contract upgrades typically require each asset holder to exchange their old tokens for new ones using a bespoke interface provided by the developers.

RATIONALE:
There have been several notable ERC20 upgrades (Ex. Golem: GNT -> GLM) where the upgrade functionality is written directly into the token contracts. We


=== ERC-7754 ===
TITLE: Tamperproof Extension Wallets API (TWIST)
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-07-29
REQUIRES: 1193

SUMMARY:
Tamperproof Web Immutable Secure Transaction (TWIST) introduces a new RPC method to be implemented by wallets, `wallet_signedRequest`, that enables dapps to interact with wallets

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
This standard aims to enhance the end user's experience by granting them confidence that requests from their dapps have not been tampered with. In

RATIONALE:
The proposed implementation does not modify any of the existing functionalities offered by [EIP-712](./eip-712.md) and [EIP-1193](./eip-1193.md). Its additive nature makes it inherently backward compatible.


=== ERC-6372 ===
TITLE: Contract clock
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-01-25
REQUIRES: 

SUMMARY:
Many contracts rely on some clock for enforcing delays and storing historical data. While some contracts rely on block numbers, others use timestamps. There

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Many contracts check or store time-related information. For example, timelock contracts enforce a delay before an operation can be executed. Similarly, DAOs enforce a

RATIONALE:
`clock` returns `uint48` as it is largely sufficient for storing realistic values. In timestamp mode, `uint48` will be enough until the year 8921556. Even


=== ERC-2942 ===
TITLE: EthPM URI Specification
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-09-04
REQUIRES: 2678

SUMMARY:
When interacting with the EthPM ecosystem, users and tooling can benefit from a URI scheme to identify EthPM assets. Being able to specify a

SPECIFICATION:
`scheme://registry_address[:chain_id][/package_name[@package_version[/json_pointer]]]` #### `scheme` - Required - Must be one of `ethpm` or `erc1319`. If future versions of the EthPM registry standard are designed and

RATIONALE:
Most interactions within the EthPM ecosystem benefit from a single-string representation of EthPM assets; from installing a package, to identifying a registry, to distributing


=== ERC-5719 ===
TITLE: Signature replacement interface
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-09-26
REQUIRES: 1271

SUMMARY:
Smart contract wallet signed messages can become stale, meaning a signature that once was valid could become invalid at any point. Signatures MAY become

SPECIFICATION:
The wallet contract MUST implement the following function: ```solidity function getAlternativeSignature(bytes32 _digest) external view returns (string); ``` The returned string MUST be a URI

MOTIVATION:
In contrast to EOA signatures, [EIP-1271](./eip-1271.md) signatures are not necessarily idempotent; they can become invalid at any point in time. This poses a challenge

RATIONALE:
A URI is chosen because it can accommodate centralized and decentralized solutions. For example, a server can implement live re-encoding for Merkle proofs, or


=== ERC-7677 ===
TITLE: Paymaster Web Service Capability
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-04-03
REQUIRES: 4, 3, 3, 7, ,,  , 5, 7, 9, 2

SUMMARY:
With [EIP-5792](./eip-5792.md), apps can communicate with wallets about advanced features via capabilities. This proposal defines a capability that allows apps to request that [ERC-4337](./eip-4337.md)

SPECIFICATION:
One new [EIP-5792](./eip-5792.md) wallet capability is defined. We also define a standard interface for paymaster web services as a prerequisite. ### Paymaster Web Service

MOTIVATION:
App developers want to start sponsoring their users' transactions using paymasters. Paymasters are commonly used via web services. However, there is currently no way

RATIONALE:
### Gas Estimation The current loose standard for paymaster services is to implement `pm_sponsorUserOperation`. This method returns values for paymaster-related user operation fields and


=== ERC-6366 ===
TITLE: Permission Token
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-01-19
REQUIRES: 6617

SUMMARY:
This EIP offers an alternative to Access Control Lists (ACLs) for granting authorization and enhancing security. A `uint256` is used to store permission of

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Special roles like `Owner`, `Operator`, `Manager`, `Validator` are common for many smart contracts because permissioned addresses are used to administer and manage them. It

RATIONALE:
Needs discussion.


=== ERC-681 ===
TITLE: URL Format for Transaction Requests
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2017-08-01
REQUIRES: 2, 0, ,,  , 1, 3, 7

SUMMARY:
URLs embedded in QR-codes, hyperlinks in web-pages, emails or chat messages provide for robust cross-application signaling between very loosely coupled applications. A standardized URL

SPECIFICATION:
### Syntax Payment request URLs contain "ethereum" in their schema (protocol) part and are constructed as follows: request = schema_prefix target_address [ "@" chain_id

MOTIVATION:
The convenience of representing payment requests by standard URLs has been a major factor in the wide adoption of Bitcoin. Bringing a similarly convenient

RATIONALE:
The proposed format is chosen to resemble `bitcoin:` URLs as closely as possible, as both users and application programmers are already familiar with that


=== ERC-7444 ===
TITLE: Time Locks Maturity
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-05
REQUIRES: 165

SUMMARY:
This EIP defines a standardized method to communicate the date on which a time-locked system will become unlocked. This allows for the determination of

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Time-locks are ubiquitous, yet no standard on how to determine the date upon which they unlock exists. Time-locked assets experience theta-decay, where the time

RATIONALE:
### Universal Maturities on Locked Assets Locked Assets have become increasingly popular and used in different parts of defi, such as yield farming and


=== ERC-7522 ===
TITLE: OIDC ZK Verifier for AA Account
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-20
REQUIRES: 4337

SUMMARY:
Account Abstraction facilitates new use cases for smart accounts, empowering users with the ability to tailor authentication and recovery mechanisms to their specific needs.

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
Connecting OIDC identity and smart accounts has been a very interesting but challenging problem. Verifying an OIDC issued IdToken is simple. IdToken are usually

RATIONALE:
To verify identity ownership on-chain, **IOpenIdVerifier** needs at least three pieces of information: 1. the user ID to identify the user in the IDP.


=== ERC-5570 ===
TITLE: Digital Receipt Non-Fungible Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-01
REQUIRES: 721

SUMMARY:
This ERC proposes a standard schema for digital receipts of transactions. Digital Receipt Non-Fungible Tokens are issued by a vendor when a customer makes

SPECIFICATION:
Transaction Flow: - A customer purchases an item from an online retailer, checking out leads the customer to an option to mint a NFT.

MOTIVATION:
Purchases from online retailers include a receipt that is emailed and/or physically provided to the customer. These receipts are critical for many reasons but

RATIONALE:
The schema introduced complies with ERC-721's metadata extension, conveniently allowing previous tools for viewing NFTs to show our receipts. The new property "receipt" contains


=== ERC-7272 ===
TITLE: Ethereum Access Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-03
REQUIRES: 712

SUMMARY:
An Ethereum Access Token (EAT) is an [EIP-712](./eip-712.md) conformant, signed message, used by off-chain services to grant Ethereum accounts access to specific on-chain resources.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
While other proposals tackle authentication or authorization in a more narrow way, this specification allows developers to add a layer of access control to

RATIONALE:
- Single-use. The reference implementation guarantees non-replayability of EATs. But other implementations might favor a different approach. - Use of EIP-712. By conforming to


=== ERC-4521 ===
TITLE: 721/20-compatible transfer
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-12-13
REQUIRES: 721

SUMMARY:
ERC-721, the popular standard for non-fungible tokens (NFTs), includes send functions, such as `transferFrom()` and `safeTransferFrom()`, but does not include a backwards-compatible `transfer()` found

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
This standard proposes a simple extension to allow NFTs to work with contracts designed to manage ERC-20s and many consumer wallets which expect to

RATIONALE:
Replicating ERC-20 `transfer()` with just a minor change to accurately reflect that a unique `tokenId` rather than fungible sum is being sent is desirable


=== ERC-7439 ===
TITLE: Prevent ticket touting
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-07-28
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md) and defines standard functions outlining a scope for ticketing agents or event organizers to take preventative actions

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Industrial-scale ticket touting has been a longstanding issue, with its associated fraud and criminal problems leading to unfortunate incidents and waste of social resources.

RATIONALE:
Designing the proposal, we considered the following questions: 1. What is the most crucial for ticketing agents, performers, and audiences? * For ticketing companies,


=== ERC-7779 ===
TITLE: Interoperable Delegated Accounts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-02
REQUIRES: 7, 2, 0, 1, ,,  , 7, 7, 0, 2

SUMMARY:
This proposal outlines the interfaces to make delegated EOAs interoperable after the merge of [EIP-7702](./eip-7702.md). With [EIP-7702](./eip-7702.md), EOAs will be able to enable execution

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be

MOTIVATION:
After the merge of [EIP-7702](./eip-7702.md), it is expected that a considerable number of EOA wallets will migrate from pure EOA accounts to delegated EOA

RATIONALE:
### Storage base checks This standard is designed with the need of wallets to validate the storage of the EOA, even if some may


=== ERC-7695 ===
TITLE: Ownership Delegation and Context for ERC-721
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-02
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension for [ERC-721](./eip-721.md), designed to specify users for various contexts with a locking feature and allow temporary ownership delegation without

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
For standard [ERC-721](./eip-721.md) NFTs, there are several use cases in financial applications, including: - Staking NFTs to earn rewards. - Mortgaging an NFT to

RATIONALE:
When designing the proposal, we considered the following concerns. ### Multiple contexts for multiple use cases This proposal is centered around Token Context to


=== ERC-1491 ===
TITLE: Human Cost Accounting Standard (Like Gas but for humans)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-10-12
REQUIRES: 

SUMMARY:
The following standard allows for the implementation of a standard API for HUCAP tokens within smart contracts. This standard provides basic functionality to discover,

SPECIFICATION:
#### Main Interface ```solidity pragma solidity ^0.4.25; pragma experimental ABIEncoderV2; /** @title ERC-**** Human Capital Accounting Standard @dev See https://github.com/freeworkculture/kazini/issues/11 Note: the ERC-165 identifier

MOTIVATION:
The Ethereum protocol architecture has a deterministic world-view bounded to the random reality of the human domain that supplies the intentions and logic. The

RATIONALE:
[WIP]


=== ERC-4337 ===
TITLE: Account Abstraction Using Alt Mempool
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2021-09-29
REQUIRES: 7, 1, 2, ,,  , 7, 5, 6, 2

SUMMARY:
An account abstraction proposal which completely avoids the need for consensus-layer protocol changes. Instead of adding new protocol features and changing the bottom-layer transaction

SPECIFICATION:
### Definitions * **UserOperation** - a structure that describes a transaction to be sent on behalf of a user. To avoid confusion, it is

MOTIVATION:
See also `https://ethereum-magicians.org/t/implementing-account-abstraction-as-part-of-eth1-x/4020` and the links therein for historical work and motivation, and [EIP-2938](./eip-2938.md) for a consensus layer proposal for implementing the same goal.

RATIONALE:
The main challenge with a purely "Smart Contract Accounts" based Account Abstraction system is DoS safety: how can a block builder including an operation


=== ERC-5727 ===
TITLE: Semi-Fungible Soulbound Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-09-28
REQUIRES: 1, 6, 5, ,,  , 7, 1, 2, ,,  , 7, 2, 1, ,,  , 3, 5, 2, 5, ,,  , 4, 9, 0, 6, ,,  , 5, 1, 9, 2, ,,  , 5, 4, 8, 4

SUMMARY:
An interface for soulbound tokens (SBT), which are non-transferable tokens representing a person's identity, credentials, affiliations, and reputation. Our interface can handle a combination

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The current Web3 ecosystem is heavily focused on financialized, transferable tokens. However, there's a growing need for non-transferable tokens to represent unique personal attributes

RATIONALE:
### Token storage model We adopt semi-fungible token storage models designed to support both fungible and non-fungible tokens, inspired by the semi-fungible token standard.


=== ERC-5505 ===
TITLE: EIP-1155 asset backed NFT extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-18
REQUIRES: 1155

SUMMARY:
To propose an extension of smart contract interfaces for asset-backed, fractionalized projects using the [EIP-1155](./eip-1155.md) standard such that total acquisition will become possible. This

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Fractionalized, asset backed NFTs face difficulty when someone wants to acquire the whole asset. For example, if someone wants to bring home a fractionalized

RATIONALE:
Native ETH is supported by via Wrapped Ether [EIP-20](./eip-20.md). After forcedSale is set, the remaining NFTs metadata should be updated to reflect the NFTs


=== ERC-601 ===
TITLE: Ethereum hierarchy for deterministic wallets
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2017-04-13
REQUIRES: 

SUMMARY:
This EIP defines a logical hierarchy for deterministic wallets based on [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki), the purpose scheme defined in [BIP43](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki) and eip-draft-ethereum-purpose. This EIP is a

SPECIFICATION:
We define the following 4 levels in BIP32 path: <pre> m / purpose' / subpurpose' / EIP' / wallet' </pre> Apostrophe in the path

MOTIVATION:
At present, different Ethereum clients and wallets use different derivation paths; a summary of them can be found [here](https://github.com/ethereum/EIPs/issues/84#issuecomment-292324521). Some of these paths violate

RATIONALE:
The existing convention is to use the 'Ethereum' coin type, leading to paths starting with `m/44'/60'/*`. Because this still assumes a UTXO-based coin, we


=== ERC-3754 ===
TITLE: A Vanilla Non-Fungible Token Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-08-21
REQUIRES: 

SUMMARY:
In this standard, a non-fungible token stands as atomic existence and encourages layers of abstraction built on top of it. Ideal for representing concepts

SPECIFICATION:
``` interface IERC3754 { event Transfer(address indexed from, address indexed to, uint256 indexed tokenId); event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

MOTIVATION:
Non-fungible tokens are popularized by the [ERC-721](./eip-721.md) NFT standard for representing "ownership over digital or physical assets". Over the course of development, reputable NFT

RATIONALE:
The NFTs defined in the [ERC-721](./eip-721.md) standard are already largely accepted and known as representing ownership of digital assets, and the NFTs by this


=== ERC-6821 ===
TITLE: Support ENS Name for Web3 URL
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-02
REQUIRES: 1, 3, 7, ,,  , 6, 3, 4, ,,  , 3, 7, 7, 0, ,,  , 4, 8, 0, 4

SUMMARY:
This standard defines the mapping from an Ethereum name service (ENS) name to an Ethereum address for [ERC-4804](./eip-4804.md).

SPECIFICATION:
Given **contractName** and **chainid** from a `web3://` URI defined in ERC-4804, the protocol will find the address of the contract using the following steps:

MOTIVATION:
ERC-4804 defines a `web3://`-scheme RFC 2396 URI to call a smart contract either by its address or a **name** from name service. If a

RATIONALE:
The standard uses `contentcontract` text record with ERC-3770 chain-specific address instead of `contenthash` so that the record is human-readable - a design principle of


=== ERC-7498 ===
TITLE: NFT Redeemables
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-28
REQUIRES: 1, 6, 5, ,,  , 7, 1, 2, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 1, 2, 7, 1

SUMMARY:
This specification introduces a new interface that extends [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) to enable the discovery and use of onchain and offchain redeemables for NFTs.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Creators frequently use NFTs to create redeemable entitlements for digital and physical goods. However, without a standard interface, it is challenging for users and

RATIONALE:
The "offer" and "consideration" structs from Seaport were used to create a similar language for redeemable campaigns. The "offer" is what is being offered,


=== ERC-5050 ===
TITLE: Interactive NFTs with Modular Environments
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-04-18
REQUIRES: 1, 6, 5, ,,  , 1, 7, 3, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 1, 8, 2, 0, ,,  , 4, 9, 0, 6

SUMMARY:
This standard defines a broadly applicable action messaging protocol for the transmission of user-initiated actions between tokens. Modular statefulness is achieved with optional state

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
Tokenized item standards such as [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md) serve as the objects of the Ethereum computing environment. A growing number of projects are seeking

RATIONALE:
The critical features of this interactive token standard are that it 1) creates a common way to define, advertise, and conduct object interaction, 2)


=== ERC-7803 ===
TITLE: EIP-712 Extensions for Account Abstraction
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-08
REQUIRES: 712

SUMMARY:
This ERC improves on [EIP-712] signatures to better support smart contract accounts by 1) introducing signing domains as a way to prevent replay attacks

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
### Signing Domains Standards like [ERC-1271] and [ERC-6492] give smart contract accounts (SCAs) the ability to produce signatures that an application can authenticate without

RATIONALE:
<!-- TODO -->


=== ERC-2520 ===
TITLE: Multiple contenthash records for ENS
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-02-18
REQUIRES: 1577

SPECIFICATION:
Setting and getting functions **MUST** have the same public interface as specified in EIP 1577. Additionally, they **MUST** also have new public interfaces introduced

MOTIVATION:
Many applications are resolving ENS names to content hosted on distributed systems. To do this, they use `contenthash` record from ENS domain to know

RATIONALE:
The proposed implementation was chosen because it is simple to implement and supports all important requested features. However, it doesn't support multiple records for


=== ERC-7760 ===
TITLE: Minimal Upgradeable Proxies
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-08-19
REQUIRES: 1967

SUMMARY:
This standard defines minimal [ERC-1967](./eip-1967.md) proxies for three patterns: (1) transparent, (2) UUPS, (3) beacon. The proxies support optional immutable arguments which are appended

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Having standardized minimal bytecode for upgradeable proxies enables the following: 1. Automatic verification on block explorers. 2. Ability for immutable arguments to be queried

RATIONALE:
### No usage of `PUSH0` opcode For more widespread EVM compatibility, the proxies deliberately do not use the `PUSH0` opcode proposed in [EIP-3855](./eip-3855.md). Converting


=== ERC-7506 ===
TITLE: Trusted Hint Registry
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-08-31
REQUIRES: 712

SUMMARY:
This EIP standardizes a system for managing on-chain metadata (hints), enabling claim interpretation, reliability, and verification. It structures these hints within defined namespaces and

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
In an increasingly interconnected and decentralized landscape, the formation of trust among entities remains a critical concern. Ecosystems, both on-chain and off-chain—spanning across businesses,

RATIONALE:
Examining the method signatures reveals a deliberate architecture and data hierarchy within this ERC: A namespace address maps to a hint list, which in


=== ERC-5115 ===
TITLE: SY Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-05-30
REQUIRES: 20

SUMMARY:
This standard proposes an API for wrapped yield-bearing tokens within smart contracts. It is an extension on the [ERC-20](./eip-20.md) token that provides basic functionality

SPECIFICATION:
### Generic Yield Generating Pool We will first introduce Generic Yield Generating Pool (GYGP), a model to describe most yield generating mechanisms in DeFi.

MOTIVATION:
Yield generating mechanisms are built in all shapes and sizes, necessitating a manual integration every time a protocol builds on top of another protocol’s

RATIONALE:
[ERC-20](./eip-20.md) is enforced because implementation details such as transfer, token approvals, and balance calculation directly carry over to the SY tokens. This standardization makes


=== ERC-1178 ===
TITLE: Multi-class Token Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-06-22
REQUIRES: 

SUMMARY:
This standard allows for the implementation of a standard API for multi-class fungible tokens (henceforth referred to as "MCFTs") within smart contracts. This standard

SPECIFICATION:
### ERC-20 Compatibility (partial) **name** ```solidity function name() constant returns (string name) ``` *OPTIONAL - It is recommended that this method is implemented for

MOTIVATION:
Currently, there is no standard to support tokens that have multiple classes. In the real world, there are many situations in which defining distinct

RATIONALE:
### Current Limitations The design of this project was motivated when I tried to create different classes of fungible ERC-721 tokens (an oxymoron) but


=== ERC-875 ===
TITLE: Simpler NFT standard with batching and native atomic swaps
TYPE: Standards Track ERC
STATUS: Withdrawn
CREATED: 2018-02-08
REQUIRES: 

SPECIFICATION:
### function name() constant returns (string name) returns the name of the contract e.g. CarLotContract ### function symbol() constant returns (string symbol) Returns a


=== ERC-7710 ===
TITLE: Smart Contract Delegation
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-05-20
REQUIRES: 1, 2, 7, 1, ,,  , 7, 5, 7, 9

SUMMARY:
This proposal introduces a standard way for smart contracts to delegate capabilities to other smart contracts or Externally Owned Accounts (EOAs). The delegating contract

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The development of smart contracts on Ethereum has led to a diverse array of decentralized applications (dApps) that leverage composability to interact with one

RATIONALE:
The design of this ERC is motivated by the need to introduce standardized, secure, and efficient mechanisms for delegation within the Ethereum ecosystem. Several


=== ERC-7832 ===
TITLE: Sustainable collaborative NFT collections
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-12-04
REQUIRES: 721


=== ERC-1753 ===
TITLE: Smart Contract Interface for Licences
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-02-06
REQUIRES: 

SUMMARY:
This Ethereum Improvement Proposal (EIP) proposes an Ethereum standard for the issuance of licences, permits and grants (Licences). A Licence is a limited and

SPECIFICATION:
### Methods **NOTES**: - The following specifications use syntax from Solidity `0.4.17` (or above) - Callers MUST handle `false` from `returns (bool success)`. Callers

MOTIVATION:
Governments are responsible for the issuance and management of Licences. However, maintaining and sharing this data can be complicated and inefficient. The granting of

RATIONALE:
The use of smart contracts to apply for, renew, suspend and revoke Licences will free up much needed government resources and allow for the


=== ERC-5633 ===
TITLE: Composable Soulbound NFT, EIP-1155 Extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-09-09
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This standard is an extension of [EIP-1155](./eip-1155.md). It proposes a smart contract interface that can represent any number of soulbound and non-soulbound NFT types.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The soulbound NFTs similar to World of Warcraft’s soulbound items are attracting more and more attention in the Ethereum community. In a real world

RATIONALE:
If all tokens in a contract are soulbound by default, `isSoulbound(uint256 id)` should return true by default during implementation.


=== ERC-7780 ===
TITLE: Validation Module Extension for ERC-7579
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-01
REQUIRES: 7579

SUMMARY:
This proposal introduces three new module types on top of the existing modules described in [ERC-7579](./eip-7579). The modules are policy, signer and stateless validator.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The modules introduced by this proposal aim to create more composability around signature and permission verification. Policy and signer modules allow an account to

RATIONALE:
TBD <!-- TODO -->


=== ERC-7513 ===
TITLE: Smart NFT - A Component for Intent-Centric
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-06
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
Smart NFT is the fusion of Smart Contract and NFT. An NFT with the logic of a Smart Contract can be executed, enabling on-chain

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to

MOTIVATION:
Ethereum introduces smart contracts revolutionized the blockchain and paved the way for the flourishing ecosystem of decentralized applications (dApps). Also, the concept of non-fungible

RATIONALE:
### Why using ERC-1155 In the technical implementation aspect, we chose to use [ERC-1155](./eip-1155.md) as the main contract for NFTs due to the consideration


=== ERC-1923 ===
TITLE: zk-SNARK Verifier Registry Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-12-22
REQUIRES: 1, 6, 5, ,,  , 1, 9, 6, ,,  , 1, 9, 7

SUMMARY:
The following standard allows for the implementation of a standard contract API for the registration of zk-SNARKs ("Zero-Knowledge Succinct Non-Interactive Arguments of Knowledge"), also

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
zk-SNARKs are a promising area of interest for the Ethereum community. Key applications of zk-SNARKs include: - Private transactions - Private computations - Ethereum

RATIONALE:
⚠️ TODO: Add Rationale section. ### Backwards Compatibility ⚠️ TODO: Add Backwards Compatibility section. ### Test Cases Truffle tests of example implementations are included


=== ERC-7632 ===
TITLE: Interfaces for Named Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-08
REQUIRES: 165

SUMMARY:
Extends tokens using `uint256 tokenId` to support `tokenName` in type `string` and be able to convert backward to `tokenId`.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
For Marketplaces, Explorers, Wallets, DeFi and dApps to better display and operate NFTs that comes with a name.

RATIONALE:
1. We allow default way to map `tokenId` and `tokenName` for convenience, but we also allow contract to implement their own way to map


=== ERC-4353 ===
TITLE: Interface for Staked Tokens in NFTs
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-10-08
REQUIRES: 165

SUMMARY:
[EIP-721](./eip-721.md) tokens can be deposited or staked in NFTs for a variety of reasons including escrow, rewards, benefits, and others. There is currently no

SPECIFICATION:
```solidity // SPDX-License-Identifier: CC0-1.0 pragma solidity ^0.8.0; /** * @dev Interface of the ERC4353 standard, as defined in the * https://eips.ethereum.org/EIPS/eip-4353. * * Implementers

MOTIVATION:
Without staked token data, the actual amount of staked tokens cannot be conveyed from token owners to other users, and cannot be displayed in

RATIONALE:
This standard is completely agnostic to how tokens are deposited or handled by the NFT. It is, therefore, the choice and responsibility of the


=== ERC-3561 ===
TITLE: Trust Minimized Upgradeability Proxy
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-05-09
REQUIRES: 

SUMMARY:
Removing trust from upgradeability proxy is necessary for anonymous developers. In order to accomplish this, instant and potentially malicious upgrades must be prevented. This

SPECIFICATION:
The specification is an addition to the standard [EIP-1967](./eip-1967.md) transparent proxy design. The specification focuses on the slots it adds. All admin interactions with

MOTIVATION:
Anonymous developers who utilize upgradeability proxies typically struggle to earn the trust of the community. Fairer, better future for humanity absolutely requires some developers

RATIONALE:
An argument "just don't make such contracts upgadeable at all" fails when it comes to complex systems which do or do not heavily rely


=== ERC-4524 ===
TITLE: Safer ERC-20
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-12-05
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
This standard extends [ERC-20](./eip-20.md) tokens with [EIP-165](./eip-165.md), and adds familiar functions from [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) ensuring receiving contracts have implemented proper functionality.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
[EIP-165](./eip-165.md) adds (among other things) the ability to tell if a target recipient explicitly signals compatibility with an ERC. This is already used in

RATIONALE:
This EIP is meant to be minimal and straightforward. Adding EIP-165 to ERC-20 is useful for a number of applications, and outside of a


=== ERC-7744 ===
TITLE: Code Index
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2024-07-16
REQUIRES: 

SUMMARY:
This EIP defines a standard interface for indexing smart contracts on Ethereum by their bytecode hash. This enables trustless discovery and verification of contract

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Existing contract discovery relies on addresses, which are non-deterministic and can be obfuscated through proxies. Indexing by bytecode hash provides a deterministic and tamper-proof

RATIONALE:
**Bytecode over Addresses**: Bytecode is deterministic and can be verified on-chain, while addresses are opaque and mutable. **Reverting on re-indexing**: There is small, yet


=== ERC-6981 ===
TITLE: Reserved Ownership Accounts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-25
REQUIRES: 1, 1, 6, 7, ,,  , 1, 2, 7, 1, ,,  , 6, 4, 9, 2

SUMMARY:
The following specifies a system for services to link their users to a claimable Ethereum address. Services can provide a signed message and unique

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
It is common for web services to allow their users to hold on-chain assets via custodial wallets. These wallets are typically EOAs, deployed smart

RATIONALE:
### Service-Owned Registry Instances While it might seem more user-friendly to implement and deploy a universal registry for reserved ownership accounts, we believe that


=== ERC-7785 ===
TITLE: Onchain registration of chain identifiers
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-09-26
REQUIRES: 2304

SUMMARY:
This ERC proposes to derive chain identifiers as a digest of their chain name (and other information) and to use ENS to map chain

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The mapping between chain names and identifiers, such as `Mainnet -> 0x1`, is currently maintained in a centralized list. However this solution has two

RATIONALE:
<!-- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate


=== ERC-5643 ===
TITLE: Subscription NFTs
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-09-10
REQUIRES: 721

SUMMARY:
This standard is an extension of [EIP-721](./eip-721.md). It proposes an additional interface for NFTs to be used as recurring, expirable subscriptions. The interface includes

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
NFTs are commonly used as accounts on decentralized apps or membership passes to communities, events, and more. However, it is currently rare to see

RATIONALE:
This standard aims to make on-chain subscriptions as simple as possible by adding the minimal required functions and events for implementing on-chain subscriptions. It


=== ERC-1062 ===
TITLE: Formalize IPFS hash into ENS(Ethereum Name Service) resolver
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-02
REQUIRES: 

SUMMARY:
The following standard details the implementation of how to combine the IPFS cryptographic hash unique fingerprint with ENS public resolver. This standard provides a

SPECIFICATION:
The condition now is that the IPFS file fingerprint using base58 and in the meantime, the Ethereum uses hex in API to encode the

MOTIVATION:
To build a fully decentralized web service, it’s necessary to have a decentralized file storage system. Here comes the IPFS, for three following advantages

RATIONALE:
To implement the specification, need two methods from ENS public resolver contract, when we want to store IPFS file fingerprint to contract, convert the


=== ERC-7603 ===
TITLE: ERC-1155 Multi-Asset extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-01-25
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
The Multi-Asset Token standard, compatible with [ERC-1155](./eip-1155.md), facilitates the development of a new fundamental component: the context-dependent data output for each collection. The context-dependent

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
With ERC-1155 compatible tokens being a widespread form of tokens in the Ethereum ecosystem and being used for various use cases, it is time

RATIONALE:
TBD <!-- TODO -->


=== ERC-6381 ===
TITLE: Public Non-Fungible Token Emote Repository
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-01-22
REQUIRES: 165

SUMMARY:
The Public Non-Fungible Token Emote Repository standard provides an enhanced interactive utility for [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) by allowing NFTs to be emoted at. This

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time

RATIONALE:
Designing the proposal, we considered the following questions: 1. **Does the proposal support custom emotes or only the Unicode specified ones?**\ The proposal only


=== ERC-7548 ===
TITLE: Open IP Protocol built on NFTs
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-10-31
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal aims to establish a standardized method for creating new intellectual properties (IPs) by remixing multiple existing IPs in a decentralized manner. The

SPECIFICATION:
The keywords “MUST,” “MUST NOT,” “REQUIRED,” “SHALL,” “SHALL NOT,” “SHOULD,” “SHOULD NOT,” “RECOMMENDED,” “MAY,” and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
The internet is flooded with fresh content every day, but with the traditional IP infrastructure, IP registration and licensing is a headache for digital

RATIONALE:
The Open IP Protocol is built on the "1 premise, 2 extensions, 1 constant" principle. The “1 premise” means that for any IP in


=== ERC-7564 ===
TITLE: Contract wallet management NFT
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-11-21
REQUIRES: 165

SUMMARY:
This proposal introduces a smart contract wallet-based approach for managing NFTs, focusing on utilizing the programmable features of smart contract wallets for NFT asset

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
An externally-owned account (EOA) wallet has no state and code storage, while the smart contract wallet does. Account abstraction (AA) is a direction of

RATIONALE:
the key technical decisions in this proposal are: **Improved Approve Mechanism** - **Current vs. Proposed**: In the existing ERC-721 system, an externally-owned account (EOA)


=== ERC-7821 ===
TITLE: Minimal Batch Executor Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-11-21
REQUIRES: 7579

SUMMARY:
This proposal defines a minimal batch executor interface for delegations. A delegation is a smart contract that implements logic which other smart contracts can

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
With the advent of [EIP-7702](./eip-7702), it is possible for Externally Owned Accounts (EOAs) to perform atomic batched executions. We anticipate that there will be

RATIONALE:
We aim for radical minimalism to keep the standard as left-curved as possible. Simplicity is the key to adoption. Our North Star is to


=== ERC-6315 ===
TITLE: ERC-2771 Namespaced Account Abstraction
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-01-11
REQUIRES: 1, 6, 5, ,,  , 2, 7, 7, 1

SUMMARY:
[ERC-2771](./eip-2771.md) is a prevalent standard for handling meta-transactions via trusted forwarders. This EIP proposes an extension to [ERC-2771](./eip-2771.md) to introduce a namespacing mechanism, facilitating

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

RATIONALE:
The approach of simply augmenting existing EIP functions with new `address` parameters, rather than crafting new interfaces for the most commonly used EIPs, is


=== ERC-7613 ===
TITLE: Puppet Proxy Contract
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-04
REQUIRES: 

SUMMARY:
A puppet is a contract that, when called, acts like an empty account. It doesn't do anything and it has no API, except when

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
A puppet can be used as an alternative account of its deployer. It has a different address, so it has a separate set of

RATIONALE:
The main goals of the puppet design are low cost and modularity. It should be cheap to deploy and cheap to interact with. The


=== ERC-1948 ===
TITLE: Non-fungible Data Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-04-18
REQUIRES: 721

SUMMARY:
Non-fungible tokens (NFTs) are extended with the ability to store dynamic data. A 32 bytes data field is added and a read function allows

SPECIFICATION:
An extension of [ERC-721](./eip-721.md) interface with the following functions and events is suggested: ``` solidity pragma solidity ^0.5.2; /** * @dev Interface of the

MOTIVATION:
The proposal is made to standardize on tokens with dynamic data. Interactions with bridges for side-chains like xDAI or Plasma chains will profit from

RATIONALE:
The suggested data field in the NFT is used either for storing data directly, like a counter or address. If more data is required


=== ERC-1620 ===
TITLE: Money Streaming
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-24
REQUIRES: 

SUMMARY:
The following describes a standard whereby time is measured using block numbers and streams are mappings in a master contract. 1. A provider sets

SPECIFICATION:
### Structs The structure of a `stream` should be as follows: - `stream` - `sender`: the `address` of the entity funding the stream -

MOTIVATION:
This standardised interface aims to change the way we think about long-term financial commitments. Thanks to blockchains, payments need not be sent in chunks

RATIONALE:
This specification was designed to serve as an entry point to the quirky concept of money as a function of time and it is


=== ERC-3772 ===
TITLE: Compressed Integers
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-08-27
REQUIRES: 

SUMMARY:
This document specifies compression of `uint256` to smaller data structures like `uint64`, `uint96`, `uint128`, for optimizing costs for storage. The smaller data structure (represented

SPECIFICATION:
In this specification, the structure for representing a compressed value is represented using `cintx`, where x is the number of bits taken by the

MOTIVATION:
- Storage is costly, each storage slot costs almost $0.8 to initialize and $0.2 to update (20 gwei, 2000 ETHUSD). - Usually, we store

RATIONALE:
- The `significant` bits are stored in the most significant part of `cintx` while `shift` bits in the least significant part, to help prevent


=== ERC-6120 ===
TITLE: Universal Token Router
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-12-12
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 0, 1, 4, ,,  , 1, 1, 5, 5

SUMMARY:
ETH is designed with *transfer-and-call* as the default behavior in a transaction. Unfortunately, [ERC-20](./eip-20.md) is not designed with that pattern in mind and newer

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to

MOTIVATION:
When users approve their tokens to a contract, they trust that: * it only spends the tokens with their permission (from `msg.sender` or `ecrecover`)

RATIONALE:
The `Permit` type signature is not supported since the purpose of the Universal Token Router is to eliminate all interactive `approve` signatures for new


=== ERC-7715 ===
TITLE: Grant Permissions from Wallets
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-05-24
REQUIRES: 4, 3, 3, 7, ,,  , 5, 7, 9, 2, ,,  , 7, 6, 7, 9, ,,  , 7, 7, 1, 0

SUMMARY:
We define a new JSON-RPC method `wallet_grantPermissions` for DApp to request a Wallet to grant permissions in order to execute transactions on the user’s

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Currently most DApps implement a flow similar to the following: ![Wallet Approve Flow](../assets/eip-7715/approve-flow.svg) Each interaction requires the user to sign a transaction with their

RATIONALE:
The typical transaction flow of `suggesting transactions => approving transactions => sending transactions` is deeply limiting in several ways: - Users must be online


=== ERC-2771 ===
TITLE: Secure Protocol for Native Meta Transactions
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-07-01
REQUIRES: 

SUMMARY:
This EIP defines a contract-level protocol for `Recipient` contracts to accept meta-transactions through trusted `Forwarder` contracts. No protocol changes are made. `Recipient` contracts are

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
There is a growing interest in making it possible for Ethereum contracts to accept calls from externally owned accounts that do not have ETH

RATIONALE:
* Make it easy for contract developers to add support for meta transactions by standardizing the simplest viable contract interface. * Without support for


=== ERC-2678 ===
TITLE: Revised Ethereum Smart Contract Packaging Standard (EthPM v3)
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-05-26
REQUIRES: 

SUMMARY:
This EIP defines a data format for *package manifest* documents, representing a package of one or more smart contracts, optionally including source code and

MOTIVATION:
This standard aims to encourage the Ethereum development ecosystem towards software best practices around code reuse. By defining an open, community-driven package data format

RATIONALE:
### Minification EthPM packages are distributed as alphabetically-ordered & minified JSON to ensure consistency. Since packages are published on content-addressable filesystems (eg. IPFS), this


=== ERC-7511 ===
TITLE: Minimal Proxy Contract with PUSH0
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-04
REQUIRES: 7, ,,  , 2, 1, 1, ,,  , 1, 1, 6, 7, ,,  , 3, 8, 5, 5

SUMMARY:
With the `PUSH0` opcode ([EIP-3855](./eip-3855.md)), introduced with the Shanghai upgrade, we optimized the previous Minimal Proxy Contract ([ERC-1167](./eip-1167.md)) by 200 gas at deployment and

SPECIFICATION:
### Standard Proxy Contract The exact runtime code for the minimal proxy contract with `PUSH0` is: ``` 365f5f375f5f365f73bebebebebebebebebebebebebebebebebebebebe5af43d5f5f3e5f3d91602a57fd5bf3 ``` where the bytes at indices

MOTIVATION:
1. Reduce the contract bytecode size by `1` byte by removing a redundant `SWAP` opcode. 2. Reduce the runtime gas by replacing two `DUP`

RATIONALE:
The optimized contract is constructed with essential components of the proxy contract and incorporates the recently added `PUSH0` opcode. The core elements of the


=== ERC-7508 ===
TITLE: Dynamic On-Chain Token Attributes Repository
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-08-15
REQUIRES: 165

SUMMARY:
The Public On-Chain Non-Fungible Token Attributes Repository standard provides the ability for [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) compatible tokens to store their attributes on-chain available to

SPECIFICATION:
### Interface The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time

RATIONALE:
Designing the proposal, we considered the following questions: 1. **Should we refer to the values stored by the repository as propertiers or attributes?**\ Historically


=== ERC-5247 ===
TITLE: Smart Contract Executable Proposal Interface
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-07-13
REQUIRES: 

SUMMARY:
This EIP presents an interface for "smart contract executable proposals": proposals that are submitted to, recorded on, and possibly executed on-chain. Such proposals include

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
It is oftentimes necessary to separate the code that is to be executed from the actual execution of the code. A typical use case

RATIONALE:
* Originally, this interface was part of part of `ERC-1202`. However, the proposal itself can potentially have many use cases outside of voting. It


=== ERC-7160 ===
TITLE: ERC-721 Multi-Metadata Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-06-09
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This EIP proposes an extension to the [ERC-721](./eip-721.md) standard to support multiple metadata URIs per token. It introduces a new interface, `IERC721MultiMetadata`, which provides

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The current [ERC-721](./eip-721.md) standard allows for a single metadata URI per token with the `ERC721Metadata` implementation. However, there are use cases where multiple metadata

RATIONALE:
Similar terminology to [ERC-721](./eip-721.md) was used in order to keep fetching metadata familiar. The concept of pinning and unpinning metadata is introduced as it


=== ERC-7561 ===
TITLE: Simple NFT, Simplified ERC-721
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-10-29
REQUIRES: 721

SUMMARY:
This ERC is a new NFT asset designed based on the user contract wallet (including account abstraction), and is forward compatible with [ERC-721](./eip-721.md). To

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[ERC-721](./eip-721.md) defines Ethereum-based standard NFT that can be traded and transferred, but the essence of ERC-721 is based on the externally-owned account (EOA) wallet

RATIONALE:
The proposal is to simplify NFT standards by removing `approve`, `setApprovalForAll`, `getApproved`, `isApprovedForAll` and `safeTransferFrom` functions. This simplification aims to enhance security, reduce complexity,


=== ERC-7794 ===
TITLE: Grant Registry
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-10-22
REQUIRES: 

SUMMARY:
This proposal introduces a Grant Registry contract intended for managing financial, research, or project-based grants that provide funding for projects across multiple blockchains. The

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The Ethereum ecosystem currently lacks a standardized way to manage and track grants across different chains and programs, leading to inefficiencies and fragmentation. Each

RATIONALE:
The design of this Grant Registry Contract is driven by the need for a flexible and modular system that supports a wide range of


=== ERC-7699 ===
TITLE: ERC-20 Transfer Reference Extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-26
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
The [ERC-20](./eip-20.md) token standard does not provide a built-in mechanism for including a payment transfer reference (message for recipient) in token transfers. This proposal

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The primary motivation for this proposal is to improve the functionality of the ERC-20 token standard by providing a mechanism for including a payment

RATIONALE:
### Parameter name The choice to name the added parameter `transferReference` was made to align with traditional banking terminology, where payment references are widely


=== ERC-3224 ===
TITLE: Described Data
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-01-23
REQUIRES: 191

SUMMARY:
Human-readable descriptions for machine executable operations, described in higher level machine readable data, so that wallets can provide meaningful feedback to the user describing

SPECIFICATION:
The **description string** and **described data** are generated simultaneously by evaluating the contract (i.e. the **describer**), passing the **describer inputs** to the method: ```solidity

MOTIVATION:
When using an Ethereum Wallet (e.g. MetaMask, Clef, Hardware Wallets) users must accept and authorize signing messages or sending transactions. Due to the complexity

RATIONALE:
### Meta Description There have been many attempts to solve this problem, many of which attempt to examine the encoded transaction data or message


=== ERC-7144 ===
TITLE: ERC-20 with transaction validation step.
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-05-07
REQUIRES: 20

SUMMARY:
This standard is an extension of [ERC-20](./eip-20.md). It defines new validation functionality to avoid wallet draining: every `transfer` or `approve` will be locked waiting

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
The power of the blockchain is at the same time its weakness: giving the user full responsibility for their data. Many cases of Token

RATIONALE:
### Universality The standard only defines the validation functions, but not how they should be used. It defines the validations as internal and lets


=== ERC-1581 ===
TITLE: Non-wallet usage of keys derived from BIP-32 trees
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-13
REQUIRES: 

SUMMARY:
BIP32 defines a way to generate hierarchical trees of keys which can be derived from a common master key. BIP32 and [BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) defines the

SPECIFICATION:
### Path levels We define the following levels in BIP32 path: ```m / purpose' / coin_type' / subpurpose' / key_type' / key_index``` Apostrophe in

MOTIVATION:
Applications interacting with the blockchain often make use of additional, non-blockchain technologies to perform the task they are designed for. For privacy and security

RATIONALE:
The structure proposed above follows the BIP43 generic structure and is similar to the widely adopted BIP44 specification.


=== ERC-5639 ===
TITLE: Delegation Registry
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-09-09
REQUIRES: 

SUMMARY:
This EIP describes the details of the Delegation Registry, a proposed protocol and ABI definition that provides the ability to link one or more

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Proving ownership of an asset to a third party application in the Ethereum ecosystem is common. Users frequently sign payloads of data to authenticate

RATIONALE:
### Allowing for vault, contract or token level delegation In order to support a wide range of delegation use cases, the proposed specification allows


=== ERC-5744 ===
TITLE: Latent Fungible Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-09-29
REQUIRES: 2, 0, ,,  , 2, 6, 1, 2

SUMMARY:
The following standard is an extension of [EIP-20](./eip-20.md) that enables tokens to become fungible after some initial non-fungible period. Once minted, tokens are non-fungible

SPECIFICATION:
All latent fungible tokens MUST implement EIP-20 to represent the token. The `balanceOf` and `totalSupply` return quantities for all tokens, not just the matured,

MOTIVATION:
Example use cases include: - Receipt tokens that do not become active until a certain date or condition is met. For example, this can

RATIONALE:
The `mints` method is optional because the ID is optional. In some use cases such as vesting where a user may have a maximum


=== ERC-884 ===
TITLE: DGCL Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-02-14
REQUIRES: 

SUMMARY:
The recently amended 'Title 8 of the Delaware Code Relating to the General Corporation Law' now explicitly allows for the use of blockchains to

SPECIFICATION:
The `ERC-20` token provides the following basic features: contract ERC20 { function totalSupply() public view returns (uint256); function balanceOf(address who) public view returns (uint256);

MOTIVATION:
1. Delaware General Corporation Law requires that shares issued by a Delaware corporation be recorded in a share registry. 2. The share registry can

RATIONALE:
The proposed standard offers as minimal an extension as possible over the existing `ERC-20` standard in order to conform to the requirements of The


=== ERC-4987 ===
TITLE: Held token interface
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-09-21
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
The proposed standard defines a lightweight interface to expose functional ownership and balances of held tokens. A held token is a token owned by

SPECIFICATION:
Smart contracts implementing the `ERC20` held token standard MUST implement all of the functions in the `IERC20Holder` interface. Smart contracts implementing the `ERC20` held

MOTIVATION:
As different areas of crypto (DeFi, NFTs, etc.) converge and composability improves, there will more commonly be a distinction between the actual owner (likely

RATIONALE:
This interface is designed to be extremely lightweight and compatible with any existing token contract. Any token holder contract likely already stores all relevant


=== ERC-5625 ===
TITLE: NFT Metadata JSON Schema dStorage Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-08
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP extends the NFT metadata JSON schema defined in [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md), adding a `dStorage` key that provides information about how the NFT

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
As highly valuable crypto properties, NFT assets intrinsically demand guaranteed storage to assure their **immutability**, **reliability**, and **durability**. NFT ownership is tracked by [EIP-721](./eip-721.md)

RATIONALE:
### Choice between Interface and JSON Schema Extension An extension of the EIP-721 or EIP-1155 contract interfaces would unnecessarily require additional code to implement,


=== ERC-7509 ===
TITLE: Entity Component System
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-05
REQUIRES: 

SUMMARY:
This proposal defines a minimal Entity Component System (ECS). Entities are unique identities that are assigned to multiple components (data) and then processed using

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

RATIONALE:
### Why include type information instead of simple byte arrays? This is to ensure the correctness of types when using components, in order to


=== ERC-7562 ===
TITLE: Account Abstraction Validation Scope Rules
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-01
REQUIRES: 

SUMMARY:
This document describes the rules Account Abstraction protocols should follow, during the validation phase of Account Abstraction transactions, such as [ERC-4337](./eip-4337) `UserOperation` or RIP-7560

SPECIFICATION:
### Validation Rules Types We define two types of validation rules: **network-wide rules** and **local rules**. A violation of any validation rule by a

MOTIVATION:
With Account-Abstraction, instead of hard-coded logic for processing a transaction (validation, gas-payment, and execution), this logic is executed by EVM code. The benefits for

RATIONALE:
All transactions initiated by EOAs have an implicit validation phase where balance, nonce, and signature are checked to be valid for the current state


=== ERC-897 ===
TITLE: DelegateProxy
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-02-21
REQUIRES: 

SUMMARY:
Using proxies that delegate their own logic to another contract is becoming an increasingly popular technique for both smart contract upgradeability and creating cheap


=== ERC-7015 ===
TITLE: NFT Creator Attribution
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-05-11
REQUIRES: 5, 5, ,,  , 1, 5, 5, ,,  , 7, 1, 2, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This Ethereum Improvement Proposal aims to solve the issue of creator attribution for Non-Fungible Token (NFT) standards ([ERC-721](./eip-721.md), [ERC-1155](./eip-1155.md)). To achieve this, this EIP

SPECIFICATION:
The keywords “MUST,” “MUST NOT,” “REQUIRED,” “SHALL,” “SHALL NOT,” “SHOULD,” “SHOULD NOT,” “RECOMMENDED,” “MAY,” and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
Current NFT platforms assume that the wallet deploying the smart contract is the creator of the NFT, leading to a misattribution in cases where

RATIONALE:
By standardizing the `CreatorAttribution` event, this EIP enables platforms to ascertain creator attribution without relying on implicit assumptions. Establishing a standard for creator attribution


=== ERC-5094 ===
TITLE: URL Format for Ethereum Network Switching
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-05-13
REQUIRES: 6, 8, 1, ,,  , 8, 3, 1

SUMMARY:
This standard includes all needed information for adding a network to a wallet via URL, by including parameters such as `chainId`, `rpc_url`, `chain_name` and

SPECIFICATION:
### Syntax Network Switching URLs contain "ethereum" in their schema (protocol) part and are constructed as follows: network_add = erc831_part "add" "@" chain_id [

MOTIVATION:
As observed with the use of [EIP-681](./eip-681.md) and its implementation in current mobile wallets, transactions can be made, approved, viewed, and used. However, if

RATIONALE:
In furtherance of the Ethereum URL saga, network configuration is a needed addition to the possibility of Ethereum URLs. This would improve functionality for


=== ERC-7930 ===
TITLE: Interoperable Addresses
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-02-02
REQUIRES: 

SUMMARY:
Interoperable Addresses is a binary format to describe an address specific to one chain with a companion 'Interoperable Names' specification for human-readable display. This

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Current Ethereum addresses ([ERC-55]) lack chain specificity and have optional checksums, creating several challenges: - Optional checksum validation allows mistyped addresses to be accepted

RATIONALE:
- Chain and address fields' syntax is deliberately chosen to be able to express [CAIP-2] namespaces (by using the `@` symbol for the separator,


=== ERC-7751 ===
TITLE: Wrapping of bubbled up reverts
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2024-08-06
REQUIRES: 

SUMMARY:
This ERC proposes a standard for handling bubbled up reverts in Ethereum smart contracts using a dedicated custom error. This standard aims to improve

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Currently, when a smart contract calls another and the called contract reverts, the revert reason is usually bubbled up and thrown as is. This

RATIONALE:
By including the called contract and function, raw revert bytes and additional context, developers can provide more detailed information about the failure. Additionally, by


=== ERC-6808 ===
TITLE: Fungible Key Bound Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-03-31
REQUIRES: 20

SUMMARY:
A standard interface for Fungible Key Bound Tokens (**FKBT/s**), a subset of the more general Key Bound Tokens (**KBT/s**). The following standardizes an API

SPECIFICATION:
### `IKBT20` (Token Contract) **NOTES**: - The following specifications use syntax from Solidity `0.8.0` (or above) - Callers MUST handle `false` from `returns (bool

MOTIVATION:
In this fast-paced technologically advancing world, people learn and mature at different speeds. The goal of global adoption must take into consideration the target

RATIONALE:
The intent from individual technical decisions made during the development of **FKBTs** focused on maintaining consistency and backward compatibility with ERC-20s, all the while


=== ERC-1202 ===
TITLE: Voting Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2018-07-08
REQUIRES: 5269

SUMMARY:
This EIP is an API for implementing voting with smart contract. This standard provides functionalities to voting as well as to view the vote

SPECIFICATION:
1. Compliant contracts MUST implement the `IERC1202Core` below ```solidity interface IERC1202Core { event VoteCast( address indexed voter, uint256 indexed proposalId, uint8 support, uint256 weight,

MOTIVATION:
Voting is one of the earliest example of EVM programming, and also a key to DAO/organizational governance process. We foresee many DAOs will ultimately

RATIONALE:
We made the following design decisions and here are the rationales. ### Granularity and Anonymity We created a `view` function `ballotOf` primarily making it


=== ERC-7721 ===
TITLE: Lockable Extension for ERC-1155
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-05-25
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
The Lockable Extension for [ERC-1155](./eip-1155.md) introduces a robust locking mechanism for specific Non-Fungible Tokens (NFTs) within the ERC-1155 token standard, allowing for various uses

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[ERC-1155](./eip-1155.md) has sparked an unprecedented surge in demand for NFTs. However, despite this tremendous success, the NFT economy suffers from secondary liquidity where it

RATIONALE:
This proposal exposes `transferAndLock(address from, address to, uint256 tokenId, uint256 amount, bool setApprove)` which can be used to transfer token and lock at the


=== ERC-4546 ===
TITLE: Wrapped Deposits
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-12-11
REQUIRES: 

SUMMARY:
The wrapped deposit contract handles deposits of assets (Ether, [ERC-20](./eip-20.md), [ERC-721](./eip-721.md)) on behalf of a user. A user must only approve a spend limit

SPECIFICATION:
The wrapped deposit contract SHOULD be deployed at an identifiable address (e.g. `0x1111119a9e30bceadf9f939390293ffacef93fe9`). The contract MUST be non-upgradable with no ability for state variables

MOTIVATION:
The current user flow for depositing assets in dapps is unnecessarily expensive and insecure. To deposit an ERC-20 asset a user must either: -

RATIONALE:
Having a single contract that processes all token transfers allows users to submit a single approval per token to deposit to any number of


=== ERC-6823 ===
TITLE: Token Mapping Slot Retrieval Extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-29
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
The aim of this proposal is to enhance the precision of off-chain simulations for transactions that involve contracts complying with the [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), or

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be

MOTIVATION:
To understand the rationale behind this proposal, it's important to remember how values and mapping are stored in the storage layout. This procedure is

RATIONALE:
The idea behind the implementation was to find an elegant and concise way that avoided any breaking changes with the current standard. Moreover, since


=== ERC-7741 ===
TITLE: Authorize Operator
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-06-03
REQUIRES: 7, 1, 2, ,,  , 1, 2, 7, 1

SUMMARY:
A set of functions to enable meta-transactions and atomic interactions with contracts implementing an operator model, via signatures conforming to the [EIP-712](./eip-712.md) typed message

SPECIFICATION:
### Operator-compatible contracts This signed authorization scheme applies to any contracts implementing the following interface: ```solidity interface IOperator { event OperatorSet(address indexed owner, address

MOTIVATION:
The primary motivation for this standard is to enhance the flexibility, security, and efficiency of operator management. By leveraging EIP-712 signatures, this standard allows

RATIONALE:
### Similarity to [ERC-2612](./eip-2612.md) The specification is intentionally designed to closely match [ERC-2612](./eip-2612.md). This should simplify new integrations of the standard. The main difference


=== ERC-5058 ===
TITLE: Lockable Non-Fungible Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-04-30
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
We propose to extend the [EIP-721](./eip-721.md) standard with a secure locking mechanism. The NFT owners approve the operator to lock the NFT through `setLockApprovalForAll()`

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
NFTs, enabled by [EIP-721](./eip-721.md), have exploded in demand. The total market value and the ecosystem continue to grow with more and more blue chip

RATIONALE:
### NFT lock approvals An NFT owner can give another trusted operator the right to lock his NFT through the approve functions. The `lockApprove()`


=== ERC-7644 ===
TITLE: ERC-721 Name Registry Extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-03-01
REQUIRES: 721

SUMMARY:
This extension defines an interface that adds a naming mechanism to [ERC-721](./eip-721.md) tokens. It allows each token to have a unique name with a

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
As decentralized domain registration methods evolve with the integration of NFTs, we see an opportunity to extend this paradigm to the realm of usernames.

RATIONALE:
#### Name Expiry By implementing expiration periods for usernames, we introduce several advantages. This mechanism ensures a dynamic environment where unused or outdated usernames


=== ERC-5573 ===
TITLE: Sign-In with Ethereum Capabilities, ReCaps
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2021-07-20
REQUIRES: 4361

SUMMARY:
[ERC-4361](./eip-4361.md), or Sign-In with Ethereum (SIWE), describes how Ethereum accounts authenticate with off-chain services. This proposal, known as ReCaps, describes a mechanism on top

SPECIFICATION:
This specification has three different audiences: - Web3 application developers that want to integrate ReCaps to authenticate with any protocols and APIs that support

MOTIVATION:
SIWE ReCaps unlock integration of protocols and/or APIs for developers by reducing user friction, onchain state and increasing security by introducing informed consent and

RATIONALE:
TBD


=== ERC-2615 ===
TITLE: Non-Fungible Token with mortgage and rental functions
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-04-25
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of ERC721. It proposes additional roles, the right of tenants to enable rentals, and the right of lien. With

SPECIFICATION:
This standard proposes three user roles: the **Lien Holder**, the **Owner**, and the **User**. Their rights are as follows: - A **Lien Holder** has

MOTIVATION:
It has been challenging to implement rental and mortgage functions with the ERC721 standard because it only has one role defined (which is the

RATIONALE:
There have been some attempts to achieve rentals or mortgages with ERC721. However, as I noted before, it has been challenging to achieve. I


=== ERC-1078 ===
TITLE: Universal login / signup using ENS subdomains
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-04
REQUIRES: 1, 9, 1, ,,  , 6, 8, 1, ,,  , 7, 2, 5, ,,  , 1, 0, 7, 7

SUMMARY:
This presents a method to replace the usual signup/login design pattern with a minimal ethereum native scheme, that doesn’t require passwords, backing up private


=== ERC-918 ===
TITLE: Mineable Token Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-03-07
REQUIRES: 

SUMMARY:
This specification describes a method for initially locking tokens within a token contract and slowly dispensing them with a mint() function which acts like

SPECIFICATION:
#### Interface The general behavioral specification includes a primary function that defines the token minting operation, an optional merged minting operation for issuing multiple

MOTIVATION:
Token distribution via the ICO model and its derivatives is susceptible to illicit behavior by human actors. Furthermore, new token projects are centralized because

RATIONALE:
The solidity keccak256 algorithm does not have to be used, but it is recommended since it is a cost effective one-way algorithm to perform


=== ERC-831 ===
TITLE: URI Format for Ethereum
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-01-15
REQUIRES: 6, 7, ,,  , 6, 8, 1

SUMMARY:
URIs embedded in QR-codes, hyperlinks in web-pages, emails or chat messages provide for robust cross-application signaling between very loosely coupled applications. A standardized URI

SPECIFICATION:
### Syntax Ethereum URIs contain "ethereum" or "eth" in their schema (protocol) part and are constructed as follows: request = "eth" [ "ereum" ]

RATIONALE:
The need for this ERC emerged when refining EIP-681. We need a container that does not carry the weight of the use-cases. EIP-67 was


=== ERC-6909 ===
TITLE: Minimal Multi-Token Interface
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-04-19
REQUIRES: 165

SUMMARY:
The following specifies a multi-token contract as a simplified alternative to the [ERC-1155](./eip-1155.md) Multi-Token Standard. In contrast to ERC-1155, callbacks and batching have been

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The ERC-1155 standard includes unnecessary features such as requiring recipient accounts with code to implement callbacks returning specific values and batch-calls in the specification.

RATIONALE:
### Granular Approvals While the "operator model" from the ERC-1155 standard allows an account to set another account as an operator, giving full permissions


=== ERC-2470 ===
TITLE: Singleton Factory
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-01-15
REQUIRES: 1014

SUMMARY:
Some contracts are designed to be Singletons which have the same address no matter what chain they are, which means that should exist one

SPECIFICATION:
### [ERC-2470] Singleton Factory > This is an exact copy of the code of the [ERC2470 factory smart contract]. ```solidity pragma solidity 0.6.2; /**

MOTIVATION:
Code reuse, using the factory becomes easier to deploy singletons.

RATIONALE:
SingletonFactory does not allow sending value on create2, this was done to prevent different results on the created object. SingletonFactory allows user defined salt


=== ERC-7682 ===
TITLE: Auxiliary Funds Capability
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-09
REQUIRES: 5792

SUMMARY:
An [EIP-5792](./eip-5792.md) compliant capability that allows wallets to indicate to apps that they have access to funds beyond those that can be accounted for

SPECIFICATION:
One new [EIP-5792](./eip-5792.md) wallet capability is defined. ### Wallet Implementation To conform to this specification, wallets that wish to indicate that they have access

MOTIVATION:
Many applications check users' balances before letting them complete some action. For example, if a user wants to swap some amount of tokens on

RATIONALE:
### Alternatives #### Advanced Balance Fetching An alternative we considered is defining a way for apps to fetch available auxiliary balances. This could be


=== ERC-5585 ===
TITLE: ERC-721 NFT Authorization
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-15
REQUIRES: 721

SUMMARY:
This EIP separates the [ERC-721](./eip-721.md) NFT's commercial usage rights from its ownership to allow for the independent management of those rights.

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY” and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
Most NFTs have a simplified ownership verification mechanism, with a sole owner of an NFT. Under this model, other rights, such as display, or

RATIONALE:
First of all, NFT contract owner can set the maximum number of authorized users to each NFT and whether the NFT owner can cancel


=== ERC-6123 ===
TITLE: Smart Derivative Contract
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-12-13
REQUIRES: 

SUMMARY:
The Smart Derivative Contract (SDC) allows fully automizing and securing a financial product's - e.g. a financial derivative or bond - complete trade life

SPECIFICATION:
The methods and event are separated into different interfaces: - `ISDCTrade` - events and functions related to trade inception, confirmation and termination. - `ISDCSettlement`

MOTIVATION:
### Rethinking Financial Derivatives By their very nature, so-called "over-the-counter (OTC)" financial contracts are bilateral contractual agreements on exchanging long-dated cash flow schedules. Since

RATIONALE:
The interface design and reference implementation are based on the following considerations: - An SDC protocol enables interacting parties to initiate and process a


=== ERC-7566 ===
TITLE: Multiplayer Game Communication
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-11-28
REQUIRES: 

SUMMARY:
This proposal introduces a multiplayer game communication (MGC) interface, using `room` to match and group players, and using `message` to process actions between players.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

RATIONALE:
### Why are multiplayer onchain games room-based? Because the rooms are independent, each player will be assigned a new ID when entering a room.


=== ERC-2477 ===
TITLE: Token Metadata Integrity
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-01-02
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
An interface `ERC2477` with two functions `tokenURIIntegrity` and `tokenURISchemaIntegrity` are specified for smart contracts and a narrative is provided to explain how this improves

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Tokens are being used in many applications to represent, trace and provide access to assets off-chain. These assets include in-game digital items in mobile

RATIONALE:
**Function and parameter naming** The W3C Subresource Integrity (SRI) specification uses the attribute "integrity" to perform integrity verification. This ERC-2477 standard provides a similar


=== ERC-137 ===
TITLE: Ethereum Domain Name Service - Specification
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2016-04-04
REQUIRES: 


=== ERC-7929 ===
TITLE: PermaLink Asset Bound Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-04-01
REQUIRES: 721

SUMMARY:
This standard introduces a subclass of tokens known as **PermaLink Asset Bound Tokens (PermaLink-ABTs)**. They are a specific implementation of the broader **Asset Bound

SPECIFICATION:
### `IERC7929` (Token Interface) **NOTES**: - The following specifications use syntax from Solidity `0.8.27` (or above) ```solidity interface IERC7929 { event AssetBoundContractSet(address assetBoundContract); function

MOTIVATION:
Traditional ownership models on Ethereum are inherently limited. Only externally owned accounts (EOAs) or smart contracts can own blockchain assets. This creates rigidity, especially

RATIONALE:
The design of PermaLink-ABTs centers around the goal of enabling permanent token binding while optimizing for gas efficiency, composability, and secure ownership structures. We


=== ERC-600 ===
TITLE: Ethereum purpose allocation for Deterministic Wallets
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2017-04-13
REQUIRES: 

SUMMARY:
This EIP defines a logical hierarchy for deterministic wallets based on [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki), the purpose scheme defined in [BIP43](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki) and [this proposed change to BIP43](https://github.com/bitcoin/bips/pull/523).

SPECIFICATION:
We define the following 2 levels in BIP32 path: <pre> m / purpose' / subpurpose' / EIP' </pre> Apostrophe in the path indicates that

MOTIVATION:
Because Ethereum is based on account balances rather than UTXO, the hierarchy defined by BIP44 is poorly suited. As a result, several competing derivation

RATIONALE:
The existing convention is to use the 'Ethereum' coin type, leading to paths starting with `m/44'/60'/*`. Because this still assumes a UTXO-based coin, we


=== ERC-6596 ===
TITLE: Cultural and Historical Asset Token
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-02-28
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP proposes the establishment of a comprehensive metadata standard for Cultural and Historical Asset Tokens (CHATs) on the Ethereum platform. These tokens represent

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
**Preserving context and significance** - Provenance and context are crucial for cultural and historical assets. The CHAT standard captures and preserves the provenance and

RATIONALE:
### Choosing to Extend Off-Chain Metadata JSON Schema over On-Chain Interface Both the [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) provide natural extension points in the metadata JSON


=== ERC-3525 ===
TITLE: Semi-Fungible Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-12-01
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This is a standard for semi-fungible tokens. The set of smart contract interfaces described in this document defines an [ERC-721](./eip-721.md) compatible token standard. This

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
Tokenization is one of the most important trends by which to use and control digital assets in crypto. Traditionally, there have been two approaches

RATIONALE:
### Metadata generation This token standard is designed to represent semi-fungible assets, which are most suited for financial instruments rather than collectibles or in-game


=== ERC-7730 ===
TITLE: Structured Data Clear Signing Format
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-07
REQUIRES: 1, 5, 5, ,,  , 7, 1, 2

SUMMARY:
This specification defines a JSON format carrying additional information required to correctly display structured data to a human for review on a wallet screen,

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be

MOTIVATION:
Properly validating a transaction on a hardware wallet's screen (also known as Clear Signing) is a key element of good security practices for end

RATIONALE:
### Human readability It is expected that the main limitation to adoption of ERC-7730 will be the complexity of writing this interface description file


=== ERC-7776 ===
TITLE: Transparent Financial Statements
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-09-20
REQUIRES: 20

SUMMARY:
This proposal defines a standard API that enables EVM Blockchain-based companies (or also called "protocols") to publish their financial information, specifically Income Statements and

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The motivation of this ERC is to bring seriousness to the cryptocurrencies investments market. Currently, the situation is as follows: The current state of

RATIONALE:
ERC-20 is enforced because implementation details like Earnings Per Token calculation directly carry over to the accounting. This standardization makes the Transparent Financial Statements


=== ERC-2098 ===
TITLE: Compact Signature Representation
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2019-03-14
REQUIRES: 2

SUMMARY:
The secp256k1 curve permits the computation of the public key of signed digest when coupled with a signature, which is used implicitly to establish

SPECIFICATION:
A secp256k1 signature is made up of 3 parameters, `r`, `s` and `yParity`. The `r` represents the `x` component on the curve (from which

MOTIVATION:
The motivations for a compact representation are to simplify handling transactions in client code, reduce gas costs and reduce transaction sizes.

RATIONALE:
The compact representation proposed is simple to both compose and decompose in clients and in Solidity, so that it can be easily (and intuitively)


=== ERC-6787 ===
TITLE: Order Book DEX with Two Phase Withdrawal
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-27
REQUIRES: 

SUMMARY:
The Order Book DEX Standard is a proposed set of interface specifications that define a decentralized exchange (DEX) protocol for trading assets using order

SPECIFICATION:
### Interfaces The Order Book DEX Standard defines the following Interfaces: #### `deposit` `function deposit(address token, uint256 amount) external;` The **deposit** function allows a

MOTIVATION:
Decentralized exchanges (DEXs) have become increasingly popular in recent years due to their ability to provide users with greater control over their assets and

RATIONALE:
The flow charts for two-phase withdrawal are shown below: ![](../assets/eip-6787/image1.png)


=== ERC-6944 ===
TITLE: ERC-5219 Resolve Mode
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-27
REQUIRES: 4, 8, 0, 4, ,,  , 5, 2, 1, 9

SUMMARY:
This EIP adds a new [ERC-4804](./eip-4804.md) `resolveMode` to resolve [ERC-5219](./eip-5219.md) contract resource requests.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

RATIONALE:
[ERC-165](./eip-165.md) was not used because interoperability can be checked by calling `resolveMode`.


=== ERC-6327 ===
TITLE: Elastic Signature
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-01-13
REQUIRES: 

SUMMARY:
Elastic signature (ES) aims to sign data with a human friendly secret. The secret will be verified fully on-chain and is not stored anywhere.

SPECIFICATION:
Let: - `pwdhash` represents the hash of the private secret (password). - `datahash` represents the hash of an intended transaction data. - `fullhash` represents

MOTIVATION:
What would a changeable "private key" enable us? For years, we have been looking for ways to lower on-boarding barrier for users, especially those

RATIONALE:
The contract will store everyone's `pwdhash`. ![verifier-contract](../assets/eip-6327/zkpass-1.png) The chart below shows ZK circuit logic. ![circuit-logic](../assets/eip-6327/zkpass-2.png) To verify the signature, it needs `proof`, `allhash`, `pwdhash`


=== ERC-1077 ===
TITLE: Gas relay for contract calls
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-04
REQUIRES: 2, 0, ,,  , 1, 9, 1, ,,  , 1, 2, 7, 1, ,,  , 1, 3, 4, 4

SUMMARY:
A main barrier for the adoption of DApps is the requirement of multiple tokens for executing in chain actions. Allowing users to sign messages

MOTIVATION:
Standardizing a common format for them, as well as a way in which the user allows the transaction to be paid in tokens, gives

RATIONALE:
User pain points: * users don't want to think about ether * users don't want to think about backing up private keys or seed


=== ERC-4626 ===
TITLE: Tokenized Vaults
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2021-12-22
REQUIRES: 2, 0, ,,  , 2, 6, 1, 2

SUMMARY:
The following standard allows for the implementation of a standard API for tokenized Vaults representing shares of a single underlying [EIP-20](./eip-20.md) token. This standard

SPECIFICATION:
All [EIP-4626](./eip-4626.md) tokenized Vaults MUST implement EIP-20 to represent shares. If a Vault is to be non-transferrable, it MAY revert on calls to `transfer`

MOTIVATION:
Tokenized Vaults have a lack of standardization leading to diverse implementation details. Some various examples include lending markets, aggregators, and intrinsically interest bearing tokens.

RATIONALE:
The Vault interface is designed to be optimized for integrators with a feature complete yet minimal interface. Details such as accounting and allocation of


=== ERC-7769 ===
TITLE: JSON-RPC API for ERC-4337
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-08-23
REQUIRES: 1, 5, 5, ,,  , 4, 3, 3, 7, ,,  , 7, 5, 6, 2

SUMMARY:
Defines new JSON-RPC API methods which enable [ERC-4337](./eip-4337) wallets to communicate with `UserOpeation` mempool nodes and bundlers, matching the functionality that exists for Ethereum

SPECIFICATION:
### Definitions * **bundler**: a node exposing the APIs, in order to submit them to the network. A bundler collects one or more UserOperations

MOTIVATION:
In ERC-4337, user transactions as defined in Ethereum are replaced with `UserOperation` objects, which contain all the information needed to perform the operations requested


=== ERC-1822 ===
TITLE: Universal Upgradeable Proxy Standard (UUPS)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-03-04
REQUIRES: 

SUMMARY:
The following describes a standard for proxy contracts which is universally compatible with all contracts, and does not create incompatibility between the proxy and

SPECIFICATION:
The Proxy Contract proposed here should be deployed _as is_, and used as a drop-in replacement for any existing methods of lifecycle management of

MOTIVATION:
- Improve upon existing proxy implementations to improve developer experience for deploying and maintaining Proxy and Logic Contracts. - Standardize and improve the methods


=== ERC-5185 ===
TITLE: NFT Updatable Metadata Extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-06-27
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This specification defines a standard way to allow controlled NFTs' metadata updates along predefined formulas. Updates of the original metadata are restricted and defined

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
Storing voluminous NFT metadata on-chain is often neither practical nor cost-efficient. Storing NFT metadata off-chain on distributed file systems like IPFS can answer some

RATIONALE:
There have been numerous interesting uses of [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md) smart contracts that associate for each token essential and significant metadata. While some projects


=== ERC-7726 ===
TITLE: Common Quote Oracle
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-06-20
REQUIRES: 7528

SUMMARY:
The following allows for the implementation of a standard API for data feeds providing the relative value of assets, forcing compliant contracts to use

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The information required to value assets is scattered over a number of major and minor sources, each one with their own integration API and

RATIONALE:
The use of `getQuote` doesn't require the consumer to be aware of any decimal partitions that might have been defined for the `base` or


=== ERC-6785 ===
TITLE: ERC-721 Utilities Information Extension
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-27
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This specification defines standard functions and an extension of the metadata schema that outlines what a token's utility entails and how the utility may

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
This specification aims to clarify what the utility associated with an NFT is and how to access this utility. Relying on third-party platforms to

RATIONALE:
Since the `utilityUri` could contain information that has to be restricted to some level and could be dependent on an off-chain tool for displaying


=== ERC-4527 ===
TITLE: QR Code transmission protocol for wallets
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-12-07
REQUIRES: 

SUMMARY:
The purpose of this EIP is to provide a process and data transmission protocol via QR Code between offline signers and watch-only wallets.

SPECIFICATION:
**Offline signer**: An offline signer is a device or application which holds the user’s private keys and does not have network access. **Watch-only wallet**:

MOTIVATION:
There is an increasing number of users whom like to use complete offline signers to manage their private keys, signers like hardware wallets and

RATIONALE:
This EIP uses some existing UR types like `crypto-keypath` and `crypto-hdkey` and also introduces some new UR types like `eth-sign-request` and `eth-signature`. Here are


=== ERC-1080 ===
TITLE: Recoverable Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-02
REQUIRES: 

SUMMARY:
The following standard allows for the implementation of a standard API for tokens extending ERC-20 or ERC-791. This standard provides basic functionality to recover

MOTIVATION:
To mitigate the effects of reasonably provable token or asset loss or theft and to help resolve other conflicts. Ethereum's protocol should not be

RATIONALE:
* A recoverable token standard can provide configurable safety for users or contracts who desire this safety. * Implementations of this standard will give


=== ERC-7729 ===
TITLE: Token with Metadata
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-24
REQUIRES: 20

SUMMARY:
This standard extends the [ERC-20](./eip-20.md) standard to include a `metadata` function interface and a JSON schema for metadata.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be

MOTIVATION:
Memecoins have demonstrated the value of associating tokens with visual metadata. By standardizing a way to include metadata in ERC-20 tokens, developers can create

RATIONALE:
The `metadata` function was chosen based on existing implementations in standards and applications.


=== ERC-7857 ===
TITLE: AI Agents NFT with Private Metadata
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-01-02
REQUIRES: 

SUMMARY:
A standard interface for NFTs specifically designed for AI agents, where the metadata represents agent capabilities and requires privacy protection. Unlike traditional NFT standards

SPECIFICATION:
The EIP defines three key interfaces: the main NFT interface, the metadata interface, and the data verification interface. ### Data Verification System The verification

MOTIVATION:
With the increasing intelligence of AI models, agents have become powerful tools for automating meaningful daily tasks. The integration of agents with blockchain technology

RATIONALE:
The design choices in this standard are motivated by several key requirements: 1. **Verification Abstraction**: The standard separates the verification logic into a dedicated


=== ERC-5289 ===
TITLE: Ethereum Notary Interface
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-07-16
REQUIRES: 1, 6, 5, ,,  , 5, 5, 6, 8

SUMMARY:
Currently, the real-world applications of smart contracts are limited by the fact that they aren't legally binding. This EIP proposes a standard that allows

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
NFTs have oftentimes been branded as a way to hold and prove copyright of a specific work. However, this, in practice, has almost never

RATIONALE:
- `uint64` was chosen for the timestamp return type as 64-bit time registers are standard. - `uint16` was chosen for the document ID as


=== ERC-6806 ===
TITLE: ERC-721 Holding Time Tracking
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-30
REQUIRES: 721

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It adds an interface that tracks and describes the holding time of a Non-Fungible Token (NFT) by

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
In some use cases, it is valuable to know the duration for which a NFT has been held by an account. This information can

RATIONALE:
The addition of the `getHoldingInfo` function to an extension of the ERC-721 standard enables developers to implement NFT-based applications that require holding time information.


=== ERC-6809 ===
TITLE: Non-Fungible Key Bound Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-03-31
REQUIRES: 721

SUMMARY:
A standard interface for Non-Fungible Key Bound Tokens (**NFKBT/s**), a subset of the more general Key Bound Tokens (**KBT/s**). The following standardizes an API

SPECIFICATION:
### `IKBT721` (Token Contract) **NOTES**: - The following specifications use syntax from Solidity `0.8.17` (or above) - Callers MUST handle `false` from `returns (bool

MOTIVATION:
In this fast-paced technologically advancing world, people learn and mature at different speeds. The goal of global adoption must take into consideration the target

RATIONALE:
The intent from individual technical decisions made during the development of **NFKBTs** focused on maintaining consistency and backward compatibility with ERC-721s, all the while


=== ERC-7866 ===
TITLE: Decentralised User Profiles
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-01-22
REQUIRES: 165

SUMMARY:
This EIP proposes a standard for decentralised, interoperable user profiles known as Decentralised Profiles. Profiles are implemented as **Soul Bound Tokens (SBTs)** that are

SPECIFICATION:
### Unique Profile Identifiers #### Decentralised Profile Each profile is identified by: ``` <username>@<network_slug>.soul ``` - `username`: User-defined, chain-unique string. - `network_slug`: Short identifier

MOTIVATION:
Existing solutions for decentralised identity and user profiles lack cross-chain compatibility, dApp-specific customisation, and standardisation. A unified approach is essential to: 1. Facilitate interoperable

RATIONALE:
The design of the Decentralised Profile Standard was guided by the need for a unified, interoperable user profile system that can operate seamlessly across


=== ERC-1319 ===
TITLE: Smart Contract Package Registry Interface
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-08-13
REQUIRES: 

SUMMARY:
This EIP specifies an interface for publishing to and retrieving assets from smart contract package registries. It is a companion EIP to [1123](./eip-1123.md) which

SPECIFICATION:
The specification describes a small read/write API whose components are mandatory. It allows registries to manage versioned releases using the conventions of [semver](https://semver.org/) without

MOTIVATION:
The goal is to establish a framework that allows smart contract publishers to design and deploy code registries with arbitrary business logic while exposing

RATIONALE:
The proposal hopes to accomplish the following: + Define the smallest set of inputs necessary to allow registries to map package names to a


=== ERC-3386 ===
TITLE: ERC-721 and ERC-1155 to ERC-20 Wrapper
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-03-12
REQUIRES: 165

SUMMARY:
This standard outlines a smart contract interface to wrap identifiable tokens with fungible tokens. This allows for derivative [ERC-20](./eip-20.md) tokens to be minted by

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
The ERC-20 token standard is the most widespread and liquid token standard on Ethereum. ERC-721 and ERC-1155 tokens on the other hand can only

RATIONALE:
### Naming The ERC-721/ERC-1155 tokens which are pooled are called {Base} tokens. Alternative names include: - Underlying. - NFT. However, ERC-1155 tokens may be


=== ERC-823 ===
TITLE: Token Exchange Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-01-06
REQUIRES: 20

SUMMARY:
The following standard provides functionally to make payments in the form of any other registered tokens, as well as allow token contracts to store

SPECIFICATION:
### Sender Interface This interface must be inherited by a ERC20 token contract that wants to exchange its tokens with another token. #### Storage

MOTIVATION:
Existing token standards do not provide functionality to exchange tokens. Existing token converters reduce the total supply of an existing token, which in the

RATIONALE:
Such a design provides a consistent exchange standard applicable to all ERC20 tokens that follow it. The primary advantage for of this strategy is


=== ERC-3589 ===
TITLE: Assemble assets into NFTs
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-05-24
REQUIRES: 721

SUMMARY:
The ERC-1155 multi-token contract defines a way to batch transfer tokens, but those tokens must be minted by the ERC-1155 contract itself. This EIP

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
As NFT arts and collectors rapidly increases, some collectors are not satisfied with traditional trading methods. When two collectors want to swap some of

RATIONALE:
There are many reasons why people want to pack their NFTs together. For example, a collector want to pack a set of football players


=== ERC-2981 ===
TITLE: NFT Royalty Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-09-15
REQUIRES: 165

SUMMARY:
This standard allows contracts, such as NFTs that support [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) interfaces, to signal a royalty amount to be paid to the NFT

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
There are many marketplaces for NFTs with multiple unique royalty payment implementations that are not easily compatible or usable by other marketplaces. Just like

RATIONALE:
### Optional royalty payments It is impossible to know which NFT transfers are the result of sales, and which are merely wallets moving or


=== ERC-7053 ===
TITLE: Interoperable Digital Media Indexing
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-05-22
REQUIRES: 

SUMMARY:
This EIP proposes an interoperable indexing strategy designed to enhance the organization and retrieval of digital media information across multiple smart contracts and EVM-compatible

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Given the significant role digital media files play on the Internet, it's crucial to have a robust and efficient method for indexing immutable information.

RATIONALE:
The design decisions in this EIP prioritize the effectiveness and efficiency of the indexing method. To achieve this, Decentralized Content Identifiers (CIDs) are utilized


=== ERC-5006 ===
TITLE: Rental NFT, NFT User Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-04-12
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This standard is an extension of [ERC-1155](./eip-1155.md). It proposes an additional role (`user`) which can be granted to addresses that represent a `user` of

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
Like [ERC-721](./eip-721.md), [ERC-1155](./eip-1155.md) tokens may have utility of some kind. The people who “use” the token may be different than the people who own

RATIONALE:
This model is intended to facilitate easy implementation. The following are some problems that are solved by this standard: ### Clear Rights Assignment With


=== ERC-1900 ===
TITLE: dType - Decentralized Type System for EVM
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-03-28
REQUIRES: 

SUMMARY:
We are proposing a decentralized Type System for Ethereum, to introduce data definition (and therefore ABI) consistency. This ERC focuses on defining an on-chain

SPECIFICATION:
The Type Registry can have a governance protocol for its CRUD operations. However, this, and other permission guards are not covered in this proposal.

MOTIVATION:
In order to build a network of interoperable protocols on Ethereum, we need data standardization, to ensure a smooth flow of on-chain information. Off-chain,

RATIONALE:
The Type Registry must store the minimum amount of information for rebuilding the type ABI definition. This allows us to: * support on-chain interoperability


=== ERC-7572 ===
TITLE: Contract-level metadata via `contractURI()`
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-12-06
REQUIRES: 

SUMMARY:
This specification standardizes `contractURI()` to return contract-level metadata. This is useful for dapps and offchain indexers to show rich information about a contract, such

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Dapps have included supported for `contractURI()` for years without an ERC to reference. This standard also introduces the event `ContractURIUpdated()` to signal when to

RATIONALE:
The method name `contractURI()` was chosen based on its existing implementation in dapps. The event `ContractURIUpdated()` is specified to help offchain indexers to know


=== ERC-7231 ===
TITLE: Identity-aggregated NFT
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-06-25
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 2, 7, 1

SUMMARY:
This standard extends [ERC-721](./eip-721.md) by binding individuals' Web2 and Web3 identities to non-fungible tokens (NFTs) and soulbound tokens (SBTs). By binding multiple identities, aggregated

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY” and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
One of the most interesting aspects of Web3 is the ability to bring an individual's own identity to different applications. Even more powerful is

RATIONALE:
Designing the proposal, we considered the following problems that are solved by this standard: ![EIP Flow Diagram](../assets/eip-7231/img/Identity-aggregated-NFT-flow.png) 1. Resolve the issue of multiple ID


=== ERC-7871 ===
TITLE: Wallet Signing API
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-01-29
REQUIRES: 1, 9, 1, ,,  , 7, 1, 2, ,,  , 5, 7, 9, 2

SUMMARY:
Defines a new JSON-RPC method `wallet_sign` which enables apps to ask a wallet to sign [EIP-191](./eip-191.md) messages. Applications can use this JSON-RPC method to

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Wallets and developer tools currently support multiple JSON-RPC methods for handling offchain signature requests. This proposal simplifies wallet & tooling implementations by consolidating these

RATIONALE:
<!-- TODO -->


=== ERC-7720 ===
TITLE: Deferred Token Transfer
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-06-09
REQUIRES: 20

SUMMARY:
This standard specifies that allows users to deposit [ERC-20](./eip-20.md) tokens for a beneficiary. The beneficiary can withdraw the tokens only after a specified future

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
In various scenarios, such as vesting schedules, escrow services, or timed rewards, there is a need for deferred payments. This contract provides a secure

RATIONALE:
The design of the Deferred Token Transfer contract aims to provide a straightforward and secure method for handling time-locked token transfers. The following considerations


=== ERC-7638 ===
TITLE: Batch Calls Encoding in SCA
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-26
REQUIRES: 

SUMMARY:
Batch Calls Encoding (BCE) outlines a solution for Smart Contract Account (SCA) wallets to consolidate multiple calls into a single call, encoding multiple parameters

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Typically, interactions between users and contracts involve a series of coherent operations, such as `approve`-`transferFrom`. While EOA wallets require users to confirm each operation

RATIONALE:
Each call encapsulates 3 parameters: `to`\`value`\`data`. The conventional approach involves packaging these 3 parameters into a struct and then placing multiple structs into an


=== ERC-721 ===
TITLE: Non-Fungible Token Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-01-24
REQUIRES: 165

SUMMARY:
The following standard allows for the implementation of a standard API for NFTs within smart contracts. This standard provides basic functionality to track and

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
A standard interface allows wallet/broker/auction applications to work with any NFT on Ethereum. We provide for simple ERC-721 smart contracts as well as contracts

RATIONALE:
There are many proposed uses of Ethereum smart contracts that depend on tracking distinguishable assets. Examples of existing or planned NFTs are LAND in


=== ERC-1203 ===
TITLE: ERC-1203 Multi-Class Token Standard (ERC-20 Extension)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-07-01
REQUIRES: 

SUMMARY:
The following standard allows for the implementation of a standard API for MCTs within smart contracts. This standard provides basic functionality to track, transfer,

SPECIFICATION:
```solidity contract ERC20 { function totalSupply() public view returns (uint256); function balanceOf(address _owner) public view returns (uint256); function transfer(address _to, uint256 _value) public returns

MOTIVATION:
This standard is heavily inspired by ERC-20 Token Standard and ERC-721 Non-Fungible Token Standard. However, whereas these standards are chiefly concerned with representation of

RATIONALE:
This standard purposely extends ERC-20 Token Standard so that new MCTs following or existing ERC-20 tokens extending this standard are fully compatible with current


=== ERC-838 ===
TITLE: ABI specification for REVERT reason string
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2020-08-20
REQUIRES: 

SUMMARY:
This proposal specifies how to encode potential error conditions in the JSON ABI of a smart contract. A high-level language could then provide a

SPECIFICATION:
To conform to this specification, compilers producing JSON ABIs SHOULD include error declarations alongside functions and events. Each error object MUST contain the keys

MOTIVATION:
It's important to provide clear feedback to users (and developers) about what went wrong with their Ethereum transactions. The REVERT opcode is a step

RATIONALE:
Needs discussion. <!-- TODO -->


=== ERC-820 ===
TITLE: Pseudo-introspection Registry Contract
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-01-05
REQUIRES: 1, 6, 5, ,,  , 2, 1, 4

SUMMARY:
This standard defines a registry where smart contracts and regular accounts can publish which functionalities they implement---either directly or through a proxy contract. Anyone

SPECIFICATION:
### [ERC-820] Registry Smart Contract > This is an exact copy of the code of the [ERC820 registry smart contract]. ``` solidity /* ERC820

MOTIVATION:
There have been different approaches to define pseudo-introspection in Ethereum. The first is [ERC-165] which has the limitation that it cannot be used by

RATIONALE:
This standards offers a way for any type of address (externally owned and contracts) to implement an interface and potentially delegate the implementation of


=== ERC-4393 ===
TITLE: Micropayments for NFTs and Multi Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-10-24
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This standard outlines a smart contract interface for tipping to non-fungible and multi tokens. Holders of the tokens are able to withdraw the tips

SPECIFICATION:
This standard proposal outlines a generalised way to allow tipping via implementation of an `ITipToken` interface. The interface is intentionally kept to a minimum

MOTIVATION:
A cheap way to send tips to any type of NFT or multi token. This can be achieved by gas optimising the tip token

RATIONALE:
### Simplicity ITipToken interface uses a minimal number of functions, in order to keep its use as general purpose as possible, whilst there being


=== ERC-4974 ===
TITLE: Ratings
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-04-02
REQUIRES: 165

SUMMARY:
This standard defines a standardized interface for assigning and managing numerical ratings on the Ethereum blockchain. This allows ratings to be codified within smart

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Traditionally, blockchain applications have focused on buying and selling digital assets. However, the asset-centric model has often been detrimental to community-based blockchain projects, as

RATIONALE:
### Rating Assignment Ratings SHALL be at the sole discretion of the contract operator. This party may be a sports team coach or a


=== ERC-4907 ===
TITLE: Rental NFT, an Extension of EIP-721
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-03-11
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [EIP-721](./eip-721.md). It proposes an additional role (`user`) which can be granted to addresses, and a time where the

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
Some NFTs have certain utilities. For example, virtual land can be "used" to build scenes, and NFTs representing game assets can be "used" in-game.

RATIONALE:
This model is intended to facilitate easy implementation. Here are some of the problems that are solved by this standard: ### Clear Rights Assignment


=== ERC-2767 ===
TITLE: Contract Ownership Governance
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-07-04
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 1, 7, 3

SUMMARY:
The following standard defines the implementation of a standard API for a Governance smart contract based on `ERC-20`. Existing `ERC-173` compatible contracts can upgrade

SPECIFICATION:
A Governance contract that is compliant with `ERC-2767` shall implement the following interfaces: ```solidity /// @title ERC-2767 Governance /// @dev ERC-165 InterfaceID: 0xd8b04e0e interface

MOTIVATION:
Traditionally, many contracts that require that they be owned or controlled in some way use `ERC-173` which standardized the use of ownership in the

RATIONALE:
The goals of this EIP have been the following: - Standardize API of Governance contracts to make it easy for analysis tools to be


=== ERC-7700 ===
TITLE: Cross-chain Storage Router Protocol
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-30
REQUIRES: 155

SUMMARY:
The following standard provides a mechanism by which smart contracts can route storage to external providers. In particular, protocols can reduce the gas fees

SPECIFICATION:
### Overview The following specification revolves around the structure and description of a cross-chain storage router tasked with the responsibility of writing to an

MOTIVATION:
[EIP-3668](./eip-3668), aka 'CCIP-Read', has been key to retrieving cross-chain data for a variety of contracts on Ethereum blockchain, ranging from price feeds for DeFi

RATIONALE:
Technically, the cases of L2s and databases are similar; routing to an L2 involves routing the `eth_call` to another EVM, while routing to a


=== ERC-7913 ===
TITLE: Signature Verifiers
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2025-03-21
REQUIRES: 

SUMMARY:
Externally Owned Accounts (EOA) can sign messages with their associated private keys. Additionally [ERC-1271](./eip-1271.md) defines a method for signature verification by smart accounts such

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
With the development of account abstraction, there is an increasing need for non-ethereum signature verification. Cryptographic algorithms besides the natively supported secp256k1 are being

RATIONALE:
Verifiers can be used to avoid deploying many ERC-1271 "identity contract" (one per key), which would be expensive. Using this model, new keys can


=== ERC-7777 ===
TITLE: Governance for Human Robot Societies
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-09-29
REQUIRES: 

SUMMARY:
This proposal defines two core interfaces: `IUniversalIdentity` and `IUniversalCharter`, providing mechanisms for humans, and robots to establish their identities and to create decentralized communities

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The human brain is a wet, massively parallel electrochemical computer. Recent hardware and software advances make it likely that soon, human societies will need

RATIONALE:
**IUniversalIdentity** `struct HardwareIdentity` The HardwareIdentity structure provides essential information about a robot, including a challenge-response public key, manufacturer, operator, model, manufacturer serial number `generateChallenge()`


=== ERC-4341 ===
TITLE: Ordered NFT Batch Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-10-01
REQUIRES: 

SUMMARY:
This standard introduces a smart contract interface that can represent a batch of non-fungible tokens of which the ordering information shall be retained and

SPECIFICATION:
``` pragma solidity ^0.8.0; /** @title EIP-4341 Multi Ordered NFT Standard @dev See https://eips.ethereum.org/EIPS/eip-4341 */ interface ERC4341 /* is ERC165 */ { event Transfer(address

MOTIVATION:
Non-fungible tokens are widely accepted as carriers of crypto-assets, hence in both [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md), the ordering information of multiple NFTs is discarded. However,

RATIONALE:
In [ERC-1155](./eip-1155.md) and [ERC-721](./eip-721.md), NFTs are used to represent crypto-assets, and in this standard together with [EIP-3754](./eip-3754.md), NFTs are equipped with utilities. In this


=== ERC-6900 ===
TITLE: Modular Smart Contract Accounts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-18
REQUIRES: 1, 6, 5, ,,  , 1, 2, 7, 1, ,,  , 4, 3, 3, 7

SUMMARY:
This proposal standardizes smart contract accounts and account modules, which are smart contracts that allow for composable logic within smart contract accounts. This proposal

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
One of the goals that ERC-4337 accomplishes is abstracting the logic for execution and validation to each smart contract account. Many new features of

RATIONALE:
ERC-4337 compatible accounts must implement the `IAccount` interface, which consists of only one method that bundles validation with execution: `validateUserOp`. A primary design rationale


=== ERC-5516 ===
TITLE: Soulbound Multi-owner Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-19
REQUIRES: 1, 6, 5, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP proposes a standard interface for non-fungible double signature Soulbound multi-tokens. Previous account-bound token standards face the issue of users losing their account

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
This EIP was inspired by the main characteristics of the [EIP-1155](./eip-1155.md) token and by articles in which benefits and potential use cases of Soulbound/Accountbound

RATIONALE:
### SBT as an extension of EIP-1155 We believe that Soulbound Tokens serve as a specialized subset of existing [EIP-1155](./eip-1155.md) tokens. The advantage of


=== ERC-4675 ===
TITLE: Multi-Fractional Non-Fungible Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-01-13
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard outlines a smart contract interface eligible to represent any number of fractionalized non-fungible tokens. Existing projects utilizing standards like [EIP-1633](./eip-1633.md) conventionally deploy

SPECIFICATION:
```solidity /** @title Multi-Fractional Non-Fungible Token Standard @dev Note : The ERC-165 identifier for this interface is 0x83f5d35f. */ interface IMFNFT { /** @dev

MOTIVATION:
The conventional fractionalization process of fractionalizing a NFT to FT requires deployment of a FT token contract representing the ownership of NFT. This leads

RATIONALE:
**Metadata** The `symbol()` & `name()` functions were not included since the majority of users can just fetch it from the originating NFT contract. Also,


=== ERC-7575 ===
TITLE: Multi-Asset ERC-4626 Vaults
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-12-11
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 2, 7, 7, 1, ,,  , 4, 6, 2, 6

SUMMARY:
The following standard adapts [ERC-4626](./eip-4626.md) to support multiple assets or entry points for the same share token. This also enables Vaults which don't have

SPECIFICATION:
### Definitions: The existing definitions from [ERC-4626](./eip-4626.md) apply. In addition, this spec defines: - Multi-Asset Vaults: A Vault which has multiple assets/entry points. The

MOTIVATION:
One missing use case that is not supported by [ERC-4626](./eip-4626.md) is Vaults which have multiple assets or entry points such as liquidity provider (LP)

RATIONALE:
This standard is intentionally flexible to support both existing [ERC-4626](./eip-4626.md) Vaults easily by the introduction of a single new method, but also flexible to


=== ERC-5005 ===
TITLE: Zodiac Modular Accounts
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-04-14
REQUIRES: 165

SUMMARY:
This EIP standardizes interfaces for composable and interoperable tooling for programmable Ethereum accounts. These interfaces separate contract accounts ("avatars") from their authentication and execution

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Currently, most programmable accounts (like DAO tools and frameworks) are built as monolithic systems where the authorization and execution logic are coupled, either within

RATIONALE:
The interface defined in this standard is designed to be mostly compatible with most popular programmable accounts in use right now, to minimize the


=== ERC-162 ===
TITLE: Initial ENS Hash Registrar
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2016-10-25
REQUIRES: 

SUMMARY:
This ERC describes the implementation, as deployed to the main ethereum network on 2017-05-04, of a registrar contract to govern the allocation of names

SPECIFICATION:
### Initial restrictions The Initial Registrar is expected to be in service for approximately two years, prior to upgrading. This should be sufficient time

RATIONALE:
### Starting with a temporary registrar Anticipating and designing for all the potential issues of name allocation names is unlikely to succeed. This approach


=== ERC-7891 ===
TITLE: Splitting and Merging of NFTs
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-02-15
REQUIRES: 7, 2, 1, ,,  , 6, 1, 5, 0

SUMMARY:
This standard extends [EIP-721](./eip-721.md) and [EIP-6150](./eip-6150.md). This introduces a structured parent-child relationship between NFTs, allowing an NFT to be fractionally split into multiple child

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
This EIP introduces hierarchical NFTs with splitting and merging capabilities, allowing assets to be dynamically restructured. This proposal is crucial for fractional ownership, gaming

RATIONALE:
This EIP builds upon [ERC-721](./eip-721) and [ERC-6150](./eip-6150) to introduce a structured mechanism for share-based hierarchical NFTs, enabling splitting, merging, and fractional ownership directly within


=== ERC-2335 ===
TITLE: BLS12-381 Keystore
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-09-30
REQUIRES: 2, 3, 3, 3, ,,  , 2, 3, 3, 4

SUMMARY:
A keystore is a mechanism for storing private keys. It is a JSON file that encrypts a private key and is the standard for

SPECIFICATION:
The process of decrypting the secret held within a keystore can be broken down into 3 sub-processes: obtaining the decryption key, verifying the password

MOTIVATION:
The secure storage and exchange of keys is a vital component of the user experience as people are expected to hold their own keys.

RATIONALE:
The rationale behind the design of this specification is largely the same as that behind the [Ethereum 1 keystore definition](https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition) except for the lack


=== ERC-6066 ===
TITLE: Signature Validation Method for NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-11-29
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 1, 2, 7, 1, ,,  , 5, 7, 5, 0

SUMMARY:
While **E**xternally **O**wned **A**ccounts can validate signed messages with `ecrecover()` and smart contracts can validate signatures using specifications outlined in [ERC-1271](./eip-1271.md), currently there is

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to

MOTIVATION:
With billions of ETH in trading volume, the **N**on-**F**ungible **T**oken standard has exploded into tremendous popularity in recent years. Despite the far-reaching implications of

RATIONALE:
We have purposefully decided to not include a signature generation standard in this proposal as it would restrict flexibility of such mechanism, just as


=== ERC-7425 ===
TITLE: Tokenized Reserve
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-30
REQUIRES: 2, 0, ,,  , 4, 6, 2, 6

SUMMARY:
This specification explains a tokenized reserve mechanism standard. Current smart contracts record transactions and are made public. The reserve will implement added functionality allowing

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Tokenized vaults store [ERC-20](./eip-20.md) tokens that are represented by shares within vault contracts. Implementations can follow the [ERC-4626](./eip-4626.md) standard to provide basic functionality for

RATIONALE:
This proposed standard is designed to be a core implementation of a tokenized reserve interface. Other non-specified conditions should be addressed on a case-by-case


=== ERC-4973 ===
TITLE: Account-bound Tokens
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-04-01
REQUIRES: 1, 6, 5, ,,  , 7, 1, 2, ,,  , 7, 2, 1, ,,  , 1, 2, 7, 1

SUMMARY:
Proposes a standard API for account-bound Tokens (ABT) within smart contracts. An ABT is a non-fungible token bound to a single account. ABTs don't

SPECIFICATION:
### Solidity Interface The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are

MOTIVATION:
In the popular MMORPG World of Warcraft, its game designers intentionally took some items out of the world's auction house market system to prevent

RATIONALE:
### Interface ABTs shall be maximally backward-compatible but still only expose a minimal and simple to implement interface definition. As [ERC-721](./eip-721.md) tokens have seen


=== ERC-7738 ===
TITLE: Permissionless Script Registry
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-07-01
REQUIRES: 173

SUMMARY:
This EIP provides a means to create a standard registry for locating executable scripts associated with the token.

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY” and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
[ERC-5169](./eip-5169.md) provides a client script lookup method for contracts. This requires the contract to have implemented the [ERC-5169](./eip-5169.md) interface at the time of construction

RATIONALE:
This method allows contracts written without the [ERC-5169](./eip-5169.md) interface to associate scripts with themselves, and avoids the need for a centralised online server, with


=== ERC-7631 ===
TITLE: Dual Nature Token Pair
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2024-02-21
REQUIRES: 2, 0, ,,  , 7, 2, 1

SUMMARY:
A fungible [ERC-20](./eip-20.md) token contract and non-fungible [ERC-721](./eip-721.md) token contract can be interlinked, allowing actions performed on one contract to be reflected on the

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The ERC-20 fungible and ERC-721 non-fungible token standards offer sufficient flexibility for a co-joined, dual nature token pair. Transfers on the ERC-20 token can

RATIONALE:
### Implementation Detection The `mirrorERC721` and `baseERC20` methods returning non-zero addresses signal that the ERC-20 and ERC-721 contracts implement the required interfaces respectively. As


=== ERC-5501 ===
TITLE: Rental & Delegation NFT - EIP-721 Extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-18
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 4, 4, 0, 0, ,,  , 4, 9, 0, 7

SUMMARY:
The following standard proposes an additional `user` role for [EIP-721](./eip-721.md). This role grants the permission to use the NFT with no ability to transfer

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Collectibles, gaming assets, metaverse, event tickets, music, video, domains, real item representation are several among many NFT use cases. With [EIP-721](./eip-721.md) only the owner

RATIONALE:
The main factors influencing this standard are: * **[EIP-4400](./eip-4400.md) and [EIP-4907](./eip-4907.md)** * **Allow lending and borrowing without the necessary stake or overcollateralization while owner


=== ERC-7786 ===
TITLE: Cross-Chain Messaging Gateway
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2024-10-14
REQUIRES: 7930

SUMMARY:
This proposal describes an interface, and the corresponding workflow, for smart contracts to send arbitrary data through cross-chain messaging protocols. The end goal of

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Cross-chain messaging protocols (or bridges) allow communication between smart contracts deployed on different blockchains. There is a large diversity of such protocols with multiple

RATIONALE:
Attributes are designed so that gateways can expose any specific features the bridge offers without having to use a proprietary interface. This should allow


=== ERC-3668 ===
TITLE: CCIP Read—Secure offchain data retrieval
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-07-19
REQUIRES: 

SUMMARY:
Contracts wishing to support lookup of data from external sources may, instead of returning the data directly, revert using `OffchainLookup(address sender, string[] urls, bytes

SPECIFICATION:
### Overview Answering a query via CCIP read takes place in three steps: 1. Querying the contract. 2. Querying the gateway using the URL

MOTIVATION:
Minimising storage and transaction costs on Ethereum has driven contract authors to adopt a variety of techniques for moving data offchain, including hashing, recursive

RATIONALE:
### Use of `revert` to convey call information For offchain data lookup to function as desired, clients must either have some way to know


=== ERC-6464 ===
TITLE: Multi-operator, per-token ERC-721 approvals.
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2023-02-02
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
[ERC-721](./eip-721.md) did not foresee the approval of multiple operators to manage a specific token on behalf of its owner. This lead to the establishment

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The NFT standard defined in ERC-721 allows token owners to "approve" arbitrary addresses to control their tokens—the approved addresses are known as "operators". Two

RATIONALE:
### Draft notes to be expanded upon 1. Approvals granted via the newly introduced methods are called *explicit* as a means of easily distinguishing


=== ERC-7412 ===
TITLE: On-Demand Off-Chain Data Retrieval
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-26
REQUIRES: 

SUMMARY:
Contracts may require off-chain data during execution. A smart contract function could implement the standard proposed here by reverting with `error OracleDataRequired(address oracleContract, bytes

SPECIFICATION:
A contract implementing this standard MUST revert with the following error whenever off-chain data is required: ```solidity error OracleDataRequired(address oracleContract, bytes oracleQuery, uint256 feeRequired)

MOTIVATION:
Ethereum's scaling roadmap involves a series of separate execution contexts for smart contract code (including layer two and layer three scaling solutions). This makes

RATIONALE:
This proposal is essentially an alternative to [ERC-3668](./eip-3668.md) with a couple notable distinctions: - The error is very simple to construct. Developers implementing this


=== ERC-3156 ===
TITLE: Flash Loans
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2020-11-15
REQUIRES: 

SUMMARY:
A flash loan is a smart contract transaction in which a lender smart contract lends assets to a borrower smart contract with the condition

SPECIFICATION:
A flash lending feature integrates two smart contracts using a callback pattern. These are called the LENDER and the RECEIVER in this EIP. ###

MOTIVATION:
Flash loans allow smart contracts to lend an amount of tokens without a requirement for collateral, with the condition that they must be returned

RATIONALE:
The interfaces described in this ERC have been chosen as to cover the known flash lending use cases, while allowing for safe and gas


=== ERC-7739 ===
TITLE: Readable Typed Signatures for Smart Accounts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-05-28
REQUIRES: 1, 9, 1, ,,  , 7, 1, 2, ,,  , 1, 2, 7, 1, ,,  , 5, 2, 6, 7

SUMMARY:
This proposal defines a standard to prevent signature replays across multiple smart accounts when they are owned by a single Externally Owned Account (EOA).

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Smart accounts can verify signatures with via [ERC-1271](./eip-1271.md) using the `isValidSignature` function. A straightforward implementation as shown below, is vulnerable to signature replay attacks.

RATIONALE:
### `TypedDataSign` structure The `typedDataSignTypehash` must be constructed on-the-fly on-chain. This is to enforce that the signed contents will be visible in the signature


=== ERC-7092 ===
TITLE: Financial Bonds
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-05-28
REQUIRES: 165

SUMMARY:
This proposal introduces fixed-income financial bonds with key characteristics defined to facilitate bond issuance in the primary market and enable buying or selling bonds

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Fixed-income instruments are a widely utilized asset class for corporations and other entities raising funds. However, transitioning to tokenized bonds is challenging due to

RATIONALE:
The design of this ERC aims to simplify the migration to tokenized bonds by maintaining consistency with traditional bond standards. This approach allows fixed-income


=== ERC-7683 ===
TITLE: Cross Chain Intents
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-11
REQUIRES: 

SUMMARY:
The following standard allows for the implementation of a standard API for cross-chain value-transfer systems. This standard provides generic order structs, as well as

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Intent-based systems have become the preeminent solution for end-user cross-chain interaction by abstracting away the complexity and time constraints of traditional bridges. One of

RATIONALE:
### Generic OrderData A key consideration is to ensure that a broad range of cross-chain intent designs can work within the same standard. To


=== ERC-7888 ===
TITLE: Crosschain Broadcaster
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-02-18
REQUIRES: 

SUMMARY:
This ERC defines a protocol for cross-rollup messaging using storage proofs. Users can broadcast messages on a source chain, and those messages can be

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
The Ethereum ecosystem is experiencing a rapid growth in the number of rollup chains. As the number of chains grows, the experience becomes more

RATIONALE:
### Broadcast vs Unicast A contract on any given chain cannot dictate which other chains can and cannot inspect its state. Contracts are naturally


=== ERC-1155 ===
TITLE: Multi Token Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-06-17
REQUIRES: 165

SUMMARY:
This standard outlines a smart contract interface that can represent any number of fungible and non-fungible token types. Existing standards such as ERC-20 require

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
Tokens standards like ERC-20 and ERC-721 require a separate contract to be deployed for each token type or collection. This places a lot of

RATIONALE:
### Metadata Choices The `symbol` function (found in the ERC-20 and ERC-721 standards) was not included as we do not believe this is a


=== ERC-5189 ===
TITLE: Account Abstraction via Endorsed Operations
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-06-29
REQUIRES: 

SUMMARY:
This ERC proposes a form of account abstraction (AA) that ensures compatibility with existing smart contract wallets and provides flexibility for alternative designs while

SPECIFICATION:
To avoid Ethereum consensus changes, we do not attempt to create new transaction types for account-abstracted transactions. Instead, AA transactions are packed up in

MOTIVATION:
This account abstraction proposal aims to implement a generalized system for executing AA transactions while maintaining the following goals: * **Achieve the primary goal

RATIONALE:
### Griefing protection The main challenge with a purely smart contract wallet-based account abstraction system is DoS safety: how can a bundler that includes


=== ERC-2980 ===
TITLE: Swiss Compliant Asset Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-09-08
REQUIRES: 20

SUMMARY:
This new standard is an [ERC-20](./eip-20.md) compatible token with restrictions that comply with the following Swiss laws: the [Stock Exchange Act](../assets/eip-2980/Swiss-Confederation-SESTA.pdf), the [Banking Act](../assets/eip-2980/Swiss-Confederation-BA.pdf),

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
In its ICO guidance dated February 16, 2018, FINMA (Swiss Financial Market Supervisory Authority) defines asset tokens as tokens representing assets and/or relative rights

RATIONALE:
There are currently no token standards that expressly facilitate conformity to securities law and related regulations. EIP-1404 (Simple Restricted Token Standard) it’s not enough


=== ERC-7829 ===
TITLE: Data Asset NFT
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-11-29
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal is an extension of [ERC-721](./eip-721.md). This proposal introduces a new role, Reader, who is granted by the Owner and allows multiple Readers

SPECIFICATION:
### Terms In this proposal, we divide data assets into three parts: - Storage Metadata: Includes commitment, size, expire, and uploader's address. Stored and

MOTIVATION:
ERC-721 proposed NFTs to represent the ownership of digital or physical assets. Currently, the NFT metadata is considered the NFT content, and its scarcity

RATIONALE:
![arc](../assets/eip-7829/architect.svg) The biggest challenge for data asset NFTs is the visibility but inaccessibility of data content: after establishing access control permissions for NFT data


=== ERC-2876 ===
TITLE: Deposit contract and address standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-08-13
REQUIRES: 

SUMMARY:
An ERC-2876 compatible **deposit system** can accept ETH payments from multiple depositors without the need for managing multiple keys or requiring use of a

SPECIFICATION:
### Definitions - The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are

MOTIVATION:
Centralized exchanges and merchants (Below: "apps") require an address format for accepting deposits. Currently the address format used refers to an account (external or

RATIONALE:
The contract interface and address format combination has one notable drawback, which was brought up in discussion. This ERC can only handle deposits for


=== ERC-1387 ===
TITLE: Merkle Tree Attestations with Privacy enabled
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-08
REQUIRES: 


=== ERC-1337 ===
TITLE: Subscriptions on the blockchain
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-08-01
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
To enable replay-able transactions users sign a concatenated bytes hash that is composed of the input data needed to execute the transaction. This data

SPECIFICATION:
#### Enum Contract EIP-1337 Contracts should be compiled with a contract that references all the enumerations that are required for operation ```SOLIDITY /// @title

MOTIVATION:
Recurring payments are the bedrock of SaSS and countless other businesses, a robust specification for defining this interaction will enable a broad spectrum of

RATIONALE:
Merchants who accept credit-cards do so by storing a token that is retrieved from a third party processor(stripe, paypal, etc), this token is used


=== ERC-7813 ===
TITLE: Store, Table-Based Introspectable Storage
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-11-08
REQUIRES: 

SUMMARY:
This standard introduces a flexible on-chain storage pattern that organizes data into structured tables that consist of records with fixed key and value schemas,

SPECIFICATION:
### Definitions #### Store A smart contract that implements the interface proposed by this ERC and organizes data in Tables. It emits events for

MOTIVATION:
The absence of consistent standards for on-chain data management in smart contracts can lead to rigid implementations, tightly coupled contract logic with off-chain services,

RATIONALE:
### Splice Events While the `Store_SetRecord` event suffices for tracking the data of each record off-chain, including `Splice` events (`Store_SpliceStaticData` and `Store_SpliceDynamicData`) allows for


=== ERC-5539 ===
TITLE: Revocation List Registry
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-08-26
REQUIRES: 712

SUMMARY:
This EIP proposes a set of methods and standards for a role-based registry of indicators aimed for usage in revocations.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Revocation is a universally needed construct both in the traditional centralized and decentralized credential attestation. This EIP aims to provide an interface to standardize

RATIONALE:
### Why the concept of namespaces? This provides every Ethereum address a reserved space, without the need to actively claim it in the contract.


=== ERC-4972 ===
TITLE: Name-Owned Account
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-04-04
REQUIRES: 137

SUMMARY:
The ERC suggests expanding the capabilities of the name service, such as ENS, by enabling each human-readable identity to be linked to a single

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
Name itself cannot hold any context. We want to build an extension of name service to give name rich context by offering each name

RATIONALE:
To achieve a one-to-one mapping from the name to the NOA, where each NOA's address is derived from the name node, we must include


=== ERC-5528 ===
TITLE: Refundable Fungible Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-16
REQUIRES: 20

SUMMARY:
This standard is an extension of [EIP-20](./eip-20.md). This specification defines a type of escrow service with the following flow: - The seller issues tokens.

SPECIFICATION:
There are two types of contract for the escrow process: - *Payable Contract*: The sellers and buyers use this token to fund the *Escrow

MOTIVATION:
Because of the pseudonymous nature of cryptocurrencies, there is no automatic recourse to recover funds that have already been paid. In traditional finance, trusted

RATIONALE:
The interfaces cover the escrow operation's refundable issue. The suggested 3 functions (`escrowFund`, `escrowRefund` and `escrowWithdraw`) are based on `transfer` function in EIP-20. `escrowFund`


=== ERC-4361 ===
TITLE: Sign-In with Ethereum
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2021-10-11
REQUIRES: 5, 5, ,,  , 1, 3, 7, ,,  , 1, 5, 5, ,,  , 1, 9, 1, ,,  , 1, 2, 7, 1, ,,  , 1, 3, 2, 8

SUMMARY:
Sign-In with Ethereum describes how Ethereum accounts authenticate with off-chain services by signing a standard message format parameterized by scope, session details, and security

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
When signing in to popular non-blockchain services today, users will typically use identity providers (IdPs) that are centralized entities with ultimate control over users'

RATIONALE:
### Requirements Write a specification for how Sign-In with Ethereum should work. The specification should be simple and generally follow existing practices. Avoid feature


=== ERC-7291 ===
TITLE: Purpose bound money
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2023-06-24
REQUIRES: 1, 6, 5, ,,  , 1, 7, 3, ,,  , 1, 1, 5, 5

SUMMARY:
A Purpose Bound Money (PBM) token is a wrapper around an [ERC-1155](./eip-1155.md) token that can be used for a limited activity. This proposal outlines

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Purpose Bound Money (PBM) enables digital currencies to carry conditions on how they can be spent, making them especially useful in real-world scenarios such

RATIONALE:
### Why sovToken **MUST** be ERC-20 compatible? As PBM is envisioned to have functionality of money, it has to be a fungible token with


=== ERC-1129 ===
TITLE: Standardised DAPP announcements
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-31
REQUIRES: 

SUMMARY:
The proposed ERC defines format on how to post announcements about the service as well as how to remove them. It also defines mechanics

SPECIFICATION:
### Structures #### Announcer Stores information about the announcement maker. The `allowedToPost` stores posting permissions and is used for modifiers limiting announcement posting only

MOTIVATION:
Currently there are no guidelines on how to notify the users of the service status in the DAPPs. This is especially obvious in ERC20

RATIONALE:
The proposed solution was designed with UX in mind . It provides mechanics that serve to present the announcements in the user friendly way.


=== ERC-7750 ===
TITLE: Decentralized Employment System
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-08-04
REQUIRES: 

SUMMARY:
This ERC proposes a Decentralized Employment System (DES) built on the Ethereum blockchain. The DES facilitates the creation and management of companies, records comprehensive

SPECIFICATION:
### Solidity Interface To provide a clear and standardized way for developers to interact with the DES, the following Solidity interface outlines the primary

MOTIVATION:
Traditional employment systems are centralized, opaque, and often lack trust. The DES aims to introduce transparency, immutability, and trust into the employment process by

RATIONALE:
1. **Employee Tokenization**: - Utilizing **Soulbound Tokens (SBTs)** to represent employees ensures that each employee has a unique, non-transferable identity on the blockchain. This


=== ERC-3770 ===
TITLE: Chain-specific addresses
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2021-08-26
REQUIRES: 

SUMMARY:
[ERC-3770](./eip-3770.md) introduces a new address standard to be adapted by wallets and dApps to display chain-specific addresses by using a human-readable prefix.

SPECIFICATION:
This proposal extends addresses with a human-readable blockchain short name. ### Syntax A chain-specific address is prefixed with a chain shortName, separated with a

MOTIVATION:
The need for this proposal emerges from the increasing adoption of non-Ethereum Mainnet chains that use the Ethereum Virtual Machine (EVM). In this context,

RATIONALE:
To solve the initial problem of user-facing addresses being ambiguous in a multichain context, we need to map EIP-155 chain IDs with a user-facing


=== ERC-7595 ===
TITLE: Collateralized NFT
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-13
REQUIRES: 2, 0, ,,  , 7, 2, 1

SUMMARY:
This proposal recommends an extension of [ERC-721](./eip-721.md) to allow for collateralization using a list of [ERC-20](./eip-20.md) based tokens. The proprietor of this ERC collection

SPECIFICATION:
### ERC standard for new NFT collections ```solidity interface IERC721Envious is IERC721 { event Collateralized(uint256 indexed tokenId, uint256 amount, address tokenAddress); event Uncollateralized(uint256 indexed

MOTIVATION:
The emerging trend of NFT finance focuses on the NFT floor price to enable the market value of the NFT serve as a collateral

RATIONALE:
### “Envious” Term Choice We propose adopting the term "Envious" to describe any NFT collection minted using this ERC standard or any [ERC-721](./eip-721.md) based


=== ERC-205 ===
TITLE: ENS support for contract ABIs
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2017-02-06
REQUIRES: 1, 3, 7, ,,  , 1, 8, 1

SUMMARY:
ABIs are important metadata required for interacting with most contracts. At present, they are typically supplied out-of-band, which adds an additional burden to interacting

SPECIFICATION:
### ABI encodings In order to allow for different tradeoffs between onchain size and accessibility, several ABI encodings are defined. Each ABI encoding is

RATIONALE:
Storing ABIs onchain avoids the need to introduce additional dependencies for applications wishing to fetch them, such as swarm or HTTP access. Given the


=== ERC-1056 ===
TITLE: Ethereum Lightweight Identity
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-05-03
REQUIRES: 

SUMMARY:
This ERC describes a standard for creating and updating identities with a limited use of blockchain resources. An identity can have an unlimited number

SPECIFICATION:
This ERC specifies a contract called `EthereumDIDRegistry` that is deployed once and can then be commonly used by everyone. ### Identity ownership By default

MOTIVATION:
As we have been developing identity systems for the last couple of years at uPort it has become apparent that the cost of identity

RATIONALE:
For on-chain interactions Ethereum has a built in account abstraction that can be used regardless of whether the account is a smart contract or


=== ERC-4799 ===
TITLE: Non-Fungible Token Ownership Designation Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-02-13
REQUIRES: 165

SUMMARY:
The following defines a standard interface for designating ownership of an NFT to someone while the NFT is held in escrow by a smart

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Many NFTs aim to provide their holders with some utility - utility that can come in many forms. This can be the right to

RATIONALE:
To maximize the future compatibility of the wrapping contract, we first defined a canonical NFT interface. We created `IERC4799NFT`, an interface implicitly implemented by


=== ERC-7555 ===
TITLE: Single Sign-On for Account Discovery
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-11-10
REQUIRES: 4337

SUMMARY:
This proposal establishes a standardized interface and functionality for applications to discover user accounts besides the readily available EOA. Specifically discovering normal accounts and

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The recent progress in account abstraction has led to significantly increased flexibility enabling use cases such as multi-signature transactions, social recovery, contract/account whitelisting, session

RATIONALE:
### Redirects Taking inspiration from how SSO functions in the web today. We implement a similar redirect pattern, consisting of a simple request/response. ####


=== ERC-2525 ===
TITLE: ENSLogin
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-02-19
REQUIRES: 1, 3, 7, ,,  , 6, 3, 4, ,,  , 1, 1, 9, 3, ,,  , 2, 3, 0, 4


=== ERC-4944 ===
TITLE: Contract with Exactly One Non-fungible Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-03-25
REQUIRES: 721

SUMMARY:
The following describes standard functions for an [ERC-721](./eip-721.md) compatible contract with a total supply of one. This allows an NFT to be associated uniquely

SPECIFICATION:
The constructor should mint the unique token of the contract, and then the mint function should add a restriction to avoid further minting. Also,

MOTIVATION:
If the ERC-721 was modified to mint only 1 token (per contract), then the contract address could be identified uniquely with that minted token

RATIONALE:
The main motivation is to keep the contract compatible with current ERC-721 platforms.


=== ERC-7858 ===
TITLE: Expirable NFTs and SBTs
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2024-01-04
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
Introduces an extension for [ERC-721](./eip-721.md) Non-Fungible Tokens (NFTs) and Soulbound Tokens (SBTs) that adds an expiration mechanism, allowing tokens to become invalid after a

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be

MOTIVATION:
Before this EIP, NFTs and SBTs implemented expiration mechanisms via custom mappings. However, this approach presents challenges, such as inconsistent integration with other smart

RATIONALE:
### First, do no harm Introducing expirability as an additional layer of functionality ensures it doesn’t interfere with existing use cases or applications. For


=== ERC-1386 ===
TITLE: Attestation management contract
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-08
REQUIRES: 


=== ERC-4671 ===
TITLE: Non-Tradable Tokens Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-01-13
REQUIRES: 165

SUMMARY:
A non-tradable token, or NTT, represents inherently personal possessions (material or immaterial), such as university diplomas, online training certificates, government issued documents (national id,

SPECIFICATION:
### Non-Tradable Token A NTT contract is seen as representing **one type of certificate** delivered by **one authority**. For instance, one NTT contract for

MOTIVATION:
We have seen in the past smart contracts being used to deliver university diplomas or driving licenses, for food labeling or attendance to events,

RATIONALE:
### On-chain vs Off-chain A decision was made to keep the data off-chain (via `tokenURI()`) for two main reasons: * Non-tradable tokens represent personal


=== ERC-725 ===
TITLE: General data key/value store and execution
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2017-10-02
REQUIRES: 1, 6, 5, ,,  , 1, 7, 3

SUMMARY:
The following describes two standards that allow for a generic data storage in a smart contract and a generic execution through a smart contract.

SPECIFICATION:
### Ownership This contract is controlled by a single owner. The owner can be a smart contract or an external account. This standard requires

MOTIVATION:
The initial motivation came out of the need to create a smart contract account system that's flexible enough to be viable long-term but also

RATIONALE:
The generic way of storing data keys with values was chosen to allow upgradability over time. Stored data values can be changed over time.


=== ERC-5453 ===
TITLE: Endorsement - Permit for Any Functions
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-08-12
REQUIRES: 1, 6, 5, ,,  , 7, 1, 2, ,,  , 1, 2, 7, 1, ,,  , 5, 7, 5, 0

SUMMARY:
This EIP establish a general protocol for permitting approving function calls in the same transaction rely on [ERC-5750](./eip-5750.md). Unlike a few prior art ([ERC-2612](./eip-2612.md)

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
1. Support permit(approval) alongside a function call. 2. Support a second approval from another user. 3. Support pay-for-by another user 4. Support multi-sig 5.

RATIONALE:
1. We chose to have both `ERC5453_TYPE_A`(single-endorsement) and `ERC5453_TYPE_B`(multiple-endorsements, same nonce for entire contract) so we could balance a wider range of use cases.


=== ERC-7565 ===
TITLE: Perpetual Contract NFTs as Collateral
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-11-27
REQUIRES: 7, 2, 1, ,,  , 4, 9, 0, 7

SUMMARY:
This ERC proposes a mechanism where a person (referred to as the "Asset Owner") can collateralize NFTs that represent locked deposits or assets, to

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The rapidly evolving landscape of DeFi has introduced various mechanisms for asset locking, offering benefits like interest and voting rights. However, one of the

RATIONALE:
### Design Motivation The design of this standard is driven by the need to address specific challenges in the DeFi sector, particularly concerning the


=== ERC-5409 ===
TITLE: EIP-1155 Non-Fungible Token extension
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-07-23
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This standard is an extension of [EIP-1155](./eip-1155.md). It proposes an additional function, `ownerOf`, which allows EIP-1155 tokens to support Non-Fungibility (unique owners). By implementing

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
Currently, EIP-1155 does not allow an external caller to detect whether a token is truly unique (can have only one owner) or fungible. This

RATIONALE:
`ownerOf` does not throw when a token does not exist (or does not have an owner). This simplifies the handling of such a case.


=== ERC-4400 ===
TITLE: EIP-721 Consumable Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2021-10-30
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This specification defines standard functions outlining a `consumer` role for instance(s) of [EIP-721](./eip-721.md). An implementation allows reading the current `consumer` for a given NFT

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
Many [EIP-721](./eip-721.md) contracts introduce their own custom role that grants permissions for utilising/consuming a given NFT instance. The need for that role stems from

RATIONALE:
Key factors influencing the standard: - Keeping the number of functions in the interfaces to a minimum to prevent contract bloat - Simplicity -


=== ERC-4955 ===
TITLE: Vendor Metadata Extension for NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-03-29
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP standardizes a schema for NFTs metadata to add new field namespaces to the JSON schema for [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md) NFTs.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
A standardized NFT metadata schema allows wallets, marketplaces, metaverses, and similar applications to interoperate with any NFT. Applications such as NFT marketplaces and metaverses

RATIONALE:
There are many projects which need custom properties in order to display a current NFT. Each project may have its own way to render


=== ERC-5564 ===
TITLE: Stealth Addresses
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-13
REQUIRES: 

SUMMARY:
This specification establishes a standardized method for interacting with stealth addresses, which allow senders of transactions or transfers to non-interactively generate private accounts exclusively

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The standardization of non-interactive stealth address generation presents the potential to significantly improve the privacy capabilities of the Ethereum network and other EVM-compatible chains

RATIONALE:
This ERC emerged from the need for privacy-preserving ways to transfer ownership without disclosing any information about the recipients' identities. Token ownership can expose


=== ERC-3450 ===
TITLE: Standardized Shamir Secret Sharing Scheme for BIP-39 Mnemonics
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-03-29
REQUIRES: 

SUMMARY:
A standardized approach to splitting a BIP-39 mnemonic into _N_ BIP-39 mnemonics, called shares, so that _T_ shares are required to recover the original

SPECIFICATION:
### Shamir's Secret Sharing Scheme Shamir's Secret Sharing Scheme is a cryptographic method to split a secret into _N_ unique parts, where any _T_

MOTIVATION:
We'd like to make it easier for less-technical users to store keys securely. Currently, many users use BIP-39 mnemonics to store entropy values underlying

RATIONALE:
### Choice of Field The field GF(256) was chosen, because the field arithmetic is easy to implement in any programming language and many implementations


=== ERC-5380 ===
TITLE: ERC-721 Entitlement Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-03-11
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 0, 4, 6

SUMMARY:
This EIP proposes a new interface that allows [ERC-721](./eip-721.md) token owners to grant limited usage of those tokens to other addresses.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
There are many scenarios in which it makes sense for the owner of a token to grant certain properties to another address. One use

RATIONALE:
[ERC-20](./eip-20.md) and [ERC-1155](./eip-1155.md) are unsupported as partial ownership is much more complex to track than boolean ownership.


=== ERC-6065 ===
TITLE: Real Estate Token
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-11-29
REQUIRES: 721

SUMMARY:
This proposal introduces an open structure for physical real estate and property to exist on the blockchain. This standard builds off of [ERC-721](./eip-721.md), adding

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to

MOTIVATION:
Real estate is the largest asset class in the world. By tokenizing real estate, barriers to entry are lowered, transaction costs are minimized, information

RATIONALE:
### Introduction Real world assets operate in messy, non-deterministic environments. Because of this, validating the true state of an asset can be murky, expensive,


=== ERC-5725 ===
TITLE: Transferable Vesting NFT
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-08
REQUIRES: 721

SUMMARY:
A **Non-Fungible Token** (NFT) standard used to vest tokens ([ERC-20](./eip-20.md) or otherwise) over a vesting release curve. The following standard allows for the implementation

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Vesting contracts, including timelock contracts, lack a standard and unified interface, which results in diverse implementations of such contracts. Standardizing such contracts into a

RATIONALE:
### Terms These are base terms used around the specification which function names and definitions are based on. - _vesting_: Tokens which a vesting


=== ERC-7586 ===
TITLE: Interest Rate Swaps
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-12-31
REQUIRES: 2, 0, ,,  , 1, 6, 5

SUMMARY:
This proposal introduces a standardized framework for on-chain interest rate swaps. The proposed standard aims to facilitate the seamless exchange of fixed and floating

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Interest Rate Swapping (IRS) denotes a derivative contract wherein two parties mutually consent to exchange a series of forthcoming interest payments based on a

RATIONALE:
This standard allows parties involved in the IRS contract to define essential parameters such as notional amount, interest rates, payment frequency, and payment dates.


=== ERC-1504 ===
TITLE: Upgradable Smart Contract
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-10-17
REQUIRES: 

SUMMARY:
Ethereum smart contracts have suffered a number of security issues in the past few years. The cost of fixing such a bug in smart

SPECIFICATION:
The upgradable contract consists of three parts: - **Handler contract** (implements **Handler interface**) defines operations and provides services. This contract can be upgraded; -

MOTIVATION:
Smart contract is immutable after deployment. If any security risk is identified or program bug is detected, developers always have to destruct the old

RATIONALE:
### Data Contract and Handler Contract A smart contract is actually a kind of software, which provides some kind of services. From the perspective


=== ERC-7196 ===
TITLE: Simple token, Simplified ERC-20
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-21
REQUIRES: 20

SUMMARY:
This ERC is a new asset designed based on the user contract wallet (including account abstraction), and is forward compatible with [ERC-20](./eip-20.md). To keep

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[ERC-20](./eip-20.md) defines Ethereum-based standard tokens that can be traded and transferred, but the essence of ERC-20 is based on the externally-owned account (EOA) wallet

RATIONALE:
The proposal is to simplify token standards by removing `transferFrom`, `approve` and `allowance` functions. This simplification aims to enhance security, reduce complexity, and improve


=== ERC-7812 ===
TITLE: ZK Identity Registry
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-11-08
REQUIRES: 

SUMMARY:
This EIP introduces an on-chain registry system for storing and proving abstract statements. Users may utilize the system to store commitments to their private

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
This EIP stemmed from the need to localize and unravel the storage and issuance of provable statements so that future protocols can anchor to

RATIONALE:
During the EIP specification we have considered two approaches: where every protocol has its own registry and where all protocols are united under a


=== ERC-7401 ===
TITLE: Parent-Governed Non-Fungible Tokens Nesting
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-07-26
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
❗️ **[ERC-7401](./eip-7401.md) supersedes [ERC-6059](./eip-6059.md).** ❗️ The Parent-Governed NFT Nesting standard extends [ERC-721](./eip-721.md) by allowing for a new inter-NFT relationship and interaction. At its core,

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
With NFTs being a widespread form of tokens in the Ethereum ecosystem and being used for a variety of use cases, it is time

RATIONALE:
Designing the proposal, we considered the following questions: 1. **How to name the proposal?**\ In an effort to provide as much information about the


=== ERC-3448 ===
TITLE: MetaProxy Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2021-03-29
REQUIRES: 

SUMMARY:
By standardizing on a known minimal bytecode proxy implementation with support for immutable metadata, this standard allows users and third party tools (e.g. Etherscan)

SPECIFICATION:
The exact bytecode of the MetaProxy contract is: ``` 20 bytes target contract address ---------------------------------------- 363d3d373d3d3d3d60368038038091363936013d7300000000000000000000000000000000000000005af43d3d93803e603457fd5bf3 ``` wherein the bytes at indices 21 -

MOTIVATION:
This standard supports use-cases wherein it is desirable to clone exact contract functionality with different parameters at another address.

RATIONALE:
The goals of this effort have been the following: - a cheap way of storing immutable metadata for each child instead of using storage


=== ERC-1523 ===
TITLE: Standard for Insurance Policies as ERC-721 Non Fungible Tokens
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-10-10
REQUIRES: 721

SUMMARY:
The following standard allows for the implementation of a standard API for insurance policies within smart contracts. Insurance policies are financial assets which are

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
For a decentralized insurance protocol, a standard for insurance policies is crucial for interoperability of the involved services and application. It allows policies to

RATIONALE:
Insurance policies form an important class of financial assets, and it is natural to express those assets as a class of non-fungible tokens which


=== ERC-5375 ===
TITLE: NFT Author Information and Consent
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-07-30
REQUIRES: 5, 5, ,,  , 1, 5, 5, ,,  , 7, 1, 2, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP standardizes a JSON format for storing off-chain information about NFT authors. Specifically, it adds a new field which provides a list of

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
There is currently no standard to identify authors of an NFT, and existing techniques have issues: - Using the mint `tx.origin` or `msg.sender` -

RATIONALE:
### Why provide only an author consent proof? Adding support for full authorship proofs (i.e. Alice is the author and no one else is


=== ERC-6662 ===
TITLE: AA Account Metadata For Authentication
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-03-09
REQUIRES: 4, 3, 3, 7, ,,  , 4, 8, 0, 4

SUMMARY:
This ERC proposes a new **IAccountMetadata** interface as an extension for [ERC-4337](./eip-4337.md) to store authentication data on-chain to support a more user-friendly authentication model.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
In this proposal, we propose a new **IAccountMetadata** interface as an extension for ERC-4337 **IAccount** interface. With this new interface, users can store authentication

RATIONALE:
To enable the new authentication workflow we described above, dApp needs to know two things: 1. **Where is the authenticator?** This is solved by


=== ERC-7828 ===
TITLE: Readable Interoperable Addresses using ENS
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-11-27
REQUIRES: 1, 5, 5, ,,  , 7, 9, 3, 0

SUMMARY:
This proposal extends [ERC-7930](./eip-7930.md) (Interoperable Addresses & Names) by standardizing a human-readable format for chain-specific addresses in the form `<address>@<chain>#<checksum>`. It introduces: - A

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The current Ethereum address landscape is leading to an ecosystem that will have hundreds and eventually thousands of L2s that use the same address

RATIONALE:
- Using ENS as the only resolving method means it's enough to use the same Interoperable Addresses v1 for this standard, without extending it


=== ERC-7628 ===
TITLE: ERC-721 Ownership Shares Extension
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-02-20
REQUIRES: 721

SUMMARY:
This proposal introduces an attribute of ownership and profit share quantities for each token under an NFT. This attribute signifies a stake in the

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
At times, when we wish to distribute dividends or assign rights to tokens of an NFT based on their share of ownership, it becomes

RATIONALE:
#### Share Issuance to a Token Issuing additional shares to a token allows for flexible management of ownership stakes in digital assets, catering to


=== ERC-190 ===
TITLE: Ethereum Smart Contract Packaging Standard
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2017-01-10
REQUIRES: 


=== ERC-5219 ===
TITLE: Contract Resource Requests
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-07-10
REQUIRES: 

SUMMARY:
This EIP standardizes an interface to make resource requests to smart contracts and to receive HTTP-like responses.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
Ethereum is the most-established blockchain for building decentralized applications (referred to as `DApp`s). Due to this, the Ethereum DApp ecosystem is very diverse. However,

RATIONALE:
The `request` method was chosen to be readonly because all data should be sent to the contract from the parsed DApp. Here are some


=== ERC-2018 ===
TITLE: Clearable Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-04-30
REQUIRES: 1996

SUMMARY:
The clearing process turns the promise of a transfer into the actual movement of money from one account to another. A clearing agent decides

SPECIFICATION:
```solidity interface ClearableToken /* is ERC-1996 */ { enum ClearableTransferStatusCode { Nonexistent, Ordered, InProcess, Executed, Rejected, Cancelled } function orderTransfer(string calldata operationId, address to,

MOTIVATION:
A regulated token needs to comply with all the legal requirements, especially [KYC][KYC-Wikipedia] and [AML][AML-Wikipedia]. Some of these checks may not be able to

RATIONALE:
This EIP uses [EIP-1996][EIP-1996] to hold the money after a transfer is ordered. A clearing agent, whose implementation is not part of this proposal,


=== ERC-7831 ===
TITLE: Multi-Chain Addressing
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-08-30
REQUIRES: 5, 5, ,,  , 1, 3, 7, ,,  , 1, 5, 5, ,,  , 1, 6, 5, ,,  , 2, 3, 0, 4

SUMMARY:
This proposal introduces a chain-specific address format that allows specifying both an account and the chain on which that account intends to transact. These

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The Ethereum ecosystem is becoming steadily more fragmented. This means a 20 byte address by itself is not enough information to fully specify an

RATIONALE:
### Component Order The components are ordered from most specific to most general because... <!-- TODO --> ### Separator Choice The colon (`:`) is


=== ERC-2266 ===
TITLE: Atomic Swap-based American Call Option Contract Standard
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2019-08-17
REQUIRES: 

SUMMARY:
This standard provides functionality to make Atomic Swap-based American Call Option payment. The Atomic Swap protocol based on Hashed Time-Locked Contract (HTLC) [^1] has

SPECIFICATION:
The Atomic Swap-based American Call Option smart contract should follow the syntax and semantics of Ethereum smart contracts. ### Definitions + `initiator`: the party

MOTIVATION:
Atomic Swap allows users to atomically exchange their tokens without trusted third parties while the HTLC is commonly used for the implementation. However, the

RATIONALE:
+ To achieve the atomicity, HTLC is used. + The participant should decide whether to participate after the initiator locks the token and sets


=== ERC-1922 ===
TITLE: zk-SNARK Verifier Standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-14
REQUIRES: 1, 6, 5, ,,  , 1, 9, 6, ,,  , 1, 9, 7

SUMMARY:
The following standard allows for the implementation of a standard contract API for the verification of zk-SNARKs ("Zero-Knowledge Succinct Non-Interactive Arguments of Knowledge"), also

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
zk-SNARKs are a promising area of interest for the Ethereum community. Key applications of zk-SNARKs include: - Private transactions - Private computations - Improved

RATIONALE:
### Taxonomy ⚠️ TODO: Add a specific reference to libsnark here, explaining the choice of variable names. :warning: TODO: Explain how _C_ may not


=== ERC-998 ===
TITLE: Composable Non-Fungible Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2018-07-07
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
An extension of the [ERC-721 standard](./eip-721.md) to enable ERC-721 tokens to own other ERC-721 tokens and [ERC-20](./eip-20.md) tokens. An extension of the [ERC-20](./eip-20.md) and

SPECIFICATION:
### ERC-721 `ERC998ERC721` top-down, `ERC998ERC20` top-down, and `ERC998ERC721` bottom-up composable contracts must implement the [ERC-721 interface](./eip-721.md). ### ERC-20 `ERC998ERC20` bottom-up composable contracts must implement

RATIONALE:
Two different kinds of composable (top-down and bottom-up) exist to handle different use cases. A regular ERC-721 token cannot own a top-down composable, but


=== ERC-5095 ===
TITLE: Principal Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-05-01
REQUIRES: 2, 0, ,,  , 2, 6, 1, 2

SUMMARY:
Principal tokens represent ownership of an underlying [EIP-20](./eip-20.md) token at a future timestamp. This specification is an extension on the [EIP-20](./eip-20.md) token that provides

SPECIFICATION:
All Principal Tokens (PTs) MUST implement [EIP-20](./eip-20.md) to represent ownership of future underlying redemption. If a PT is to be non-transferrable, it MAY revert

MOTIVATION:
Principal tokens lack standardization which has led to a difficult to navigate development space and diverse implementation schemes. The primary examples include yield tokenization

RATIONALE:
The Principal Token interface is designed to be optimized for integrators with a core minimal interface alongside optional interfaces to enable backwards compatibility. Details


=== ERC-5982 ===
TITLE: Role-based Access Control
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-11-15
REQUIRES: 1, 6, 5, ,,  , 5, 7, 5, 0

SUMMARY:
This EIP defines an interface for role-based access control for smart contracts. Roles are defined as `byte32`. The interface specifies how to read, grant,

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
There are many ways to establish access control for privileged actions. One common pattern is "role-based" access control, where one or more users are

RATIONALE:
1. The names and parameters of methods in `IERC_ACL_CORE` are chosen to allow backward compatibility with OpenZeppelin's implementation. 2. The methods in `IERC_ACL_GENERAL` conform


=== ERC-2135 ===
TITLE: Consumable Interface (Tickets, etc)
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2019-06-23
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP defines an interface to mark a digital asset as "consumable" and to react to its "consumption."

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Digital assets sometimes need to be consumed. One of the most common examples is a concert ticket. It is "consumed" when the ticket-holder enters

RATIONALE:
1. The function `consume` performs the consume action. This EIP does not assume: - who has the power to perform consumption - under what


=== ERC-5507 ===
TITLE: Refundable Tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-19
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This ERC adds refund functionality for initial token offerings to [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), and [ERC-1155](./eip-1155.md). Funds are held in escrow until a predetermined time before

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The NFT and token spaces lack accountability. For the health of the ecosystem as a whole, better mechanisms to prevent rugpulls from happening are

RATIONALE:
`refundDeadlineOf` uses blocks instead of timestamps, as timestamps are less reliable than block numbers. The function names of `refund`, `refundOf`, and `refundDeadlineOf` were chosen


=== ERC-5851 ===
TITLE: On-Chain Verifiable Credentials
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-10-18
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 1, 1, 6, 7, ,,  , 1, 9, 6, 7, ,,  , 3, 4, 7, 5

SUMMARY:
This proposal introduces a method of certifying that a particular address meets a claim, and a method of verifying those certifications using on-chain metadata.

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be

MOTIVATION:
On-chain issuance of verifiable attestations are essential for use-case like: - Avoiding Sybil attacks with one person one vote - Participation in certain events

RATIONALE:
TBD


=== ERC-7303 ===
TITLE: Token-Controlled Token Circulation
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-09
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5, ,,  , 5, 6, 7, 9

SUMMARY:
This ERC introduces an access control scheme termed Token-Controlled Token Circulation (TCTC). By representing the privileges associated with a role as an [ERC-721](./eip-721.md) or

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
There are numerous methods to implement access control for privileged actions. A commonly utilized pattern is "role-based" access control as specified in [ERC-5982](./eip-5982.md). This

RATIONALE:
The choice to utilize ERC-721 or ERC-1155 token as the control token for privileges enhances visibility of such privileges within wallets, thus simplifying privilege


=== ERC-7406 ===
TITLE: Multi-Namespace Onchain Registry
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-23
REQUIRES: 137

SUMMARY:
This EIP proposes a universally accepted description for onchain registry entries with support for multi-namespaces, where each entry is structured as a mapping type.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
Blockchain-based registries are fundamental components for decentralized applications, enabling the storage and retrieval of essential information. Existing solutions, like the ENS registry, serve specific

RATIONALE:
By supporting multiple namespaces, the registry caters to various use cases, including but not limited to identity management, session management, record tracking, and decentralized


=== ERC-2334 ===
TITLE: BLS12-381 Deterministic Account Hierarchy
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-09-30
REQUIRES: 2333

SUMMARY:
A standard for allocating keys generated by [EIP-2333](./eip-2333.md) to a specific purpose. It defines a `path` which is a string that parses into the

SPECIFICATION:
### Path The path traversed through the tree of keys is defined by integers (which indicate the sibling index) separated by `/` which denote

MOTIVATION:
Ethereum 2.0 alongside many other projects will use BLS signatures over BLS12-381, an [IETF proposed standard](https://datatracker.ietf.org/doc/draft-irtf-cfrg-bls-signature/). This new scheme requires a new key derivation

RATIONALE:
`purpose`, `coin_type`, and `account` are widely-adopted terms as per [BIP43](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki) and [BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) and therefore reusing these terms and their associated meanings makes sense. The


=== ERC-5023 ===
TITLE: Shareable Non-Fungible Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-01-28
REQUIRES: 165

SUMMARY:
This EIP standardizes an interface for non-fungible value-holding shareable tokens. Shareability is accomplished by minting copies of existing tokens for new recipients. Sharing and

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
NFT standards such as [EIP-721](./eip-721.md) and [EIP-1155](./eip-1155.md) have been developed to standardize scarce digital resources. However, many non-fungible digital resources need not be scarce.

RATIONALE:
Current NFT standards define transferable non-fungible tokens, but not shareable non-fungible tokens. To be able to create shareable NFTs we see that existing NFT


=== ERC-6047 ===
TITLE: ERC-721 Balance indexing via Transfer event
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-11-26
REQUIRES: 721

SUMMARY:
This EIP extends [ERC-721](./eip-721.md) to allow the tracking and indexing of NFTs by mandating that a pre-existing event be emitted during contract creation. ERC-721

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[ERC-721](./eip-721.md) requires a `Transfer` event to be emitted whenever a transfer or mint (i.e. transfer from `0x0`) or burn (i.e. transfer to `0x0`) occurs,

RATIONALE:
Using the existing `Transfer` event instead of creating a new event (e.g. `Creation`) allows this EIP to be backward compatible with existing indexers.E


=== ERC-3135 ===
TITLE: Exclusive Claimable Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-08-10
REQUIRES: 20

SUMMARY:
This EIP defines a set of additions to the default token standard such as ERC-20, that allows online/offline service providers establish micropayment channels with

SPECIFICATION:
```solidity /// @return Image url of this token or descriptive resources function iconUrl() external view returns (string memory); /// @return Issuer of this token.

MOTIVATION:
There are two main purposes of this EIP, one is to reduce interactions with blockchain, the second is to link Ethereum to real-world payment

RATIONALE:
This EIP targets on ERC-20 tokens due to its widespread adoption. However, this extension is designed to be compatible with other token standard. The


=== ERC-7674 ===
TITLE: Temporary Approval Extension for ERC-20
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-02
REQUIRES: 2, 0, ,,  , 1, 1, 5, 3

SUMMARY:
This specification defines the minimum interface required to temporarily approve [ERC-20](./eip-20.md) tokens for spending within the same transaction.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
User are often required to set a token approval that will only be used once. It is common to leave unexpected approvals after these

RATIONALE:
It was decided to make minimal interface extension to allow easier integration of a compliant contract into the existing infrastructure. This affects the backward


=== ERC-7955 ===
TITLE: Permissionless CREATE2 Factory
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-05-15
REQUIRES: 1, 0, 1, 4, ,,  , 7, 7, 0, 2

SUMMARY:
This ERC defines a permissionless and deterministic deployment mechanism across all EVM-compatible chains. It uses the [EIP-7702](./eip-7702.md) `Set Code for EOAs (0x4)` transaction type

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Ensuring that contracts share the same address and code on multiple chains is a hard problem. It is typically done by having a known

RATIONALE:
### Deployment Mechanism The deployment mechanism was chosen such that it is uniquely parameterized by the `DEPLOYER_ADDRESS` (which itself is derived from the `DEPLOYER_PRIVATE_KEY`


=== ERC-3722 ===
TITLE: Poster
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-07-31
REQUIRES: 

SUMMARY:
A ridiculously simple general purpose social media smart contract. It takes two strings (`content` and `tag`) as parameters and emits those strings, along with

SPECIFICATION:
### Contract ```solidity contract Poster { event NewPost(address indexed user, string content, string indexed tag); function post(string calldata content, string calldata tag) public {

MOTIVATION:
Poster is intended to be used as a base layer for decentralized social media. It can be deployed to the same address (via the

RATIONALE:
There was some discussion around whether or not an post ID should also be emitted, whether the content should be a string or bytes,


=== ERC-7679 ===
TITLE: UserOperation Builder
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-05
REQUIRES: 4337

SUMMARY:
Different [ERC-4337](./eip-4337.md) smart account implementations encode their signature, nonce, and calldata differently. This makes it difficult for DApps, wallets, and smart account toolings to

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
At the moment, to build a [ERC-4337](./eip-4337.md) UserOperation (UserOp for short) for a smart account requires detailed knowledge of how the smart account implementation

RATIONALE:
### Context The `context` is an array of bytes that encodes whatever data the UserOp builder needs in order to correctly determine the nonce,


=== ERC-6229 ===
TITLE: Tokenized Vaults with Lock-in Period
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-12-21
REQUIRES: 4626

SUMMARY:
This standard extends [EIP-4626](./eip-4626.md) to support lock-in periods.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The [EIP-4626](./eip-4626.md) standard defines a tokenized vault allowing users (contracts or EOAs) to deposit and withdraw underlying tokens at any time. However, there exist

RATIONALE:
The standard is designed to be a minimal interface. Details such as the start and end of a lock-in period, and how the underlying


=== ERC-7531 ===
TITLE: Staked ERC-721 Ownership Recognition
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2023-10-01
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The ownership of [ERC-721](./eip-721.md) tokens when staked in a pool presents challenges, particularly when it involves older, non-lockable NFTs like, for example, Crypto Punks

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Recent solutions involve retaining NFT ownership while "locking" an NFT letting the owner keeping its ownership. However, this requires the NFT contract to implement

RATIONALE:
### Addressing Non-Lockable NFT Challenges: Non-lockable NFTs present a unique challenge in decentralized ecosystems, especially in scenarios involving staking or delegating usage rights. The


=== ERC-1633 ===
TITLE: Re-Fungible Token Standard (RFT)
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-11-18
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The intention of this proposal, the Re-Fungible Token Standard, is to extend the ERC-20 Token Standard and utilize ERC-165 Standard Interface Detection in order

SPECIFICATION:
At a minimum, third parties need two things: 1) to be able to distinguish re-fungible tokens from other token standards and 2) to determine

MOTIVATION:
Shared ownership occurs across many industries and for many reasons. As more assets are registered, regulated and/or represented by the ERC-721 Non-Fungible Token Standard

RATIONALE:
Most of the decisions made around the design of this standard were done in the hopes of keeping it as flexible as possible for


=== ERC-5489 ===
TITLE: NFT Hyperlink Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-08-16
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This EIP proposes a new extension for NFTs (non-fungible token, aka [EIP-721](./eip-721.md)): nft-hyperlink-extention (hNFT), embedding NFTs with hyperlinks, referred to as “hNFTs”. As owners

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
As NFTs attract more attention, they have the potential to become the primary medium of Web3. Currently, end users can’t attach rich texts, videos,

RATIONALE:
### Extends NFT with hyperlinks URIs are used to represent the value of slots to ensure enough flexibility to deal with different use cases.


=== ERC-1271 ===
TITLE: Standard Signature Validation Method for Contracts
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-07-25
REQUIRES: 

SUMMARY:
Externally Owned Accounts (EOA) can sign messages with their associated private keys, but currently contracts cannot. We propose a standard way for any contracts

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted

MOTIVATION:
There are and will be many contracts that want to utilize signed messages for validation of rights-to-move assets or other purposes. In order for

RATIONALE:
We believe the name of the proposed function to be appropriate considering that an *authorized* signers providing proper signatures for a given data would


=== ERC-7615 ===
TITLE: Atomic Push-based Data Feed Among Contracts
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-03
REQUIRES: 

SUMMARY:
This ERC proposes a push-based mechanism for sending data, allowing publisher contract to automatically push certain data to subscriber contracts during a call. The

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Currently, there are many keepers rely on off-chain data or seperate data collection process to monitor the events on chain. This proposal aims to

RATIONALE:
### Unconditional and Conditional Configuration When the sending contract is called, it is possible to trigger a push, requiring the caller to pay the


=== ERC-2390 ===
TITLE: Geo-ENS
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-11-15
REQUIRES: 1, 3, 7, ,,  , 1, 6, 5, ,,  , 1, 0, 6, 2, ,,  , 1, 1, 8, 5

SUMMARY:
This EIP specifies an ENS resolver interface for geographically split horizon DNS. Geographic split horizon DNS returns resource records that are specific to an

SPECIFICATION:
This EIP proposes a new interface to ENS resolvers such that geo-spacial information can be recorded and retrieved from the blockchain. The interface changes

MOTIVATION:
There are many use cases for traditional GeoDNS systems, like Amazon's Route53, in the centralized web. These use cases include proximity-based load balancing and

RATIONALE:
The proposed implementation uses a sparse [Quadtree](https://dl.acm.org/doi/10.1007/BF00288933) trie as an index for resource records as it has low storage overhead and good search performance.


=== ERC-7654 ===
TITLE: Request Method Types
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-03-13
REQUIRES: 

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

RATIONALE:
### Type of request method In order to enable the client to operate the contract in a standardized and predictable way, three request method


=== ERC-7496 ===
TITLE: NFT Dynamic Traits
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-07-28
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This specification introduces a new interface that extends [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) that defines methods for setting and getting dynamic onchain traits associated with non-fungible

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Trait values for non-fungible tokens are often stored offchain. This makes it difficult to query and mutate these values in contract code. Specifying the

RATIONALE:
The design of this specification is primarily a key-value mapping for maximum flexibility. This interface for traits was chosen instead of relying on using


=== ERC-5114 ===
TITLE: Soulbound Badge
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-05-30
REQUIRES: 

SUMMARY:
A soulbound badge is a token that, when minted, is bound to another Non-Fungible Token (NFT), and cannot be transferred/moved after that.

SPECIFICATION:
```solidity interface IERC5114 { // fired anytime a new instance of this badge is minted // this event **MUST NOT** be fired twice for

RATIONALE:
### Immutability By requiring that badges can never move, we both guarantee non-separability and non-mergeability among collections of soulbound badges that are bound to


=== ERC-7634 ===
TITLE: Limited Transfer Count NFT
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2024-02-22
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard extends [ERC-721](./eip-721.md) to introduce a mechanism that allows minters to customize the transferability of NFTs through a parameter called `TransferCount`. `TransferCount` sets

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Once NFTs are sold, they detach from their minters (creators) and can be perpetually transferred thereafter. Yet, many circumstances demand precise control over NFT

RATIONALE:
### Does tracking the internal transfer count matter? Yes and no. It is optional and quite depends on the actual requirements. The reference implementation


=== ERC-5559 ===
TITLE: Cross Chain Write Deferral Protocol
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-06-23
REQUIRES: 712

SUMMARY:
The following standard provides a mechanism in which smart contracts can request various tasks to be resolved by an external handler. This provides a

SPECIFICATION:
### Overview There are two main handler classifications: L2 Contract and Off-Chain Database. These are determined based off of where the handler is deployed.

MOTIVATION:
[EIP-3668](./eip-3668) provides a mechanism by which off-chain lookups can be defined inside smart contracts in a transparent manner. In addition, it provides a scheme

RATIONALE:
### Use of `revert` to convey call information [EIP-3668](./eip-3668) adopted the idea of using a `revert` to convey call information. It was proposed as


=== ERC-5202 ===
TITLE: Blueprint contract format
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-06-23
REQUIRES: 170

SUMMARY:
Define a standard for "blueprint" contracts, or contracts which represent initcode that is stored on-chain.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
To decrease deployer contract size, a useful pattern is to store initcode on chain as a "blueprint" contract, and then use `EXTCODECOPY` to copy

RATIONALE:
- To save gas and storage space, the preamble should be as minimal as possible. - It is considered "bad" behavior to try to


=== ERC-6960 ===
TITLE: Dual Layer Token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-04-30
REQUIRES: 

SUMMARY:
The dual-layer token combines the functionalities of [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), and [ERC-1155](./eip-1155.md) while adding a classification layer that uses `mainId` as the main asset type

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The [ERC-1155](./eip-1155.md) standard has experienced considerable adoption within the Ethereum ecosystem; however, its design exhibits constraints when handling tokens with multiple classifications, particularly in

RATIONALE:
The two-level classification system introduced in this EIP allows for a more organized token ecosystem, enabling users to manage and track tokens with greater


=== ERC-1132 ===
TITLE: Extending ERC20 with token locking capability
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-06-03
REQUIRES: 

SUMMARY:
This proposal provides basic functionality to time-lock tokens within an ERC20 smart contract for multiple utilities without the need of transferring tokens to an

SPECIFICATION:
I’ve extended the ERC20 interface with the following enhancements: ### Locking of tokens ```solidity /** * @dev Locks a specified amount of tokens against

MOTIVATION:
dApps often require tokens to be time-locked against transfers for letting members 1) adhere to vesting schedules and 2) show skin in the game


=== ERC-7533 ===
TITLE: Public Cross Port
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-10-11
REQUIRES: 

SUMMARY:
The objective of Public Cross Port (PCP) is to securely and efficiently connect various EVM chains. It replaces the method of pushing message to

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Currently, there are official cross-chain bridges between L2 and L1, but not between L2s. If there are 10 L2 chains that need to cross-chain

RATIONALE:
The traditional approach involves using a push method, as depicted in the following diagram: ![](../assets/eip-7533/2.png) If there are 6 chains, each chain needs to


=== ERC-1046 ===
TITLE: tokenURI Interoperability
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2018-04-13
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
[ERC-721](./eip-721.md) introduced a `tokenURI` function for non-fungible tokens to handle miscellaneous metadata such as: - thumbnail image - title - description - special asset

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
See the note about the metadata extension in [ERC-721](./eip-721.md#rationale). The same arguments apply to ERC-20. Being able to use similar mechanisms to extract metadata

RATIONALE:
This ERC makes adding metadata to ERC-20 tokens more straightforward for developers, with minimal to no disruption to the overall ecosystem. Using the same


=== ERC-7085 ===
TITLE: NFT Relationship Enhancement
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-05-02
REQUIRES: 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This proposal builds on [ERC-1155](./eip-1155.md) and creates a standard for referring relationships and quantifiable attributes between non-isolated [ERC-721](./eip-721.md) or [ERC-1155](./eip-1155.md) non-fungible tokens (NFTs). It

SPECIFICATION:
This EIP proposes the addition of five new functions to the [ERC-721](./eip-721.md) and [ERC-1155](./eip-1155.md) standards: `setRelationship`, `setAttribute`, `getRelationship`, `getAttribute`, and `getAttributeNames`. These functions allow

MOTIVATION:
The current standard for NFTs lacks the ability to establish relationships and attributes between tokens. This limitation makes it difficult for users to build

RATIONALE:
In developing this EIP, some key design decisions were made. For example, we limited the complexity of the relationship graph that can be created


=== ERC-6147 ===
TITLE: Guard of NFT/SBT, an Extension of ERC-721
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-12-07
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It separates the holding right and transfer right of non-fungible tokens (NFTs) and Soulbound Tokens (SBTs) and

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
NFTs are assets that possess both use and financial value. Many cases of NFT theft currently exist, and current NFT anti-theft schemes, such as


=== ERC-2020 ===
TITLE: E-Money Standard Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-05-10
REQUIRES: 2, 0, ,,  , 1, 0, 6, 6, ,,  , 1, 9, 9, 6, ,,  , 2, 0, 0, 9, ,,  , 2, 0, 1, 8, ,,  , 2, 0, 1, 9, ,,  , 2, 0, 2, 1

SUMMARY:
Financial institutions work today with electronic systems, which hold account balances in databases on core banking systems. In order for an institution to be

SPECIFICATION:
```solidity interface EMoneyToken /* is ERC-1996, ERC-2018, ERC-2019, ERC-2021 */ { function currency() external view returns (string memory); function version() external pure returns (string

MOTIVATION:
There are only a number of potential regulatory license frameworks that allow institutions to issue and hold money balances for customers (be it retail

RATIONALE:
This EIP unifies [ERC-1996][ERC-1996], [ERC-2018][ERC-2018], [ERC-2019][ERC-2019] and [ERC-2021][ERC-2021] and adds the checks for the compliance on top of it. By this way the separate


=== ERC-7521 ===
TITLE: General Intents for Smart Contract Wallets
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-09-19
REQUIRES: 

SUMMARY:
A generalized intent specification entry point contract which enables support for a multitude of intent standards as they evolve over time. Instead of smart

SPECIFICATION:
Users package up intents they want their wallet to participate in, in an ABI-encoded struct called a `UserIntent`: | Field | Type | Description

MOTIVATION:
See also ["ERC-4337: Account Abstraction via Entry Point Contract specification"](./eip-4337.md) and the links therein for historical work and motivation. This proposal uses the same

RATIONALE:
The main challenge with a generalized intent standard is being able to adapt to the evolving world of intents. Users need to have a


=== ERC-7535 ===
TITLE: Native Asset ERC-4626 Tokenized Vault
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-10-12
REQUIRES: 2, 0, ,,  , 4, 6, 2, 6, ,,  , 7, 5, 2, 8

SUMMARY:
This standard is an extension of the [ERC-4626](./eip-4626.md) spec with an identical interface and behavioral overrides for handling Ether or any native asset as

SPECIFICATION:
All [ERC-7535](./eip-7535.md) tokenized Vaults MUST implement ERC-4626 (and by extension ERC-20) with behavioral overrides for the methods `asset`, `deposit`, and `mint` specified below. ###

MOTIVATION:
A standard for tokenized ETH Vaults has the same benefits as [ERC-4626](./eip-4626.md), particularly in the case of Liquid Staking Tokens, (i.e. fungible [ERC-20](./eip-20.md) wrappers

RATIONALE:
This standard was designed to maximize compatibility with ERC-4626 while minimizing additional opinionated details on the interface. Examples of this decision rationale are described


=== ERC-7856 ===
TITLE: Chain-Specific Payment Requests
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-01-01
REQUIRES: 

SUMMARY:
This EIP proposes a standardized URI scheme for chain-specific payment requests, enabling users to specify transactions in the form "send me X tokens of

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The ongoing expansion of the Ethereum network into a multi-chain ecosystem has introduced complexities regarding the execution of payment requests. Users and developers currently

RATIONALE:
The design of this URI standard for blockchain-based payment requests addresses the need for a clear and unambiguous method to initiate transactions across multiple


=== ERC-6672 ===
TITLE: Multi-redeemable NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-02-21
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This EIP proposes an extension to the [ERC-721](./eip-721.md) standard for Non-Fungible Tokens (NFTs) to enable multi-redeemable NFTs. Redemption provides a means for NFT holders

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The motivation behind our proposed NFT standard is to provide a more versatile and flexible solution compared to existing standards, allowing for multi-redeemable NFTs.

RATIONALE:
### Key Choices for Redemption Flag and Status The combination of `_operator`, `_tokenId`, and `_redemptionId` is chosen as the key because it provides a


=== ERC-6353 ===
TITLE: Charity token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-05-13
REQUIRES: 20

SUMMARY:
An extension to [EIP-20](./eip-20.md) that can automatically send an additional percentage of each transfer to a third party, and that provides an interface for

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
There are charity organizations with addresses on-chain, and there are token holders who want to make automated donations. Having a standardized way of collecting

RATIONALE:
This EIP chooses to whitelist charity addresses by using an array and keeping track of the "active" status with a mapping `whitelistedRate` to allow


=== ERC-6224 ===
TITLE: Contracts Dependencies Registry
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-12-27
REQUIRES: 1, 9, 6, 7, ,,  , 5, 7, 5, 0

SUMMARY:
This EIP introduces an on-chain registry system that a decentralized protocol may use to manage its smart contracts. The proposed system consists of two

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
In the ever-growing Ethereum ecosystem, projects tend to become more and more complex. Modern protocols require portability and agility to satisfy customer needs by

RATIONALE:
There are a few design decisions that have to be explicitly specified: ### ContractsRegistry Rationale #### Contracts Identifier The `string` contracts identifier is chosen


=== ERC-7920 ===
TITLE: Composite EIP-712 Signatures
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2025-03-20
REQUIRES: 2, 0, ,,  , 7, 1, 2

SUMMARY:
This ERC provides a standard for signing multiple typed-data messages with a single signature by encoding them into a Merkle tree. This allows components

SPECIFICATION:
### Overview The composite signature scheme uses a Merkle tree to hash multiple typed-data data messages together under a single root. The user signs

MOTIVATION:
As the ecosystem moves towards ETH-less transactions, users are often required to sign multiple off-chain messages in quick succession. Typically, a first signature is

RATIONALE:
The choice of using a Merkle tree to bundle messages provides the following additional benefits: ### Efficient verification on-chain `_verifyMerkleProof` has a runtime of


=== ERC-5164 ===
TITLE: Cross-Chain Execution
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2022-06-14
REQUIRES: 

SUMMARY:
This specification defines a cross-chain execution interface for EVM-based blockchains. Implementations of this specification will allow contracts on one chain to call contracts on

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Many Ethereum protocols need to coordinate state changes across multiple EVM-based blockchains. These chains often have native or third-party bridges that allow Ethereum contracts

RATIONALE:
The `MessageDispatcher` can be coupled to one or more `MessageExecutor`. It is up to bridges to decide how to couple the two. Users can


=== ERC-7007 ===
TITLE: Verifiable AI-Generated Content Token
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-05-10
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
The verifiable AI-generated content (AIGC) non-fungible token (NFT) standard is an extension of the [ERC-721](./eip-721.md) token standard for AIGC. It proposes a set of

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be

MOTIVATION:
The verifiable AIGC-NFT standard aims to extend the existing [ERC-721](./eip-721.md) token standard to accommodate the unique requirements of AI-generated content NFTs representing models in

RATIONALE:
### Unique Token Identification This specification sets the `tokenId` to be the hash of its corresponding `prompt`, creating a deterministic and collision-resistant way to


=== ERC-1388 ===
TITLE: Attestation Issuers Management List
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-09-08
REQUIRES: 


=== ERC-5192 ===
TITLE: Minimal Soulbound NFTs
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-07-01
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [EIP-721](./eip-721.md). It proposes a minimal interface to make tokens soulbound using the feature detection functionality of [EIP-165](./eip-165.md). A

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
The Ethereum community has expressed a need for non-transferrable, non-fungible, and socially-priced tokens similar to World of Warcraft’s soulbound items. But the lack of

RATIONALE:
The above model is the simplest possible path towards a canonical interface for Soulbound tokens. It reflects upon the numerous Soulbound token implementations that


=== ERC-3000 ===
TITLE: Optimistic enactment governance standard
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2020-09-24
REQUIRES: 

SUMMARY:
ERC-3000 presents a basic on-chain spec for contracts to optimistically enact governance decisions made off-chain. The standard is opinionated in defining the 6 entrypoint

SPECIFICATION:
### Data structures Some data structures are defined which are later used in the standard interfaces: ```solidity library ERC3000Data { struct Container { Payload

RATIONALE:
The authors believe that it is very important that this standard leaves the other open to any resolver mechanism to be implemented and adopted.


=== ERC-2019 ===
TITLE: Fundable Token
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2019-05-10
REQUIRES: 20

SUMMARY:
Token wallet owners (or approved addresses) can order tokenization requests through blockchain. This is done by calling the ```orderFund``` or ```orderFundFrom``` methods, which initiate

SPECIFICATION:
```solidity interface IFundable /* is ERC-20 */ { enum FundStatusCode { Nonexistent, Ordered, InProcess, Executed, Rejected, Cancelled } function authorizeFundOperator(address orderer) external returns (bool);

MOTIVATION:
Nowadays most of the token issuing/funding request, based on any fiat based payment method need a previous centralized transaction, to be able to get

RATIONALE:
This standards provides a functionality to allow token holders to start funding requests in a decentralized way. It's important to highlight that the token


=== ERC-6357 ===
TITLE: Single-contract Multi-delegatecall
TYPE: Standards Track ERC
STATUS: Last Call
CREATED: 2023-01-18
REQUIRES: 

SUMMARY:
This EIP standardizes an interface containing a single function, `multicall`, allowing EOAs to call multiple functions of a smart contract in a single transaction,

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Currently, in order to transfer several [ERC-721](./eip-721.md) NFTs, one needs to submit a number of transactions equal to the number of NFTs being tranferred.

RATIONALE:
`multicallPayable` is optional because it isn't always feasible to implement, due to the `msg.value` splitting.


=== ERC-7087 ===
TITLE: MIME type for Web3 URL in Auto Mode
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-05-28
REQUIRES: 6860

SUMMARY:
This standard extends the [ERC-6860](./eip-6860.md) `web3://` standard: in smart contracts not designed for `web3://` (thus using auto mode), the MIME type of the returned

SPECIFICATION:
The standard introduces three query parameters to determine the MIME type. - `mime.content=<contentType>`, where `<contentType>` is a MIME type defined in [RFC 6838](https://www.rfc-editor.org/rfc/rfc6838). If

MOTIVATION:
When returning data to the web browser, a `Content-Type` header indicating the MIME type of the data is strongly recommended, or the data may

RATIONALE:
The standard uses three different query parameters rather than a single query parameter to avoid confusion - an implementer or a user can easily


=== ERC-5791 ===
TITLE: Physical Backed Tokens
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2022-10-17
REQUIRES: 1, 9, 1, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [ERC-721](./eip-721.md). It proposes a minimal interface for a [ERC-721](./eip-721.md) NFT to be "physically backed" and owned by whoever

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
NFT collectors enjoy collecting digital assets and sharing them with others online. However, there is currently no such standard for showcasing physical assets as

RATIONALE:
This solution's intent is to be the simplest possible path towards linking physical items to digital NFTs without a centralized authority. The interface includes


=== ERC-3475 ===
TITLE: Abstract Storage Bonds
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2021-04-05
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
- This EIP allows the creation of tokenized obligations with abstract on-chain metadata storage. Issuing bonds with multiple redemption data cannot be achieved with

SPECIFICATION:
**Definition** Bank: an entity that issues, redeems, or burns bonds after getting the necessary amount of liquidity. Generally, a single entity with admin access

MOTIVATION:
Current LP (Liquidity Provider) tokens are simple [EIP-20](./eip-20.md) tokens with no complex data structure. To allow more complex reward and redemption logic to be

RATIONALE:
### Metadata structure Instead of storing the details about the class and their issuances to the user (ie nonce) externally, we store the details


=== ERC-5018 ===
TITLE: Filesystem-like Interface for Contracts
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-04-18
REQUIRES: 

SUMMARY:
The following standardizes an API for directories and files within smart contracts, similar to traditional filesystems. This standard provides basic functionality to read/write binary

SPECIFICATION:
### Directory #### Methods ##### write Writes binary `data` to the file `name` in the directory by an account with write permission. ``` function

MOTIVATION:
A standard interface allows any binary objects on EVM-based blockchain to be re-used by other dApps. With [EIP-4804](./eip-4804.md), we are able to locate a

RATIONALE:
One issue of uploading the web contents to the blockchain is that the web contents may be too large to fit into a single


=== ERC-927 ===
TITLE: Generalised authorisations
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2018-03-12
REQUIRES: 926

SUMMARY:
This EIP specifies a generic authorisation mechanism, which can be used to implement a variety of authorisation patterns, replacing approvals in ERC20, operators in

SPECIFICATION:
The generalised authorisation interface is implemented as a metadata provider, as specified in EIP 926. The following mandatory function is implemented: ```solidity function canCall(address

MOTIVATION:
Smart contracts commonly need to provide an interface that allows a third-party caller to perform actions on behalf of a user. The most common


=== ERC-5750 ===
TITLE: General Extensibility for Method Behaviors
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-10-04
REQUIRES: 165

SUMMARY:
This EIP standardizes the passing of unstructured call data to functions to enable future extensibility.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
The purpose of having extra data in a method is to allow further extensions to existing method interfaces. It is it useful to make

RATIONALE:
1. Using the dynamically-sized `bytes` type allows for maximum flexibility by enabling payloads of arbitrary types. 2. Having the bytes specified as the last


=== ERC-7897 ===
TITLE: Wallet-Linked Services for Smart Accounts
TYPE: Standards Track ERC
STATUS: Withdrawn
CREATED: 2024-04-15
REQUIRES: 1, 6, 5, ,,  , 1, 1, 6, 7, ,,  , 4, 3, 3, 7, ,,  , 6, 5, 5, 1, ,,  , 7, 6, 5, 6

SUMMARY:
This proposal defines a registry for generic services linked to smart accounts, with a special focus on [ERC-4337](./eip-4337.md) wallets, where services are contracts extending

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
[ERC-4337](./eip-4337.md) (Account Abstraction) introduces programmable smart accounts. Existing proposals to extend wallet functionalities (e.g., [ERC-6900](./eip-6900.md)) focus on internal modules. This proposal generalizes the concept

RATIONALE:
The technical foundation of [ERC-7897](./eip-7897.md) centers on the extension and generalization of contract types that can be associated with [ERC-4337](./eip-4337.md) wallets. Key decisions include:


=== ERC-7662 ===
TITLE: AI Agent NFTs
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-03-26
REQUIRES: 721

SUMMARY:
This proposal introduces a standard for AI agent NFTs. When AI Agents are created and traded as NFTs, it doesn't make sense to put

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
The creation and trading of AI Agent NFTs are a natural fit and offer the potential for an entirely new onchain market. This requires

RATIONALE:
This standard provides a unified way to create and parse AI Agent NFTs. This standard codifies the necessary parameters of Name, Description, Model, User


=== ERC-4906 ===
TITLE: EIP-721 Metadata Update Extension
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-03-13
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This standard is an extension of [EIP-721](./eip-721.md). It adds a `MetadataUpdate` event to EIP-721 tokens.

SPECIFICATION:
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as

MOTIVATION:
Many [EIP-721](./eip-721.md) contracts emit an event when one of its tokens' metadata are changed. While tracking changes based on these different events is possible,

RATIONALE:
Different NFTs have different metadata, and metadata generally has multiple fields. `bytes data` could be used to represents the modified value of metadata. It


=== ERC-6093 ===
TITLE: Custom errors for commonly-used tokens
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-12-06
REQUIRES: 2, 0, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP defines a standard set of custom errors for commonly-used tokens, which are defined as [ERC-20](./eip-20.md), [ERC-721](./eip-721.md), and [ERC-1155](./eip-1155.md) tokens. Ethereum applications and

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Since the introduction of Solidity custom errors in v0.8.4, these have provided a way to show failures in a more expressive and gas efficient

RATIONALE:
The chosen objectives for a standard for token errors are to provide context about the error, and to make moderate use of meaningful arguments


=== ERC-7540 ===
TITLE: Asynchronous ERC-4626 Tokenized Vaults
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-10-18
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 4, 6, 2, 6, ,,  , 7, 5, 7, 5

SUMMARY:
The following standard extends [ERC-4626](./eip-4626.md) by adding support for asynchronous deposit and redemption flows. The async flows are called Requests. New methods are added

SPECIFICATION:
### Definitions: The existing definitions from [ERC-4626](./eip-4626.md) apply. In addition, this spec defines: - Request: a request to enter (`requestDeposit`) or exit (`requestRedeem`) the

MOTIVATION:
The ERC-4626 Tokenized Vaults standard has helped to make yield-bearing tokens more composable across decentralized finance. The standard is optimized for atomic deposits and

RATIONALE:
### Including Request IDs but not including a Claim by ID method Requests in an Asynchronous Vault have properties of NFTs or Semi-Fungible tokens


=== ERC-5679 ===
TITLE: Token Minting and Burning
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-09-17
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 1, 1, 5, 5

SUMMARY:
This EIP introduces a consistent way to extend token standards for minting and burning.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
Minting and Burning are typical actions for creating and destroying tokens. By establishing a consistent way to mint and burn a token, we complete

RATIONALE:
1. It's possible that the interface be consolidated to the same as EIP-1155 which is always bearing `_amount` field, regardless of whether it's a


=== ERC-4824 ===
TITLE: Common Interfaces for DAOs
TYPE: Standards Track ERC
STATUS: Review
CREATED: 2022-02-17
REQUIRES: 

SUMMARY:
An API standard for decentralized autonomous organizations (DAOs), focused on relating on-chain and off-chain representations of membership and proposals.

SPECIFICATION:
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted

MOTIVATION:
DAOs, since being invoked in the Ethereum whitepaper, have been vaguely defined. This has led to a wide range of patterns but little standardization

RATIONALE:
In this standard, we assume that all DAOs possess at least two primitives: _membership_ and _behavior_. _Membership_ is defined by a set of addresses.


=== ERC-7629 ===
TITLE: ERC-20/ERC-721 Unified Token Interface
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-02-18
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal introduces a protocol that establishes a unified interface for managing both [ERC-20](./eip-20.md) fungible tokens and [ERC-721](./eip-721.md) non-fungible tokens (NFTs) on the Ethereum

SPECIFICATION:
- Introduces a token contract that combines features from both [ERC-20](./eip-20.md) and [ERC-721](./eip-721.md) standards. - Supports state transitions between [ERC-20](./eip-20.md) and [ERC-721](./eip-721.md) modes, facilitating

MOTIVATION:
The proposal aims to address the demand for assets combining the liquidity of [ERC-20](./eip-20.md) tokens and the uniqueness of [ERC-721](./eip-721.md) tokens. Current standards present

RATIONALE:
Common Interface for Different Token Types: - Introduces a unified interface to address the fragmentation caused by separate [ERC-20](./eip-20.md) and [ERC-721](./eip-721.md) standards. - Standardizes


=== ERC-7578 ===
TITLE: Physical Asset Redemption
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2023-08-01
REQUIRES: 1, 6, 5, ,,  , 7, 2, 1

SUMMARY:
This proposal is an extension of [ERC-721](./eip-721.md) and implements additional functionality and information pertaining to the NFT’s underlying physical asset by capturing information that

SPECIFICATION:
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as

MOTIVATION:
The first wave of NFT use cases encompass predominately the representation of ownership of digital assets. In view of the anticipated trend to tokenize

RATIONALE:
By not initializing a token's properties before minting, one risks that the asset's provenance represented by the token cannot be established. Contract level validation


=== ERC-6105 ===
TITLE: No Intermediary NFT Trading Protocol
TYPE: Standards Track ERC
STATUS: Final
CREATED: 2022-12-02
REQUIRES: 2, 0, ,,  , 1, 6, 5, ,,  , 7, 2, 1, ,,  , 2, 9, 8, 1

SUMMARY:
This ERC adds a marketplace functionality to [ERC-721](./eip-721.md) to enable non-fungible token trading without relying on an intermediary trading platform. At the same time,

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Most current NFT trading relies on an NFT trading platform acting as an intermediary, which has the following problems: 1. Security concerns arise from

RATIONALE:
### Considerations for some local variables The `salePrice` in the `listItem` function cannot be set to zero. Firstly, it is a rare occurrence for


=== ERC-7204 ===
TITLE: Contract wallet management token
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2023-06-21
REQUIRES: 165

SUMMARY:
This proposal introduces a smart contract wallet-based approach for managing tokens, focusing on utilizing the programmable features of smart contract wallets for asset management.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
An externally-owned account (EOA) wallet has no state and code storage, while the smart contract wallet does. Account abstraction (AA) is a direction of

RATIONALE:
the key technical decisions in this proposal are: **Improved Approve Mechanism** - **Current vs. Proposed**: In the existing ERC-20 system, an externally-owned account (EOA)


=== ERC-7673 ===
TITLE: Distinguishable base256emoji Addresses
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-04-01
REQUIRES: 

SUMMARY:
Introduce base256emoji for use as the primary input and display for account addresses in all user interfaces.

SPECIFICATION:
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to

MOTIVATION:
Human users often fail to distinguish between long strings of hexadecimal characters, especially when they match at the beginning and at the end. This

RATIONALE:
Previous attempts to reduce spoofing and other copy errors such as [ERC-55](./eip-55.md) have not reduced the number of characters in an address. Any base-256


=== ERC-7598 ===
TITLE: Use contract signature for signed transfer
TYPE: Standards Track ERC
STATUS: Draft
CREATED: 2024-01-15
REQUIRES: 1, 2, 7, 1, ,,  , 3, 0, 0, 9

SUMMARY:
This proposal aims to extend the functionality of the existing [ERC-3009](./eip-3009.md) standard, "Transfer With Authorization," to support transfer operations initiated by smart contract wallets.

SPECIFICATION:
The following events and interfaces must still be present given the initial spec defined in [ERC-3009](./eip-3009.md). - Event `AuthorizationUsed`. - Constants `TRANSFER_WITH_AUTHORIZATION_TYPEHASH` and `RECEIVE_WITH_AUTHORIZATION_TYPEHASH`.

MOTIVATION:
The existing [ERC-3009](./eip-3009.md) standard enables asset transfers with ECDSA signatures. However, as smart contract wallets become more prevalent in the ecosystem, the current standard

RATIONALE:
By replacing the existing V, R, S signature validation scheme and introducing support for unstructured bytes input, contract developers can use a unified interface


=== ERC-5143 ===
TITLE: Slippage Protection for Tokenized Vault
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2022-06-09
REQUIRES: 2, 0, ,,  , 4, 6, 2, 6

SUMMARY:
The following standard extends the [EIP-4626](./eip-4626.md) Tokenized Vault standard with functions dedicated to the safe interaction between EOAs and the vault when price is

SPECIFICATION:
This ERC is an extension of EIP-4626. Any contract implementing it MUST also implement EIP-4626. ### Methods #### deposit Overloaded version of ERC-4626's `deposit`.

MOTIVATION:
[EIP-4626](./eip-4626.md) security considerations section states that: > "If implementors intend to support EOA account access directly, they should consider adding an additional function call

RATIONALE:
This ERC's functions do not replace ERC-4626 equivalent mechanisms. They are additional (overloaded) methods designed to protect EOAs interacting with the vault. When smart


=== ERC-4430 ===
TITLE: Described Transactions
TYPE: Standards Track ERC
STATUS: Stagnant
CREATED: 2021-11-07
REQUIRES: 

SUMMARY:
Use a contract method to provide *virtual functions* which can generate a human-readable description at the same time as the machine-readable bytecode, allowing the

SPECIFICATION:
The **description** (a string) and the matching **execcode** (bytecode) are generated simultaneously by evaluating the method on a contract: ```solidity function eipXXXDescribe(bytes inputs, bytes32

MOTIVATION:
When using an Ethereum Wallet (e.g. MetaMask, Clef, Hardware Wallets) users must accept a transaction before it can be submitted (or the user may

RATIONALE:
### Meta Description There have been many attempts to solve this problem, many of which attempt to examine the encoded transaction data or message
